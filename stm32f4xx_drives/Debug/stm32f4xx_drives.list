
stm32f4xx_drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800203c  0800203c  0001203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800211c  0800211c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800211c  0800211c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800211c  0800211c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000160  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001966  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005fa  00000000  00000000  00021a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00022008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a8  00000000  00000000  000221e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002aed  00000000  00000000  00022390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f45  00000000  00000000  00024e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a60c  00000000  00000000  00026dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000313ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001018  00000000  00000000  00031420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  00032438  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  000324d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002024 	.word	0x08002024

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08002024 	.word	0x08002024

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
#define SLAVE_ADDR 0x68

uint8_t rcv_buff[255];

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB9 --> SDA
 *
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f9d9 	bl	8000698 <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f9d3 	bl	8000698 <GPIO_Init>

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	60da      	str	r2, [r3, #12]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	609a      	str	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fc30 	bl	8000b88 <I2C_Init>

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000194 	.word	0x20000194
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOB;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <GPIO_ButtonInit+0x54>)
 8000340:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f99e 	bl	8000698 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <GPIO_ButtonInit+0x58>)
 800035e:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000360:	230c      	movs	r3, #12
 8000362:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000364:	2301      	movs	r3, #1
 8000366:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000368:	2302      	movs	r3, #2
 800036a:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800036c:	2301      	movs	r3, #1
 800036e:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000370:	2300      	movs	r3, #0
 8000372:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000374:	2101      	movs	r1, #1
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000378:	f000 f8a6 	bl	80004c8 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800037c:	463b      	mov	r3, r7
 800037e:	4618      	mov	r0, r3
 8000380:	f000 f98a 	bl	8000698 <GPIO_Init>

}
 8000384:	bf00      	nop
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40020400 	.word	0x40020400
 8000390:	40020c00 	.word	0x40020c00

08000394 <main>:

int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af02      	add	r7, sp, #8

	uint8_t len;

	//initialise_monitor_handles();

	printf("Application is running\n");
 800039a:	4830      	ldr	r0, [pc, #192]	; (800045c <main+0xc8>)
 800039c:	f000 fe8e 	bl	80010bc <puts>

	GPIO_ButtonInit();
 80003a0:	f7ff ffca 	bl	8000338 <GPIO_ButtonInit>
	//i2c pin inits
	I2C1_GPIOInits();
 80003a4:	f7ff ff8a 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80003a8:	f7ff ffaa 	bl	8000300 <I2C1_Inits>

	//I2C IRQ confiugration
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 80003ac:	2101      	movs	r1, #1
 80003ae:	201f      	movs	r0, #31
 80003b0:	f000 fd4e 	bl	8000e50 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 80003b4:	2101      	movs	r1, #1
 80003b6:	2020      	movs	r0, #32
 80003b8:	f000 fd4a 	bl	8000e50 <I2C_IRQInterruptConfig>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80003bc:	2101      	movs	r1, #1
 80003be:	4828      	ldr	r0, [pc, #160]	; (8000460 <main+0xcc>)
 80003c0:	f000 fb30 	bl	8000a24 <I2C_PeripheralControl>

	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80003c4:	2101      	movs	r1, #1
 80003c6:	4826      	ldr	r0, [pc, #152]	; (8000460 <main+0xcc>)
 80003c8:	f000 fd27 	bl	8000e1a <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003cc:	bf00      	nop
 80003ce:	2100      	movs	r1, #0
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <main+0xd0>)
 80003d2:	f000 fb03 	bl	80009dc <GPIO_ReadFromInputPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0f8      	beq.n	80003ce <main+0x3a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003dc:	f7ff ff58 	bl	8000290 <delay>

		commandcode = 0x51;
 80003e0:	2351      	movs	r3, #81	; 0x51
 80003e2:	71fb      	strb	r3, [r7, #7]

		while(I2C_MasterSendDataIT(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 80003e4:	bf00      	nop
 80003e6:	1df9      	adds	r1, r7, #7
 80003e8:	2301      	movs	r3, #1
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	2368      	movs	r3, #104	; 0x68
 80003ee:	2201      	movs	r2, #1
 80003f0:	481d      	ldr	r0, [pc, #116]	; (8000468 <main+0xd4>)
 80003f2:	f000 fc7b 	bl	8000cec <I2C_MasterSendDataIT>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d1f4      	bne.n	80003e6 <main+0x52>

		while(I2C_MasterReceiveDataIT(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR)!= I2C_READY);
 80003fc:	bf00      	nop
 80003fe:	1db9      	adds	r1, r7, #6
 8000400:	2301      	movs	r3, #1
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	2368      	movs	r3, #104	; 0x68
 8000406:	2201      	movs	r2, #1
 8000408:	4817      	ldr	r0, [pc, #92]	; (8000468 <main+0xd4>)
 800040a:	f000 fcb9 	bl	8000d80 <I2C_MasterReceiveDataIT>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f4      	bne.n	80003fe <main+0x6a>

		commandcode = 0x52;
 8000414:	2352      	movs	r3, #82	; 0x52
 8000416:	71fb      	strb	r3, [r7, #7]
		while(I2C_MasterSendDataIT(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 8000418:	bf00      	nop
 800041a:	1df9      	adds	r1, r7, #7
 800041c:	2301      	movs	r3, #1
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2368      	movs	r3, #104	; 0x68
 8000422:	2201      	movs	r2, #1
 8000424:	4810      	ldr	r0, [pc, #64]	; (8000468 <main+0xd4>)
 8000426:	f000 fc61 	bl	8000cec <I2C_MasterSendDataIT>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1f4      	bne.n	800041a <main+0x86>

		while(I2C_MasterReceiveDataIT(&I2C1Handle,rcv_buff,len,SLAVE_ADDR,I2C_DISABLE_SR)!= I2C_READY);
 8000430:	bf00      	nop
 8000432:	79ba      	ldrb	r2, [r7, #6]
 8000434:	2300      	movs	r3, #0
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2368      	movs	r3, #104	; 0x68
 800043a:	490c      	ldr	r1, [pc, #48]	; (800046c <main+0xd8>)
 800043c:	480a      	ldr	r0, [pc, #40]	; (8000468 <main+0xd4>)
 800043e:	f000 fc9f 	bl	8000d80 <I2C_MasterReceiveDataIT>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1f4      	bne.n	8000432 <main+0x9e>
		rcv_buff[len+1]='\0';
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	3301      	adds	r3, #1
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <main+0xd8>)
 800044e:	2100      	movs	r1, #0
 8000450:	54d1      	strb	r1, [r2, r3]

		printf("Data: %s",rcv_buff);
 8000452:	4906      	ldr	r1, [pc, #24]	; (800046c <main+0xd8>)
 8000454:	4806      	ldr	r0, [pc, #24]	; (8000470 <main+0xdc>)
 8000456:	f000 fdab 	bl	8000fb0 <iprintf>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800045a:	e7b7      	b.n	80003cc <main+0x38>
 800045c:	0800203c 	.word	0x0800203c
 8000460:	40005400 	.word	0x40005400
 8000464:	40020000 	.word	0x40020000
 8000468:	20000194 	.word	0x20000194
 800046c:	20000094 	.word	0x20000094
 8000470:	08002054 	.word	0x08002054

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000478:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	; (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 fd59 	bl	8000f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff ff75 	bl	8000394 <main>

080004aa <LoopForever>:

LoopForever:
    b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
  ldr   r0, =_estack
 80004ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80004b8:	08002124 	.word	0x08002124
  ldr r2, =_sbss
 80004bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80004c0:	200001d8 	.word	0x200001d8

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <GPIO_PeriClockControl>:
 * @Note			-  None
 *
 *
 *************************************** */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d162      	bne.n	80005a0 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a64      	ldr	r2, [pc, #400]	; (8000670 <GPIO_PeriClockControl+0x1a8>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80004e2:	4b64      	ldr	r3, [pc, #400]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a63      	ldr	r2, [pc, #396]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 80004ee:	e0b9      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a61      	ldr	r2, [pc, #388]	; (8000678 <GPIO_PeriClockControl+0x1b0>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d106      	bne.n	8000506 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004f8:	4b5e      	ldr	r3, [pc, #376]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	4a5d      	ldr	r2, [pc, #372]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000504:	e0ae      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a5c      	ldr	r2, [pc, #368]	; (800067c <GPIO_PeriClockControl+0x1b4>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d106      	bne.n	800051c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800050e:	4b59      	ldr	r3, [pc, #356]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a58      	ldr	r2, [pc, #352]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051a:	e0a3      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a58      	ldr	r2, [pc, #352]	; (8000680 <GPIO_PeriClockControl+0x1b8>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d106      	bne.n	8000532 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000524:	4b53      	ldr	r3, [pc, #332]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	4a52      	ldr	r2, [pc, #328]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000530:	e098      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a53      	ldr	r2, [pc, #332]	; (8000684 <GPIO_PeriClockControl+0x1bc>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d106      	bne.n	8000548 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800053a:	4b4e      	ldr	r3, [pc, #312]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a4d      	ldr	r2, [pc, #308]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000540:	f043 0310 	orr.w	r3, r3, #16
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000546:	e08d      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a4f      	ldr	r2, [pc, #316]	; (8000688 <GPIO_PeriClockControl+0x1c0>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d106      	bne.n	800055e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000550:	4b48      	ldr	r3, [pc, #288]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	4a47      	ldr	r2, [pc, #284]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055c:	e082      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a4a      	ldr	r2, [pc, #296]	; (800068c <GPIO_PeriClockControl+0x1c4>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d106      	bne.n	8000574 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a42      	ldr	r2, [pc, #264]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 800056c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000572:	e077      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a46      	ldr	r2, [pc, #280]	; (8000690 <GPIO_PeriClockControl+0x1c8>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d106      	bne.n	800058a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800057c:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a3c      	ldr	r2, [pc, #240]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000586:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000588:	e06c      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a41      	ldr	r2, [pc, #260]	; (8000694 <GPIO_PeriClockControl+0x1cc>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d168      	bne.n	8000664 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a37      	ldr	r2, [pc, #220]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059e:	e061      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a33      	ldr	r2, [pc, #204]	; (8000670 <GPIO_PeriClockControl+0x1a8>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d106      	bne.n	80005b6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a31      	ldr	r2, [pc, #196]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80005ae:	f023 0301 	bic.w	r3, r3, #1
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b4:	e056      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <GPIO_PeriClockControl+0x1b0>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d106      	bne.n	80005cc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a2c      	ldr	r2, [pc, #176]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80005c4:	f023 0302 	bic.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ca:	e04b      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a2b      	ldr	r2, [pc, #172]	; (800067c <GPIO_PeriClockControl+0x1b4>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d106      	bne.n	80005e2 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a26      	ldr	r2, [pc, #152]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80005da:	f023 0304 	bic.w	r3, r3, #4
 80005de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e0:	e040      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <GPIO_PeriClockControl+0x1b8>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d106      	bne.n	80005f8 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a21      	ldr	r2, [pc, #132]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 80005f0:	f023 0308 	bic.w	r3, r3, #8
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f6:	e035      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a22      	ldr	r2, [pc, #136]	; (8000684 <GPIO_PeriClockControl+0x1bc>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d106      	bne.n	800060e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000606:	f023 0310 	bic.w	r3, r3, #16
 800060a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060c:	e02a      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <GPIO_PeriClockControl+0x1c0>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d106      	bne.n	8000624 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 800061c:	f023 0320 	bic.w	r3, r3, #32
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000622:	e01f      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a19      	ldr	r2, [pc, #100]	; (800068c <GPIO_PeriClockControl+0x1c4>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d106      	bne.n	800063a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a10      	ldr	r2, [pc, #64]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000638:	e014      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <GPIO_PeriClockControl+0x1c8>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d106      	bne.n	8000650 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 8000648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800064e:	e009      	b.n	8000664 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <GPIO_PeriClockControl+0x1cc>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d105      	bne.n	8000664 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a05      	ldr	r2, [pc, #20]	; (8000674 <GPIO_PeriClockControl+0x1ac>)
 800065e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40020000 	.word	0x40020000
 8000674:	40023800 	.word	0x40023800
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40021000 	.word	0x40021000
 8000688:	40021400 	.word	0x40021400
 800068c:	40021800 	.word	0x40021800
 8000690:	40021c00 	.word	0x40021c00
 8000694:	40022000 	.word	0x40022000

08000698 <GPIO_Init>:

/*
 * 	Init and Deint of the peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2101      	movs	r1, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff0c 	bl	80004c8 <GPIO_PeriClockControl>

	// Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	d81f      	bhi.n	80006f8 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	795b      	ldrb	r3, [r3, #5]
 80006bc:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006c8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // cleraing off the pin number before using it
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2303      	movs	r3, #3
 80006d8:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 80006da:	43db      	mvns	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	400a      	ands	r2, r1
 80006e4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e0ca      	b.n	800088e <GPIO_Init+0x1f6>

	}
	else
	{
		// this is the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d117      	bne.n	8000730 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000700:	4b4a      	ldr	r3, [pc, #296]	; (800082c <GPIO_Init+0x194>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7912      	ldrb	r2, [r2, #4]
 8000708:	4611      	mov	r1, r2
 800070a:	2201      	movs	r2, #1
 800070c:	408a      	lsls	r2, r1
 800070e:	4611      	mov	r1, r2
 8000710:	4a46      	ldr	r2, [pc, #280]	; (800082c <GPIO_Init+0x194>)
 8000712:	430b      	orrs	r3, r1
 8000714:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000716:	4b45      	ldr	r3, [pc, #276]	; (800082c <GPIO_Init+0x194>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	7912      	ldrb	r2, [r2, #4]
 800071e:	4611      	mov	r1, r2
 8000720:	2201      	movs	r2, #1
 8000722:	408a      	lsls	r2, r1
 8000724:	43d2      	mvns	r2, r2
 8000726:	4611      	mov	r1, r2
 8000728:	4a40      	ldr	r2, [pc, #256]	; (800082c <GPIO_Init+0x194>)
 800072a:	400b      	ands	r3, r1
 800072c:	6093      	str	r3, [r2, #8]
 800072e:	e035      	b.n	800079c <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	2b05      	cmp	r3, #5
 8000736:	d117      	bne.n	8000768 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <GPIO_Init+0x194>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	7912      	ldrb	r2, [r2, #4]
 8000740:	4611      	mov	r1, r2
 8000742:	2201      	movs	r2, #1
 8000744:	408a      	lsls	r2, r1
 8000746:	4611      	mov	r1, r2
 8000748:	4a38      	ldr	r2, [pc, #224]	; (800082c <GPIO_Init+0x194>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <GPIO_Init+0x194>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7912      	ldrb	r2, [r2, #4]
 8000756:	4611      	mov	r1, r2
 8000758:	2201      	movs	r2, #1
 800075a:	408a      	lsls	r2, r1
 800075c:	43d2      	mvns	r2, r2
 800075e:	4611      	mov	r1, r2
 8000760:	4a32      	ldr	r2, [pc, #200]	; (800082c <GPIO_Init+0x194>)
 8000762:	400b      	ands	r3, r1
 8000764:	60d3      	str	r3, [r2, #12]
 8000766:	e019      	b.n	800079c <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	2b06      	cmp	r3, #6
 800076e:	d115      	bne.n	800079c <GPIO_Init+0x104>
		{
			//1. Configure bothh RTSR and FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000770:	4b2e      	ldr	r3, [pc, #184]	; (800082c <GPIO_Init+0x194>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	7912      	ldrb	r2, [r2, #4]
 8000778:	4611      	mov	r1, r2
 800077a:	2201      	movs	r2, #1
 800077c:	408a      	lsls	r2, r1
 800077e:	4611      	mov	r1, r2
 8000780:	4a2a      	ldr	r2, [pc, #168]	; (800082c <GPIO_Init+0x194>)
 8000782:	430b      	orrs	r3, r1
 8000784:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <GPIO_Init+0x194>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	7912      	ldrb	r2, [r2, #4]
 800078e:	4611      	mov	r1, r2
 8000790:	2201      	movs	r2, #1
 8000792:	408a      	lsls	r2, r1
 8000794:	4611      	mov	r1, r2
 8000796:	4a25      	ldr	r2, [pc, #148]	; (800082c <GPIO_Init+0x194>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6093      	str	r3, [r2, #8]

		}
		//2. COnfigure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	089b      	lsrs	r3, r3, #2
 80007a2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	f003 0303 	and.w	r3, r3, #3
 80007ac:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIOA_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <GPIO_Init+0x198>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d04d      	beq.n	8000854 <GPIO_Init+0x1bc>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <GPIO_Init+0x19c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d032      	beq.n	8000828 <GPIO_Init+0x190>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <GPIO_Init+0x1a0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d02b      	beq.n	8000824 <GPIO_Init+0x18c>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	; (800083c <GPIO_Init+0x1a4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d024      	beq.n	8000820 <GPIO_Init+0x188>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <GPIO_Init+0x1a8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d01d      	beq.n	800081c <GPIO_Init+0x184>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <GPIO_Init+0x1ac>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d016      	beq.n	8000818 <GPIO_Init+0x180>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <GPIO_Init+0x1b0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d00f      	beq.n	8000814 <GPIO_Init+0x17c>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <GPIO_Init+0x1b4>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d008      	beq.n	8000810 <GPIO_Init+0x178>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <GPIO_Init+0x1b8>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d101      	bne.n	800080c <GPIO_Init+0x174>
 8000808:	2308      	movs	r3, #8
 800080a:	e024      	b.n	8000856 <GPIO_Init+0x1be>
 800080c:	2300      	movs	r3, #0
 800080e:	e022      	b.n	8000856 <GPIO_Init+0x1be>
 8000810:	2307      	movs	r3, #7
 8000812:	e020      	b.n	8000856 <GPIO_Init+0x1be>
 8000814:	2306      	movs	r3, #6
 8000816:	e01e      	b.n	8000856 <GPIO_Init+0x1be>
 8000818:	2305      	movs	r3, #5
 800081a:	e01c      	b.n	8000856 <GPIO_Init+0x1be>
 800081c:	2304      	movs	r3, #4
 800081e:	e01a      	b.n	8000856 <GPIO_Init+0x1be>
 8000820:	2303      	movs	r3, #3
 8000822:	e018      	b.n	8000856 <GPIO_Init+0x1be>
 8000824:	2302      	movs	r3, #2
 8000826:	e016      	b.n	8000856 <GPIO_Init+0x1be>
 8000828:	2301      	movs	r3, #1
 800082a:	e014      	b.n	8000856 <GPIO_Init+0x1be>
 800082c:	40013c00 	.word	0x40013c00
 8000830:	40020000 	.word	0x40020000
 8000834:	40020400 	.word	0x40020400
 8000838:	40020800 	.word	0x40020800
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40021000 	.word	0x40021000
 8000844:	40021400 	.word	0x40021400
 8000848:	40021800 	.word	0x40021800
 800084c:	40021c00 	.word	0x40021c00
 8000850:	40022000 	.word	0x40022000
 8000854:	2300      	movs	r3, #0
 8000856:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000858:	4b5d      	ldr	r3, [pc, #372]	; (80009d0 <GPIO_Init+0x338>)
 800085a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085c:	4a5c      	ldr	r2, [pc, #368]	; (80009d0 <GPIO_Init+0x338>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 8000864:	7c7a      	ldrb	r2, [r7, #17]
 8000866:	7cbb      	ldrb	r3, [r7, #18]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	fa02 f103 	lsl.w	r1, r2, r3
 800086e:	4a59      	ldr	r2, [pc, #356]	; (80009d4 <GPIO_Init+0x33c>)
 8000870:	7cfb      	ldrb	r3, [r7, #19]
 8000872:	3302      	adds	r3, #2
 8000874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. ENable the Exti intrrupt delivery using IMR
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000878:	4b57      	ldr	r3, [pc, #348]	; (80009d8 <GPIO_Init+0x340>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	7912      	ldrb	r2, [r2, #4]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	4611      	mov	r1, r2
 8000888:	4a53      	ldr	r2, [pc, #332]	; (80009d8 <GPIO_Init+0x340>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	799b      	ldrb	r3, [r3, #6]
 8000896:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80008a2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	4619      	mov	r1, r3
 80008b0:	2303      	movs	r3, #3
 80008b2:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 80008b4:	43db      	mvns	r3, r3
 80008b6:	4619      	mov	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	400a      	ands	r2, r1
 80008be:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6899      	ldr	r1, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	430a      	orrs	r2, r1
 80008ce:	609a      	str	r2, [r3, #8]

	temp = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

	// Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	79db      	ldrb	r3, [r3, #7]
 80008d8:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	791b      	ldrb	r3, [r3, #4]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80008e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	4619      	mov	r1, r3
 80008f2:	2303      	movs	r3, #3
 80008f4:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 80008f6:	43db      	mvns	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	400a      	ands	r2, r1
 8000900:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68d9      	ldr	r1, [r3, #12]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	430a      	orrs	r2, r1
 8000910:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

	//configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7a1b      	ldrb	r3, [r3, #8]
 800091a:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000926:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	4619      	mov	r1, r3
 8000934:	2301      	movs	r3, #1
 8000936:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000938:	43db      	mvns	r3, r3
 800093a:	4619      	mov	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	400a      	ands	r2, r1
 8000942:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6859      	ldr	r1, [r3, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	430a      	orrs	r2, r1
 8000952:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	795b      	ldrb	r3, [r3, #5]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d132      	bne.n	80009c6 <GPIO_Init+0x32e>
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	791b      	ldrb	r3, [r3, #4]
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	3208      	adds	r2, #8
 800097c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	210f      	movs	r1, #15
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	4619      	mov	r1, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4011      	ands	r1, r2
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	3208      	adds	r2, #8
 8000998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	3208      	adds	r2, #8
 80009a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7a5b      	ldrb	r3, [r3, #9]
 80009ac:	4619      	mov	r1, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4311      	orrs	r1, r2
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	3208      	adds	r2, #8
 80009c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40013800 	.word	0x40013800
 80009d8:	40013c00 	.word	0x40013c00

080009dc <GPIO_ReadFromInputPin>:
 * Data read and write
 *
 * return value will be either 0 or 1
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x0000001);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	691a      	ldr	r2, [r3, #16]
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	fa22 f303 	lsr.w	r3, r2, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
	return value;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <I2C_PeripheralControl>:
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d106      	bne.n	8000a44 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f043 0201 	orr.w	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000a42:	e005      	b.n	8000a50 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 0201 	bic.w	r2, r3, #1
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
	...

08000a5c <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d11f      	bne.n	8000aae <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <I2C_PeriClockControl+0x5c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d106      	bne.n	8000a84 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <I2C_PeriClockControl+0x60>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a10      	ldr	r2, [pc, #64]	; (8000abc <I2C_PeriClockControl+0x60>)
 8000a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 8000a82:	e014      	b.n	8000aae <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <I2C_PeriClockControl+0x64>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d106      	bne.n	8000a9a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <I2C_PeriClockControl+0x60>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <I2C_PeriClockControl+0x60>)
 8000a92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a98:	e009      	b.n	8000aae <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <I2C_PeriClockControl+0x68>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d105      	bne.n	8000aae <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <I2C_PeriClockControl+0x60>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <I2C_PeriClockControl+0x60>)
 8000aa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40005800 	.word	0x40005800
 8000ac4:	40005c00 	.word	0x40005c00

08000ac8 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

	return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc, temp,ahbp, apb1p;

	clksrc= ((RCC->CFGR>>2)&0x3);			//bring those 2 bits to the lsb position and mask
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <RCC_GetPCLK1Value+0x9c>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	727b      	strb	r3, [r7, #9]
	if(clksrc==0)
 8000aec:	7a7b      	ldrb	r3, [r7, #9]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk= 16000000;
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <RCC_GetPCLK1Value+0xa0>)
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e00b      	b.n	8000b10 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==1)
 8000af8:	7a7b      	ldrb	r3, [r7, #9]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d102      	bne.n	8000b04 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk= 8000000;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <RCC_GetPCLK1Value+0xa4>)
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e005      	b.n	8000b10 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==2)
 8000b04:	7a7b      	ldrb	r3, [r7, #9]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d102      	bne.n	8000b10 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk= RCC_GetPLLOutputClock();
 8000b0a:	f7ff ffdd 	bl	8000ac8 <RCC_GetPLLOutputClock>
 8000b0e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb1
	temp=((RCC->CFGR>>4)&0xF);
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <RCC_GetPCLK1Value+0x9c>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	091b      	lsrs	r3, r3, #4
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f003 030f 	and.w	r3, r3, #15
 8000b1c:	723b      	strb	r3, [r7, #8]

	if(temp<8)
 8000b1e:	7a3b      	ldrb	r3, [r7, #8]
 8000b20:	2b07      	cmp	r3, #7
 8000b22:	d802      	bhi.n	8000b2a <RCC_GetPCLK1Value+0x52>
	{
		ahbp=1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	72fb      	strb	r3, [r7, #11]
 8000b28:	e005      	b.n	8000b36 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		 ahbp=AHB_PreScalar[temp-8];
 8000b2a:	7a3b      	ldrb	r3, [r7, #8]
 8000b2c:	3b08      	subs	r3, #8
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <RCC_GetPCLK1Value+0xa8>)
 8000b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b34:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1
	temp=((RCC->CFGR>>10)&0x7);
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <RCC_GetPCLK1Value+0x9c>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	0a9b      	lsrs	r3, r3, #10
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	723b      	strb	r3, [r7, #8]

	if(temp<4)
 8000b44:	7a3b      	ldrb	r3, [r7, #8]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d802      	bhi.n	8000b50 <RCC_GetPCLK1Value+0x78>
	{
		apb1p=1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	72bb      	strb	r3, [r7, #10]
 8000b4e:	e004      	b.n	8000b5a <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		 apb1p=APB1_PreScalar[temp-4];
 8000b50:	7a3b      	ldrb	r3, [r7, #8]
 8000b52:	3b04      	subs	r3, #4
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <RCC_GetPCLK1Value+0xac>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	72bb      	strb	r3, [r7, #10]
	}

	pclk1=(SystemClk/ahbp)/apb1p;
 8000b5a:	7afb      	ldrb	r3, [r7, #11]
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b62:	7abb      	ldrb	r3, [r7, #10]
 8000b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b68:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000b6a:	687b      	ldr	r3, [r7, #4]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	00f42400 	.word	0x00f42400
 8000b7c:	007a1200 	.word	0x007a1200
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000010 	.word	0x20000010

08000b88 <I2C_Init>:
/*
 * 		@ I2C initialisation driver
 */

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]

	//enable the clock for
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff5e 	bl	8000a5c <I2C_PeriClockControl>

	//configure the ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl<<10;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	029b      	lsls	r3, r3, #10
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR"
	tempreg = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 8000bb8:	f7ff ff8e 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a48      	ldr	r2, [pc, #288]	; (8000ce0 <I2C_Init+0x158>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	0c9b      	lsrs	r3, r3, #18
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bd6:	605a      	str	r2, [r3, #4]

	//configure the FREQ field for OAR
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress<<1;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);				//becasue datasheet says that
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bea:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	609a      	str	r2, [r3, #8]

	//CCR Calculations
	uint16_t ccr_value = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed<= I2C_SCL_SPEED_SM)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <I2C_Init+0x15c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d80f      	bhi.n	8000c26 <I2C_Init+0x9e>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value()/(2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c06:	f7ff ff67 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000c18:	897b      	ldrh	r3, [r7, #10]
 8000c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e030      	b.n	8000c88 <I2C_Init+0x100>
	}
	else
	{
		//fast mode
		tempreg |= (1<<15);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2c:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<pI2CHandle->I2C_Config.I2C_FMDutyCycle<<14);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	2201      	movs	r2, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	039b      	lsls	r3, r3, #14
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10b      	bne.n	8000c62 <I2C_Init+0xda>
		{
			ccr_value = (RCC_GetPCLK1Value()/(3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c4a:	f7ff ff45 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000c4e:	4601      	mov	r1, r0
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c5e:	817b      	strh	r3, [r7, #10]
 8000c60:	e00c      	b.n	8000c7c <I2C_Init+0xf4>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value()/(25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c62:	f7ff ff39 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000c66:	4601      	mov	r1, r0
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	009a      	lsls	r2, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c7a:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c7c:	897b      	ldrh	r3, [r7, #10]
 8000c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed<= I2C_SCL_SPEED_SM)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <I2C_Init+0x15c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d809      	bhi.n	8000cae <I2C_Init+0x126>
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U)+1;
 8000c9a:	f7ff ff1d 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <I2C_Init+0x158>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9b      	lsrs	r3, r3, #18
 8000ca8:	3301      	adds	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	e00d      	b.n	8000cca <I2C_Init+0x142>
	}
	else
	{
		//mod eis fast mode
		tempreg = ((RCC_GetPCLK1Value()*300)/1000000000U)+1;
 8000cae:	f7ff ff13 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cb8:	fb02 f303 	mul.w	r3, r2, r3
 8000cbc:	0a5b      	lsrs	r3, r3, #9
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <I2C_Init+0x160>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	09db      	lsrs	r3, r3, #7
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cd4:	621a      	str	r2, [r3, #32]
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	000186a0 	.word	0x000186a0
 8000ce8:	00044b83 	.word	0x00044b83

08000cec <I2C_MasterSendDataIT>:
 *
 * @Note              -  Complete the below code . Also include the function prototype in header file

 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71bb      	strb	r3, [r7, #6]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d08:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d032      	beq.n	8000d76 <I2C_MasterSendDataIT+0x8a>
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d02f      	beq.n	8000d76 <I2C_MasterSendDataIT+0x8a>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxLen = Len;
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	61da      	str	r2, [r3, #28]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2202      	movs	r2, #2
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		pI2CHandle->DevAddr = SlaveAddr;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	79ba      	ldrb	r2, [r7, #6]
 8000d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		pI2CHandle->Sr = Sr;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fe60 	bl	8000a06 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d54:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVTEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d64:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d74:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8000d76:	7dfb      	ldrb	r3, [r7, #23]

}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <I2C_MasterReceiveDataIT>:



uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t  *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	460b      	mov	r3, r1
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	4613      	mov	r3, r2
 8000d94:	71bb      	strb	r3, [r7, #6]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d9c:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d035      	beq.n	8000e10 <I2C_MasterReceiveDataIT+0x90>
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d032      	beq.n	8000e10 <I2C_MasterReceiveDataIT+0x90>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	619a      	str	r2, [r3, #24]
		pI2CHandle->RxLen = Len;
 8000db0:	79fa      	ldrb	r2, [r7, #7]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	621a      	str	r2, [r3, #32]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
		pI2CHandle->DevAddr = SlaveAddr;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	79ba      	ldrb	r2, [r7, #6]
 8000dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		pI2CHandle->Sr = Sr;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fe13 	bl	8000a06 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1<< I2C_CR2_ITBUFEN);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dee:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dfe:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e0e:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <I2C_ManageAcking>:



void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== I2C_ACK_ENABLE)
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d106      	bne.n	8000e3a <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	601a      	str	r2, [r3, #0]
	else
	{
		//disable the ack
		pI2Cx->CR1 &=~(1<<I2C_CR1_ACK);
	}
}
 8000e38:	e005      	b.n	8000e46 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &=~(1<<I2C_CR1_ACK);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <I2C_IRQInterruptConfig>:

void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d133      	bne.n	8000ece <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b1f      	cmp	r3, #31
 8000e6a:	d80a      	bhi.n	8000e82 <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000e6c:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <I2C_IRQInterruptConfig+0xf0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	79fa      	ldrb	r2, [r7, #7]
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <I2C_IRQInterruptConfig+0xf0>)
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000e80:	e059      	b.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b1f      	cmp	r3, #31
 8000e86:	d90f      	bls.n	8000ea8 <I2C_IRQInterruptConfig+0x58>
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e8c:	d80c      	bhi.n	8000ea8 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <I2C_IRQInterruptConfig+0xf4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	79fa      	ldrb	r2, [r7, #7]
 8000e94:	f002 021f 	and.w	r2, r2, #31
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4a28      	ldr	r2, [pc, #160]	; (8000f44 <I2C_IRQInterruptConfig+0xf4>)
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e046      	b.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8000eac:	d943      	bls.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b5f      	cmp	r3, #95	; 0x5f
 8000eb2:	d840      	bhi.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <I2C_IRQInterruptConfig+0xf8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	79fa      	ldrb	r2, [r7, #7]
 8000eba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <I2C_IRQInterruptConfig+0xf8>)
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	e033      	b.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b1f      	cmp	r3, #31
 8000ed2:	d80a      	bhi.n	8000eea <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <I2C_IRQInterruptConfig+0xfc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <I2C_IRQInterruptConfig+0xfc>)
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	e025      	b.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b1f      	cmp	r3, #31
 8000eee:	d90f      	bls.n	8000f10 <I2C_IRQInterruptConfig+0xc0>
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef4:	d80c      	bhi.n	8000f10 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <I2C_IRQInterruptConfig+0x100>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	f002 021f 	and.w	r2, r2, #31
 8000f00:	2101      	movs	r1, #1
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	4611      	mov	r1, r2
 8000f08:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <I2C_IRQInterruptConfig+0x100>)
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e012      	b.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d90f      	bls.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b5f      	cmp	r3, #95	; 0x5f
 8000f1a:	d80c      	bhi.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <I2C_IRQInterruptConfig+0x104>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	79fa      	ldrb	r2, [r7, #7]
 8000f22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <I2C_IRQInterruptConfig+0x104>)
 8000f30:	430b      	orrs	r3, r1
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	e7ff      	b.n	8000f36 <I2C_IRQInterruptConfig+0xe6>
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000e104 	.word	0xe000e104
 8000f48:	e000e10c 	.word	0xe000e10c
 8000f4c:	e000e180 	.word	0xe000e180
 8000f50:	e000e184 	.word	0xe000e184
 8000f54:	e000e18c 	.word	0xe000e18c

08000f58 <__libc_init_array>:
 8000f58:	b570      	push	{r4, r5, r6, lr}
 8000f5a:	4d0d      	ldr	r5, [pc, #52]	; (8000f90 <__libc_init_array+0x38>)
 8000f5c:	4c0d      	ldr	r4, [pc, #52]	; (8000f94 <__libc_init_array+0x3c>)
 8000f5e:	1b64      	subs	r4, r4, r5
 8000f60:	10a4      	asrs	r4, r4, #2
 8000f62:	2600      	movs	r6, #0
 8000f64:	42a6      	cmp	r6, r4
 8000f66:	d109      	bne.n	8000f7c <__libc_init_array+0x24>
 8000f68:	4d0b      	ldr	r5, [pc, #44]	; (8000f98 <__libc_init_array+0x40>)
 8000f6a:	4c0c      	ldr	r4, [pc, #48]	; (8000f9c <__libc_init_array+0x44>)
 8000f6c:	f001 f85a 	bl	8002024 <_init>
 8000f70:	1b64      	subs	r4, r4, r5
 8000f72:	10a4      	asrs	r4, r4, #2
 8000f74:	2600      	movs	r6, #0
 8000f76:	42a6      	cmp	r6, r4
 8000f78:	d105      	bne.n	8000f86 <__libc_init_array+0x2e>
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
 8000f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f80:	4798      	blx	r3
 8000f82:	3601      	adds	r6, #1
 8000f84:	e7ee      	b.n	8000f64 <__libc_init_array+0xc>
 8000f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f8a:	4798      	blx	r3
 8000f8c:	3601      	adds	r6, #1
 8000f8e:	e7f2      	b.n	8000f76 <__libc_init_array+0x1e>
 8000f90:	0800211c 	.word	0x0800211c
 8000f94:	0800211c 	.word	0x0800211c
 8000f98:	0800211c 	.word	0x0800211c
 8000f9c:	08002120 	.word	0x08002120

08000fa0 <memset>:
 8000fa0:	4402      	add	r2, r0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d100      	bne.n	8000faa <memset+0xa>
 8000fa8:	4770      	bx	lr
 8000faa:	f803 1b01 	strb.w	r1, [r3], #1
 8000fae:	e7f9      	b.n	8000fa4 <memset+0x4>

08000fb0 <iprintf>:
 8000fb0:	b40f      	push	{r0, r1, r2, r3}
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <iprintf+0x2c>)
 8000fb4:	b513      	push	{r0, r1, r4, lr}
 8000fb6:	681c      	ldr	r4, [r3, #0]
 8000fb8:	b124      	cbz	r4, 8000fc4 <iprintf+0x14>
 8000fba:	69a3      	ldr	r3, [r4, #24]
 8000fbc:	b913      	cbnz	r3, 8000fc4 <iprintf+0x14>
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f000 fa5a 	bl	8001478 <__sinit>
 8000fc4:	ab05      	add	r3, sp, #20
 8000fc6:	9a04      	ldr	r2, [sp, #16]
 8000fc8:	68a1      	ldr	r1, [r4, #8]
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f000 fc5f 	bl	8001890 <_vfiprintf_r>
 8000fd2:	b002      	add	sp, #8
 8000fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fd8:	b004      	add	sp, #16
 8000fda:	4770      	bx	lr
 8000fdc:	20000014 	.word	0x20000014

08000fe0 <_puts_r>:
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	460e      	mov	r6, r1
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	b118      	cbz	r0, 8000ff0 <_puts_r+0x10>
 8000fe8:	6983      	ldr	r3, [r0, #24]
 8000fea:	b90b      	cbnz	r3, 8000ff0 <_puts_r+0x10>
 8000fec:	f000 fa44 	bl	8001478 <__sinit>
 8000ff0:	69ab      	ldr	r3, [r5, #24]
 8000ff2:	68ac      	ldr	r4, [r5, #8]
 8000ff4:	b913      	cbnz	r3, 8000ffc <_puts_r+0x1c>
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	f000 fa3e 	bl	8001478 <__sinit>
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <_puts_r+0xd0>)
 8000ffe:	429c      	cmp	r4, r3
 8001000:	d120      	bne.n	8001044 <_puts_r+0x64>
 8001002:	686c      	ldr	r4, [r5, #4]
 8001004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001006:	07db      	lsls	r3, r3, #31
 8001008:	d405      	bmi.n	8001016 <_puts_r+0x36>
 800100a:	89a3      	ldrh	r3, [r4, #12]
 800100c:	0598      	lsls	r0, r3, #22
 800100e:	d402      	bmi.n	8001016 <_puts_r+0x36>
 8001010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001012:	f000 facf 	bl	80015b4 <__retarget_lock_acquire_recursive>
 8001016:	89a3      	ldrh	r3, [r4, #12]
 8001018:	0719      	lsls	r1, r3, #28
 800101a:	d51d      	bpl.n	8001058 <_puts_r+0x78>
 800101c:	6923      	ldr	r3, [r4, #16]
 800101e:	b1db      	cbz	r3, 8001058 <_puts_r+0x78>
 8001020:	3e01      	subs	r6, #1
 8001022:	68a3      	ldr	r3, [r4, #8]
 8001024:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001028:	3b01      	subs	r3, #1
 800102a:	60a3      	str	r3, [r4, #8]
 800102c:	bb39      	cbnz	r1, 800107e <_puts_r+0x9e>
 800102e:	2b00      	cmp	r3, #0
 8001030:	da38      	bge.n	80010a4 <_puts_r+0xc4>
 8001032:	4622      	mov	r2, r4
 8001034:	210a      	movs	r1, #10
 8001036:	4628      	mov	r0, r5
 8001038:	f000 f848 	bl	80010cc <__swbuf_r>
 800103c:	3001      	adds	r0, #1
 800103e:	d011      	beq.n	8001064 <_puts_r+0x84>
 8001040:	250a      	movs	r5, #10
 8001042:	e011      	b.n	8001068 <_puts_r+0x88>
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <_puts_r+0xd4>)
 8001046:	429c      	cmp	r4, r3
 8001048:	d101      	bne.n	800104e <_puts_r+0x6e>
 800104a:	68ac      	ldr	r4, [r5, #8]
 800104c:	e7da      	b.n	8001004 <_puts_r+0x24>
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <_puts_r+0xd8>)
 8001050:	429c      	cmp	r4, r3
 8001052:	bf08      	it	eq
 8001054:	68ec      	ldreq	r4, [r5, #12]
 8001056:	e7d5      	b.n	8001004 <_puts_r+0x24>
 8001058:	4621      	mov	r1, r4
 800105a:	4628      	mov	r0, r5
 800105c:	f000 f888 	bl	8001170 <__swsetup_r>
 8001060:	2800      	cmp	r0, #0
 8001062:	d0dd      	beq.n	8001020 <_puts_r+0x40>
 8001064:	f04f 35ff 	mov.w	r5, #4294967295
 8001068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800106a:	07da      	lsls	r2, r3, #31
 800106c:	d405      	bmi.n	800107a <_puts_r+0x9a>
 800106e:	89a3      	ldrh	r3, [r4, #12]
 8001070:	059b      	lsls	r3, r3, #22
 8001072:	d402      	bmi.n	800107a <_puts_r+0x9a>
 8001074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001076:	f000 fa9e 	bl	80015b6 <__retarget_lock_release_recursive>
 800107a:	4628      	mov	r0, r5
 800107c:	bd70      	pop	{r4, r5, r6, pc}
 800107e:	2b00      	cmp	r3, #0
 8001080:	da04      	bge.n	800108c <_puts_r+0xac>
 8001082:	69a2      	ldr	r2, [r4, #24]
 8001084:	429a      	cmp	r2, r3
 8001086:	dc06      	bgt.n	8001096 <_puts_r+0xb6>
 8001088:	290a      	cmp	r1, #10
 800108a:	d004      	beq.n	8001096 <_puts_r+0xb6>
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	6022      	str	r2, [r4, #0]
 8001092:	7019      	strb	r1, [r3, #0]
 8001094:	e7c5      	b.n	8001022 <_puts_r+0x42>
 8001096:	4622      	mov	r2, r4
 8001098:	4628      	mov	r0, r5
 800109a:	f000 f817 	bl	80010cc <__swbuf_r>
 800109e:	3001      	adds	r0, #1
 80010a0:	d1bf      	bne.n	8001022 <_puts_r+0x42>
 80010a2:	e7df      	b.n	8001064 <_puts_r+0x84>
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	250a      	movs	r5, #10
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	6022      	str	r2, [r4, #0]
 80010ac:	701d      	strb	r5, [r3, #0]
 80010ae:	e7db      	b.n	8001068 <_puts_r+0x88>
 80010b0:	080020a8 	.word	0x080020a8
 80010b4:	080020c8 	.word	0x080020c8
 80010b8:	08002088 	.word	0x08002088

080010bc <puts>:
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <puts+0xc>)
 80010be:	4601      	mov	r1, r0
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f7ff bf8d 	b.w	8000fe0 <_puts_r>
 80010c6:	bf00      	nop
 80010c8:	20000014 	.word	0x20000014

080010cc <__swbuf_r>:
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ce:	460e      	mov	r6, r1
 80010d0:	4614      	mov	r4, r2
 80010d2:	4605      	mov	r5, r0
 80010d4:	b118      	cbz	r0, 80010de <__swbuf_r+0x12>
 80010d6:	6983      	ldr	r3, [r0, #24]
 80010d8:	b90b      	cbnz	r3, 80010de <__swbuf_r+0x12>
 80010da:	f000 f9cd 	bl	8001478 <__sinit>
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <__swbuf_r+0x98>)
 80010e0:	429c      	cmp	r4, r3
 80010e2:	d12b      	bne.n	800113c <__swbuf_r+0x70>
 80010e4:	686c      	ldr	r4, [r5, #4]
 80010e6:	69a3      	ldr	r3, [r4, #24]
 80010e8:	60a3      	str	r3, [r4, #8]
 80010ea:	89a3      	ldrh	r3, [r4, #12]
 80010ec:	071a      	lsls	r2, r3, #28
 80010ee:	d52f      	bpl.n	8001150 <__swbuf_r+0x84>
 80010f0:	6923      	ldr	r3, [r4, #16]
 80010f2:	b36b      	cbz	r3, 8001150 <__swbuf_r+0x84>
 80010f4:	6923      	ldr	r3, [r4, #16]
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	1ac0      	subs	r0, r0, r3
 80010fa:	6963      	ldr	r3, [r4, #20]
 80010fc:	b2f6      	uxtb	r6, r6
 80010fe:	4283      	cmp	r3, r0
 8001100:	4637      	mov	r7, r6
 8001102:	dc04      	bgt.n	800110e <__swbuf_r+0x42>
 8001104:	4621      	mov	r1, r4
 8001106:	4628      	mov	r0, r5
 8001108:	f000 f922 	bl	8001350 <_fflush_r>
 800110c:	bb30      	cbnz	r0, 800115c <__swbuf_r+0x90>
 800110e:	68a3      	ldr	r3, [r4, #8]
 8001110:	3b01      	subs	r3, #1
 8001112:	60a3      	str	r3, [r4, #8]
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	6022      	str	r2, [r4, #0]
 800111a:	701e      	strb	r6, [r3, #0]
 800111c:	6963      	ldr	r3, [r4, #20]
 800111e:	3001      	adds	r0, #1
 8001120:	4283      	cmp	r3, r0
 8001122:	d004      	beq.n	800112e <__swbuf_r+0x62>
 8001124:	89a3      	ldrh	r3, [r4, #12]
 8001126:	07db      	lsls	r3, r3, #31
 8001128:	d506      	bpl.n	8001138 <__swbuf_r+0x6c>
 800112a:	2e0a      	cmp	r6, #10
 800112c:	d104      	bne.n	8001138 <__swbuf_r+0x6c>
 800112e:	4621      	mov	r1, r4
 8001130:	4628      	mov	r0, r5
 8001132:	f000 f90d 	bl	8001350 <_fflush_r>
 8001136:	b988      	cbnz	r0, 800115c <__swbuf_r+0x90>
 8001138:	4638      	mov	r0, r7
 800113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <__swbuf_r+0x9c>)
 800113e:	429c      	cmp	r4, r3
 8001140:	d101      	bne.n	8001146 <__swbuf_r+0x7a>
 8001142:	68ac      	ldr	r4, [r5, #8]
 8001144:	e7cf      	b.n	80010e6 <__swbuf_r+0x1a>
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <__swbuf_r+0xa0>)
 8001148:	429c      	cmp	r4, r3
 800114a:	bf08      	it	eq
 800114c:	68ec      	ldreq	r4, [r5, #12]
 800114e:	e7ca      	b.n	80010e6 <__swbuf_r+0x1a>
 8001150:	4621      	mov	r1, r4
 8001152:	4628      	mov	r0, r5
 8001154:	f000 f80c 	bl	8001170 <__swsetup_r>
 8001158:	2800      	cmp	r0, #0
 800115a:	d0cb      	beq.n	80010f4 <__swbuf_r+0x28>
 800115c:	f04f 37ff 	mov.w	r7, #4294967295
 8001160:	e7ea      	b.n	8001138 <__swbuf_r+0x6c>
 8001162:	bf00      	nop
 8001164:	080020a8 	.word	0x080020a8
 8001168:	080020c8 	.word	0x080020c8
 800116c:	08002088 	.word	0x08002088

08001170 <__swsetup_r>:
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <__swsetup_r+0xcc>)
 8001172:	b570      	push	{r4, r5, r6, lr}
 8001174:	681d      	ldr	r5, [r3, #0]
 8001176:	4606      	mov	r6, r0
 8001178:	460c      	mov	r4, r1
 800117a:	b125      	cbz	r5, 8001186 <__swsetup_r+0x16>
 800117c:	69ab      	ldr	r3, [r5, #24]
 800117e:	b913      	cbnz	r3, 8001186 <__swsetup_r+0x16>
 8001180:	4628      	mov	r0, r5
 8001182:	f000 f979 	bl	8001478 <__sinit>
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <__swsetup_r+0xd0>)
 8001188:	429c      	cmp	r4, r3
 800118a:	d10f      	bne.n	80011ac <__swsetup_r+0x3c>
 800118c:	686c      	ldr	r4, [r5, #4]
 800118e:	89a3      	ldrh	r3, [r4, #12]
 8001190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001194:	0719      	lsls	r1, r3, #28
 8001196:	d42c      	bmi.n	80011f2 <__swsetup_r+0x82>
 8001198:	06dd      	lsls	r5, r3, #27
 800119a:	d411      	bmi.n	80011c0 <__swsetup_r+0x50>
 800119c:	2309      	movs	r3, #9
 800119e:	6033      	str	r3, [r6, #0]
 80011a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011a4:	81a3      	strh	r3, [r4, #12]
 80011a6:	f04f 30ff 	mov.w	r0, #4294967295
 80011aa:	e03e      	b.n	800122a <__swsetup_r+0xba>
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <__swsetup_r+0xd4>)
 80011ae:	429c      	cmp	r4, r3
 80011b0:	d101      	bne.n	80011b6 <__swsetup_r+0x46>
 80011b2:	68ac      	ldr	r4, [r5, #8]
 80011b4:	e7eb      	b.n	800118e <__swsetup_r+0x1e>
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <__swsetup_r+0xd8>)
 80011b8:	429c      	cmp	r4, r3
 80011ba:	bf08      	it	eq
 80011bc:	68ec      	ldreq	r4, [r5, #12]
 80011be:	e7e6      	b.n	800118e <__swsetup_r+0x1e>
 80011c0:	0758      	lsls	r0, r3, #29
 80011c2:	d512      	bpl.n	80011ea <__swsetup_r+0x7a>
 80011c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011c6:	b141      	cbz	r1, 80011da <__swsetup_r+0x6a>
 80011c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011cc:	4299      	cmp	r1, r3
 80011ce:	d002      	beq.n	80011d6 <__swsetup_r+0x66>
 80011d0:	4630      	mov	r0, r6
 80011d2:	f000 fa57 	bl	8001684 <_free_r>
 80011d6:	2300      	movs	r3, #0
 80011d8:	6363      	str	r3, [r4, #52]	; 0x34
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011e0:	81a3      	strh	r3, [r4, #12]
 80011e2:	2300      	movs	r3, #0
 80011e4:	6063      	str	r3, [r4, #4]
 80011e6:	6923      	ldr	r3, [r4, #16]
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	81a3      	strh	r3, [r4, #12]
 80011f2:	6923      	ldr	r3, [r4, #16]
 80011f4:	b94b      	cbnz	r3, 800120a <__swsetup_r+0x9a>
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001200:	d003      	beq.n	800120a <__swsetup_r+0x9a>
 8001202:	4621      	mov	r1, r4
 8001204:	4630      	mov	r0, r6
 8001206:	f000 f9fd 	bl	8001604 <__smakebuf_r>
 800120a:	89a0      	ldrh	r0, [r4, #12]
 800120c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001210:	f010 0301 	ands.w	r3, r0, #1
 8001214:	d00a      	beq.n	800122c <__swsetup_r+0xbc>
 8001216:	2300      	movs	r3, #0
 8001218:	60a3      	str	r3, [r4, #8]
 800121a:	6963      	ldr	r3, [r4, #20]
 800121c:	425b      	negs	r3, r3
 800121e:	61a3      	str	r3, [r4, #24]
 8001220:	6923      	ldr	r3, [r4, #16]
 8001222:	b943      	cbnz	r3, 8001236 <__swsetup_r+0xc6>
 8001224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001228:	d1ba      	bne.n	80011a0 <__swsetup_r+0x30>
 800122a:	bd70      	pop	{r4, r5, r6, pc}
 800122c:	0781      	lsls	r1, r0, #30
 800122e:	bf58      	it	pl
 8001230:	6963      	ldrpl	r3, [r4, #20]
 8001232:	60a3      	str	r3, [r4, #8]
 8001234:	e7f4      	b.n	8001220 <__swsetup_r+0xb0>
 8001236:	2000      	movs	r0, #0
 8001238:	e7f7      	b.n	800122a <__swsetup_r+0xba>
 800123a:	bf00      	nop
 800123c:	20000014 	.word	0x20000014
 8001240:	080020a8 	.word	0x080020a8
 8001244:	080020c8 	.word	0x080020c8
 8001248:	08002088 	.word	0x08002088

0800124c <__sflush_r>:
 800124c:	898a      	ldrh	r2, [r1, #12]
 800124e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001250:	4605      	mov	r5, r0
 8001252:	0710      	lsls	r0, r2, #28
 8001254:	460c      	mov	r4, r1
 8001256:	d457      	bmi.n	8001308 <__sflush_r+0xbc>
 8001258:	684b      	ldr	r3, [r1, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	dc04      	bgt.n	8001268 <__sflush_r+0x1c>
 800125e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001260:	2b00      	cmp	r3, #0
 8001262:	dc01      	bgt.n	8001268 <__sflush_r+0x1c>
 8001264:	2000      	movs	r0, #0
 8001266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800126a:	2e00      	cmp	r6, #0
 800126c:	d0fa      	beq.n	8001264 <__sflush_r+0x18>
 800126e:	2300      	movs	r3, #0
 8001270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001274:	682f      	ldr	r7, [r5, #0]
 8001276:	602b      	str	r3, [r5, #0]
 8001278:	d032      	beq.n	80012e0 <__sflush_r+0x94>
 800127a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800127c:	89a3      	ldrh	r3, [r4, #12]
 800127e:	075a      	lsls	r2, r3, #29
 8001280:	d505      	bpl.n	800128e <__sflush_r+0x42>
 8001282:	6863      	ldr	r3, [r4, #4]
 8001284:	1ac0      	subs	r0, r0, r3
 8001286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001288:	b10b      	cbz	r3, 800128e <__sflush_r+0x42>
 800128a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800128c:	1ac0      	subs	r0, r0, r3
 800128e:	2300      	movs	r3, #0
 8001290:	4602      	mov	r2, r0
 8001292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001294:	6a21      	ldr	r1, [r4, #32]
 8001296:	4628      	mov	r0, r5
 8001298:	47b0      	blx	r6
 800129a:	1c43      	adds	r3, r0, #1
 800129c:	89a3      	ldrh	r3, [r4, #12]
 800129e:	d106      	bne.n	80012ae <__sflush_r+0x62>
 80012a0:	6829      	ldr	r1, [r5, #0]
 80012a2:	291d      	cmp	r1, #29
 80012a4:	d82c      	bhi.n	8001300 <__sflush_r+0xb4>
 80012a6:	4a29      	ldr	r2, [pc, #164]	; (800134c <__sflush_r+0x100>)
 80012a8:	40ca      	lsrs	r2, r1
 80012aa:	07d6      	lsls	r6, r2, #31
 80012ac:	d528      	bpl.n	8001300 <__sflush_r+0xb4>
 80012ae:	2200      	movs	r2, #0
 80012b0:	6062      	str	r2, [r4, #4]
 80012b2:	04d9      	lsls	r1, r3, #19
 80012b4:	6922      	ldr	r2, [r4, #16]
 80012b6:	6022      	str	r2, [r4, #0]
 80012b8:	d504      	bpl.n	80012c4 <__sflush_r+0x78>
 80012ba:	1c42      	adds	r2, r0, #1
 80012bc:	d101      	bne.n	80012c2 <__sflush_r+0x76>
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	b903      	cbnz	r3, 80012c4 <__sflush_r+0x78>
 80012c2:	6560      	str	r0, [r4, #84]	; 0x54
 80012c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012c6:	602f      	str	r7, [r5, #0]
 80012c8:	2900      	cmp	r1, #0
 80012ca:	d0cb      	beq.n	8001264 <__sflush_r+0x18>
 80012cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012d0:	4299      	cmp	r1, r3
 80012d2:	d002      	beq.n	80012da <__sflush_r+0x8e>
 80012d4:	4628      	mov	r0, r5
 80012d6:	f000 f9d5 	bl	8001684 <_free_r>
 80012da:	2000      	movs	r0, #0
 80012dc:	6360      	str	r0, [r4, #52]	; 0x34
 80012de:	e7c2      	b.n	8001266 <__sflush_r+0x1a>
 80012e0:	6a21      	ldr	r1, [r4, #32]
 80012e2:	2301      	movs	r3, #1
 80012e4:	4628      	mov	r0, r5
 80012e6:	47b0      	blx	r6
 80012e8:	1c41      	adds	r1, r0, #1
 80012ea:	d1c7      	bne.n	800127c <__sflush_r+0x30>
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0c4      	beq.n	800127c <__sflush_r+0x30>
 80012f2:	2b1d      	cmp	r3, #29
 80012f4:	d001      	beq.n	80012fa <__sflush_r+0xae>
 80012f6:	2b16      	cmp	r3, #22
 80012f8:	d101      	bne.n	80012fe <__sflush_r+0xb2>
 80012fa:	602f      	str	r7, [r5, #0]
 80012fc:	e7b2      	b.n	8001264 <__sflush_r+0x18>
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	81a3      	strh	r3, [r4, #12]
 8001306:	e7ae      	b.n	8001266 <__sflush_r+0x1a>
 8001308:	690f      	ldr	r7, [r1, #16]
 800130a:	2f00      	cmp	r7, #0
 800130c:	d0aa      	beq.n	8001264 <__sflush_r+0x18>
 800130e:	0793      	lsls	r3, r2, #30
 8001310:	680e      	ldr	r6, [r1, #0]
 8001312:	bf08      	it	eq
 8001314:	694b      	ldreq	r3, [r1, #20]
 8001316:	600f      	str	r7, [r1, #0]
 8001318:	bf18      	it	ne
 800131a:	2300      	movne	r3, #0
 800131c:	1bf6      	subs	r6, r6, r7
 800131e:	608b      	str	r3, [r1, #8]
 8001320:	2e00      	cmp	r6, #0
 8001322:	dd9f      	ble.n	8001264 <__sflush_r+0x18>
 8001324:	6a21      	ldr	r1, [r4, #32]
 8001326:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800132a:	4633      	mov	r3, r6
 800132c:	463a      	mov	r2, r7
 800132e:	4628      	mov	r0, r5
 8001330:	47e0      	blx	ip
 8001332:	2800      	cmp	r0, #0
 8001334:	dc06      	bgt.n	8001344 <__sflush_r+0xf8>
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	81a3      	strh	r3, [r4, #12]
 800133e:	f04f 30ff 	mov.w	r0, #4294967295
 8001342:	e790      	b.n	8001266 <__sflush_r+0x1a>
 8001344:	4407      	add	r7, r0
 8001346:	1a36      	subs	r6, r6, r0
 8001348:	e7ea      	b.n	8001320 <__sflush_r+0xd4>
 800134a:	bf00      	nop
 800134c:	20400001 	.word	0x20400001

08001350 <_fflush_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	690b      	ldr	r3, [r1, #16]
 8001354:	4605      	mov	r5, r0
 8001356:	460c      	mov	r4, r1
 8001358:	b913      	cbnz	r3, 8001360 <_fflush_r+0x10>
 800135a:	2500      	movs	r5, #0
 800135c:	4628      	mov	r0, r5
 800135e:	bd38      	pop	{r3, r4, r5, pc}
 8001360:	b118      	cbz	r0, 800136a <_fflush_r+0x1a>
 8001362:	6983      	ldr	r3, [r0, #24]
 8001364:	b90b      	cbnz	r3, 800136a <_fflush_r+0x1a>
 8001366:	f000 f887 	bl	8001478 <__sinit>
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <_fflush_r+0x6c>)
 800136c:	429c      	cmp	r4, r3
 800136e:	d11b      	bne.n	80013a8 <_fflush_r+0x58>
 8001370:	686c      	ldr	r4, [r5, #4]
 8001372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0ef      	beq.n	800135a <_fflush_r+0xa>
 800137a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800137c:	07d0      	lsls	r0, r2, #31
 800137e:	d404      	bmi.n	800138a <_fflush_r+0x3a>
 8001380:	0599      	lsls	r1, r3, #22
 8001382:	d402      	bmi.n	800138a <_fflush_r+0x3a>
 8001384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001386:	f000 f915 	bl	80015b4 <__retarget_lock_acquire_recursive>
 800138a:	4628      	mov	r0, r5
 800138c:	4621      	mov	r1, r4
 800138e:	f7ff ff5d 	bl	800124c <__sflush_r>
 8001392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001394:	07da      	lsls	r2, r3, #31
 8001396:	4605      	mov	r5, r0
 8001398:	d4e0      	bmi.n	800135c <_fflush_r+0xc>
 800139a:	89a3      	ldrh	r3, [r4, #12]
 800139c:	059b      	lsls	r3, r3, #22
 800139e:	d4dd      	bmi.n	800135c <_fflush_r+0xc>
 80013a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013a2:	f000 f908 	bl	80015b6 <__retarget_lock_release_recursive>
 80013a6:	e7d9      	b.n	800135c <_fflush_r+0xc>
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <_fflush_r+0x70>)
 80013aa:	429c      	cmp	r4, r3
 80013ac:	d101      	bne.n	80013b2 <_fflush_r+0x62>
 80013ae:	68ac      	ldr	r4, [r5, #8]
 80013b0:	e7df      	b.n	8001372 <_fflush_r+0x22>
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <_fflush_r+0x74>)
 80013b4:	429c      	cmp	r4, r3
 80013b6:	bf08      	it	eq
 80013b8:	68ec      	ldreq	r4, [r5, #12]
 80013ba:	e7da      	b.n	8001372 <_fflush_r+0x22>
 80013bc:	080020a8 	.word	0x080020a8
 80013c0:	080020c8 	.word	0x080020c8
 80013c4:	08002088 	.word	0x08002088

080013c8 <std>:
 80013c8:	2300      	movs	r3, #0
 80013ca:	b510      	push	{r4, lr}
 80013cc:	4604      	mov	r4, r0
 80013ce:	e9c0 3300 	strd	r3, r3, [r0]
 80013d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013d6:	6083      	str	r3, [r0, #8]
 80013d8:	8181      	strh	r1, [r0, #12]
 80013da:	6643      	str	r3, [r0, #100]	; 0x64
 80013dc:	81c2      	strh	r2, [r0, #14]
 80013de:	6183      	str	r3, [r0, #24]
 80013e0:	4619      	mov	r1, r3
 80013e2:	2208      	movs	r2, #8
 80013e4:	305c      	adds	r0, #92	; 0x5c
 80013e6:	f7ff fddb 	bl	8000fa0 <memset>
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <std+0x38>)
 80013ec:	6263      	str	r3, [r4, #36]	; 0x24
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <std+0x3c>)
 80013f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <std+0x40>)
 80013f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <std+0x44>)
 80013f8:	6224      	str	r4, [r4, #32]
 80013fa:	6323      	str	r3, [r4, #48]	; 0x30
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	bf00      	nop
 8001400:	08001e39 	.word	0x08001e39
 8001404:	08001e5b 	.word	0x08001e5b
 8001408:	08001e93 	.word	0x08001e93
 800140c:	08001eb7 	.word	0x08001eb7

08001410 <_cleanup_r>:
 8001410:	4901      	ldr	r1, [pc, #4]	; (8001418 <_cleanup_r+0x8>)
 8001412:	f000 b8af 	b.w	8001574 <_fwalk_reent>
 8001416:	bf00      	nop
 8001418:	08001351 	.word	0x08001351

0800141c <__sfmoreglue>:
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	2268      	movs	r2, #104	; 0x68
 8001420:	1e4d      	subs	r5, r1, #1
 8001422:	4355      	muls	r5, r2
 8001424:	460e      	mov	r6, r1
 8001426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800142a:	f000 f995 	bl	8001758 <_malloc_r>
 800142e:	4604      	mov	r4, r0
 8001430:	b140      	cbz	r0, 8001444 <__sfmoreglue+0x28>
 8001432:	2100      	movs	r1, #0
 8001434:	e9c0 1600 	strd	r1, r6, [r0]
 8001438:	300c      	adds	r0, #12
 800143a:	60a0      	str	r0, [r4, #8]
 800143c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001440:	f7ff fdae 	bl	8000fa0 <memset>
 8001444:	4620      	mov	r0, r4
 8001446:	bd70      	pop	{r4, r5, r6, pc}

08001448 <__sfp_lock_acquire>:
 8001448:	4801      	ldr	r0, [pc, #4]	; (8001450 <__sfp_lock_acquire+0x8>)
 800144a:	f000 b8b3 	b.w	80015b4 <__retarget_lock_acquire_recursive>
 800144e:	bf00      	nop
 8001450:	200001c5 	.word	0x200001c5

08001454 <__sfp_lock_release>:
 8001454:	4801      	ldr	r0, [pc, #4]	; (800145c <__sfp_lock_release+0x8>)
 8001456:	f000 b8ae 	b.w	80015b6 <__retarget_lock_release_recursive>
 800145a:	bf00      	nop
 800145c:	200001c5 	.word	0x200001c5

08001460 <__sinit_lock_acquire>:
 8001460:	4801      	ldr	r0, [pc, #4]	; (8001468 <__sinit_lock_acquire+0x8>)
 8001462:	f000 b8a7 	b.w	80015b4 <__retarget_lock_acquire_recursive>
 8001466:	bf00      	nop
 8001468:	200001c6 	.word	0x200001c6

0800146c <__sinit_lock_release>:
 800146c:	4801      	ldr	r0, [pc, #4]	; (8001474 <__sinit_lock_release+0x8>)
 800146e:	f000 b8a2 	b.w	80015b6 <__retarget_lock_release_recursive>
 8001472:	bf00      	nop
 8001474:	200001c6 	.word	0x200001c6

08001478 <__sinit>:
 8001478:	b510      	push	{r4, lr}
 800147a:	4604      	mov	r4, r0
 800147c:	f7ff fff0 	bl	8001460 <__sinit_lock_acquire>
 8001480:	69a3      	ldr	r3, [r4, #24]
 8001482:	b11b      	cbz	r3, 800148c <__sinit+0x14>
 8001484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001488:	f7ff bff0 	b.w	800146c <__sinit_lock_release>
 800148c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001490:	6523      	str	r3, [r4, #80]	; 0x50
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <__sinit+0x68>)
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <__sinit+0x6c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	62a2      	str	r2, [r4, #40]	; 0x28
 800149a:	42a3      	cmp	r3, r4
 800149c:	bf04      	itt	eq
 800149e:	2301      	moveq	r3, #1
 80014a0:	61a3      	streq	r3, [r4, #24]
 80014a2:	4620      	mov	r0, r4
 80014a4:	f000 f820 	bl	80014e8 <__sfp>
 80014a8:	6060      	str	r0, [r4, #4]
 80014aa:	4620      	mov	r0, r4
 80014ac:	f000 f81c 	bl	80014e8 <__sfp>
 80014b0:	60a0      	str	r0, [r4, #8]
 80014b2:	4620      	mov	r0, r4
 80014b4:	f000 f818 	bl	80014e8 <__sfp>
 80014b8:	2200      	movs	r2, #0
 80014ba:	60e0      	str	r0, [r4, #12]
 80014bc:	2104      	movs	r1, #4
 80014be:	6860      	ldr	r0, [r4, #4]
 80014c0:	f7ff ff82 	bl	80013c8 <std>
 80014c4:	68a0      	ldr	r0, [r4, #8]
 80014c6:	2201      	movs	r2, #1
 80014c8:	2109      	movs	r1, #9
 80014ca:	f7ff ff7d 	bl	80013c8 <std>
 80014ce:	68e0      	ldr	r0, [r4, #12]
 80014d0:	2202      	movs	r2, #2
 80014d2:	2112      	movs	r1, #18
 80014d4:	f7ff ff78 	bl	80013c8 <std>
 80014d8:	2301      	movs	r3, #1
 80014da:	61a3      	str	r3, [r4, #24]
 80014dc:	e7d2      	b.n	8001484 <__sinit+0xc>
 80014de:	bf00      	nop
 80014e0:	08002084 	.word	0x08002084
 80014e4:	08001411 	.word	0x08001411

080014e8 <__sfp>:
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ea:	4607      	mov	r7, r0
 80014ec:	f7ff ffac 	bl	8001448 <__sfp_lock_acquire>
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <__sfp+0x84>)
 80014f2:	681e      	ldr	r6, [r3, #0]
 80014f4:	69b3      	ldr	r3, [r6, #24]
 80014f6:	b913      	cbnz	r3, 80014fe <__sfp+0x16>
 80014f8:	4630      	mov	r0, r6
 80014fa:	f7ff ffbd 	bl	8001478 <__sinit>
 80014fe:	3648      	adds	r6, #72	; 0x48
 8001500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001504:	3b01      	subs	r3, #1
 8001506:	d503      	bpl.n	8001510 <__sfp+0x28>
 8001508:	6833      	ldr	r3, [r6, #0]
 800150a:	b30b      	cbz	r3, 8001550 <__sfp+0x68>
 800150c:	6836      	ldr	r6, [r6, #0]
 800150e:	e7f7      	b.n	8001500 <__sfp+0x18>
 8001510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001514:	b9d5      	cbnz	r5, 800154c <__sfp+0x64>
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <__sfp+0x88>)
 8001518:	60e3      	str	r3, [r4, #12]
 800151a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800151e:	6665      	str	r5, [r4, #100]	; 0x64
 8001520:	f000 f847 	bl	80015b2 <__retarget_lock_init_recursive>
 8001524:	f7ff ff96 	bl	8001454 <__sfp_lock_release>
 8001528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800152c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001530:	6025      	str	r5, [r4, #0]
 8001532:	61a5      	str	r5, [r4, #24]
 8001534:	2208      	movs	r2, #8
 8001536:	4629      	mov	r1, r5
 8001538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800153c:	f7ff fd30 	bl	8000fa0 <memset>
 8001540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001548:	4620      	mov	r0, r4
 800154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800154c:	3468      	adds	r4, #104	; 0x68
 800154e:	e7d9      	b.n	8001504 <__sfp+0x1c>
 8001550:	2104      	movs	r1, #4
 8001552:	4638      	mov	r0, r7
 8001554:	f7ff ff62 	bl	800141c <__sfmoreglue>
 8001558:	4604      	mov	r4, r0
 800155a:	6030      	str	r0, [r6, #0]
 800155c:	2800      	cmp	r0, #0
 800155e:	d1d5      	bne.n	800150c <__sfp+0x24>
 8001560:	f7ff ff78 	bl	8001454 <__sfp_lock_release>
 8001564:	230c      	movs	r3, #12
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	e7ee      	b.n	8001548 <__sfp+0x60>
 800156a:	bf00      	nop
 800156c:	08002084 	.word	0x08002084
 8001570:	ffff0001 	.word	0xffff0001

08001574 <_fwalk_reent>:
 8001574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001578:	4606      	mov	r6, r0
 800157a:	4688      	mov	r8, r1
 800157c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001580:	2700      	movs	r7, #0
 8001582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001586:	f1b9 0901 	subs.w	r9, r9, #1
 800158a:	d505      	bpl.n	8001598 <_fwalk_reent+0x24>
 800158c:	6824      	ldr	r4, [r4, #0]
 800158e:	2c00      	cmp	r4, #0
 8001590:	d1f7      	bne.n	8001582 <_fwalk_reent+0xe>
 8001592:	4638      	mov	r0, r7
 8001594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001598:	89ab      	ldrh	r3, [r5, #12]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d907      	bls.n	80015ae <_fwalk_reent+0x3a>
 800159e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015a2:	3301      	adds	r3, #1
 80015a4:	d003      	beq.n	80015ae <_fwalk_reent+0x3a>
 80015a6:	4629      	mov	r1, r5
 80015a8:	4630      	mov	r0, r6
 80015aa:	47c0      	blx	r8
 80015ac:	4307      	orrs	r7, r0
 80015ae:	3568      	adds	r5, #104	; 0x68
 80015b0:	e7e9      	b.n	8001586 <_fwalk_reent+0x12>

080015b2 <__retarget_lock_init_recursive>:
 80015b2:	4770      	bx	lr

080015b4 <__retarget_lock_acquire_recursive>:
 80015b4:	4770      	bx	lr

080015b6 <__retarget_lock_release_recursive>:
 80015b6:	4770      	bx	lr

080015b8 <__swhatbuf_r>:
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	460e      	mov	r6, r1
 80015bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015c0:	2900      	cmp	r1, #0
 80015c2:	b096      	sub	sp, #88	; 0x58
 80015c4:	4614      	mov	r4, r2
 80015c6:	461d      	mov	r5, r3
 80015c8:	da08      	bge.n	80015dc <__swhatbuf_r+0x24>
 80015ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	602a      	str	r2, [r5, #0]
 80015d2:	061a      	lsls	r2, r3, #24
 80015d4:	d410      	bmi.n	80015f8 <__swhatbuf_r+0x40>
 80015d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015da:	e00e      	b.n	80015fa <__swhatbuf_r+0x42>
 80015dc:	466a      	mov	r2, sp
 80015de:	f000 fc91 	bl	8001f04 <_fstat_r>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	dbf1      	blt.n	80015ca <__swhatbuf_r+0x12>
 80015e6:	9a01      	ldr	r2, [sp, #4]
 80015e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80015ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80015f0:	425a      	negs	r2, r3
 80015f2:	415a      	adcs	r2, r3
 80015f4:	602a      	str	r2, [r5, #0]
 80015f6:	e7ee      	b.n	80015d6 <__swhatbuf_r+0x1e>
 80015f8:	2340      	movs	r3, #64	; 0x40
 80015fa:	2000      	movs	r0, #0
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	b016      	add	sp, #88	; 0x58
 8001600:	bd70      	pop	{r4, r5, r6, pc}
	...

08001604 <__smakebuf_r>:
 8001604:	898b      	ldrh	r3, [r1, #12]
 8001606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001608:	079d      	lsls	r5, r3, #30
 800160a:	4606      	mov	r6, r0
 800160c:	460c      	mov	r4, r1
 800160e:	d507      	bpl.n	8001620 <__smakebuf_r+0x1c>
 8001610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001614:	6023      	str	r3, [r4, #0]
 8001616:	6123      	str	r3, [r4, #16]
 8001618:	2301      	movs	r3, #1
 800161a:	6163      	str	r3, [r4, #20]
 800161c:	b002      	add	sp, #8
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	ab01      	add	r3, sp, #4
 8001622:	466a      	mov	r2, sp
 8001624:	f7ff ffc8 	bl	80015b8 <__swhatbuf_r>
 8001628:	9900      	ldr	r1, [sp, #0]
 800162a:	4605      	mov	r5, r0
 800162c:	4630      	mov	r0, r6
 800162e:	f000 f893 	bl	8001758 <_malloc_r>
 8001632:	b948      	cbnz	r0, 8001648 <__smakebuf_r+0x44>
 8001634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001638:	059a      	lsls	r2, r3, #22
 800163a:	d4ef      	bmi.n	800161c <__smakebuf_r+0x18>
 800163c:	f023 0303 	bic.w	r3, r3, #3
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	81a3      	strh	r3, [r4, #12]
 8001646:	e7e3      	b.n	8001610 <__smakebuf_r+0xc>
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <__smakebuf_r+0x7c>)
 800164a:	62b3      	str	r3, [r6, #40]	; 0x28
 800164c:	89a3      	ldrh	r3, [r4, #12]
 800164e:	6020      	str	r0, [r4, #0]
 8001650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001654:	81a3      	strh	r3, [r4, #12]
 8001656:	9b00      	ldr	r3, [sp, #0]
 8001658:	6163      	str	r3, [r4, #20]
 800165a:	9b01      	ldr	r3, [sp, #4]
 800165c:	6120      	str	r0, [r4, #16]
 800165e:	b15b      	cbz	r3, 8001678 <__smakebuf_r+0x74>
 8001660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001664:	4630      	mov	r0, r6
 8001666:	f000 fc5f 	bl	8001f28 <_isatty_r>
 800166a:	b128      	cbz	r0, 8001678 <__smakebuf_r+0x74>
 800166c:	89a3      	ldrh	r3, [r4, #12]
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	81a3      	strh	r3, [r4, #12]
 8001678:	89a0      	ldrh	r0, [r4, #12]
 800167a:	4305      	orrs	r5, r0
 800167c:	81a5      	strh	r5, [r4, #12]
 800167e:	e7cd      	b.n	800161c <__smakebuf_r+0x18>
 8001680:	08001411 	.word	0x08001411

08001684 <_free_r>:
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	4605      	mov	r5, r0
 8001688:	2900      	cmp	r1, #0
 800168a:	d041      	beq.n	8001710 <_free_r+0x8c>
 800168c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001690:	1f0c      	subs	r4, r1, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	bfb8      	it	lt
 8001696:	18e4      	addlt	r4, r4, r3
 8001698:	f000 fc68 	bl	8001f6c <__malloc_lock>
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <_free_r+0x90>)
 800169e:	6813      	ldr	r3, [r2, #0]
 80016a0:	b933      	cbnz	r3, 80016b0 <_free_r+0x2c>
 80016a2:	6063      	str	r3, [r4, #4]
 80016a4:	6014      	str	r4, [r2, #0]
 80016a6:	4628      	mov	r0, r5
 80016a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016ac:	f000 bc64 	b.w	8001f78 <__malloc_unlock>
 80016b0:	42a3      	cmp	r3, r4
 80016b2:	d908      	bls.n	80016c6 <_free_r+0x42>
 80016b4:	6820      	ldr	r0, [r4, #0]
 80016b6:	1821      	adds	r1, r4, r0
 80016b8:	428b      	cmp	r3, r1
 80016ba:	bf01      	itttt	eq
 80016bc:	6819      	ldreq	r1, [r3, #0]
 80016be:	685b      	ldreq	r3, [r3, #4]
 80016c0:	1809      	addeq	r1, r1, r0
 80016c2:	6021      	streq	r1, [r4, #0]
 80016c4:	e7ed      	b.n	80016a2 <_free_r+0x1e>
 80016c6:	461a      	mov	r2, r3
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	b10b      	cbz	r3, 80016d0 <_free_r+0x4c>
 80016cc:	42a3      	cmp	r3, r4
 80016ce:	d9fa      	bls.n	80016c6 <_free_r+0x42>
 80016d0:	6811      	ldr	r1, [r2, #0]
 80016d2:	1850      	adds	r0, r2, r1
 80016d4:	42a0      	cmp	r0, r4
 80016d6:	d10b      	bne.n	80016f0 <_free_r+0x6c>
 80016d8:	6820      	ldr	r0, [r4, #0]
 80016da:	4401      	add	r1, r0
 80016dc:	1850      	adds	r0, r2, r1
 80016de:	4283      	cmp	r3, r0
 80016e0:	6011      	str	r1, [r2, #0]
 80016e2:	d1e0      	bne.n	80016a6 <_free_r+0x22>
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	6053      	str	r3, [r2, #4]
 80016ea:	4401      	add	r1, r0
 80016ec:	6011      	str	r1, [r2, #0]
 80016ee:	e7da      	b.n	80016a6 <_free_r+0x22>
 80016f0:	d902      	bls.n	80016f8 <_free_r+0x74>
 80016f2:	230c      	movs	r3, #12
 80016f4:	602b      	str	r3, [r5, #0]
 80016f6:	e7d6      	b.n	80016a6 <_free_r+0x22>
 80016f8:	6820      	ldr	r0, [r4, #0]
 80016fa:	1821      	adds	r1, r4, r0
 80016fc:	428b      	cmp	r3, r1
 80016fe:	bf04      	itt	eq
 8001700:	6819      	ldreq	r1, [r3, #0]
 8001702:	685b      	ldreq	r3, [r3, #4]
 8001704:	6063      	str	r3, [r4, #4]
 8001706:	bf04      	itt	eq
 8001708:	1809      	addeq	r1, r1, r0
 800170a:	6021      	streq	r1, [r4, #0]
 800170c:	6054      	str	r4, [r2, #4]
 800170e:	e7ca      	b.n	80016a6 <_free_r+0x22>
 8001710:	bd38      	pop	{r3, r4, r5, pc}
 8001712:	bf00      	nop
 8001714:	200001c8 	.word	0x200001c8

08001718 <sbrk_aligned>:
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	4e0e      	ldr	r6, [pc, #56]	; (8001754 <sbrk_aligned+0x3c>)
 800171c:	460c      	mov	r4, r1
 800171e:	6831      	ldr	r1, [r6, #0]
 8001720:	4605      	mov	r5, r0
 8001722:	b911      	cbnz	r1, 800172a <sbrk_aligned+0x12>
 8001724:	f000 fb78 	bl	8001e18 <_sbrk_r>
 8001728:	6030      	str	r0, [r6, #0]
 800172a:	4621      	mov	r1, r4
 800172c:	4628      	mov	r0, r5
 800172e:	f000 fb73 	bl	8001e18 <_sbrk_r>
 8001732:	1c43      	adds	r3, r0, #1
 8001734:	d00a      	beq.n	800174c <sbrk_aligned+0x34>
 8001736:	1cc4      	adds	r4, r0, #3
 8001738:	f024 0403 	bic.w	r4, r4, #3
 800173c:	42a0      	cmp	r0, r4
 800173e:	d007      	beq.n	8001750 <sbrk_aligned+0x38>
 8001740:	1a21      	subs	r1, r4, r0
 8001742:	4628      	mov	r0, r5
 8001744:	f000 fb68 	bl	8001e18 <_sbrk_r>
 8001748:	3001      	adds	r0, #1
 800174a:	d101      	bne.n	8001750 <sbrk_aligned+0x38>
 800174c:	f04f 34ff 	mov.w	r4, #4294967295
 8001750:	4620      	mov	r0, r4
 8001752:	bd70      	pop	{r4, r5, r6, pc}
 8001754:	200001cc 	.word	0x200001cc

08001758 <_malloc_r>:
 8001758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800175c:	1ccd      	adds	r5, r1, #3
 800175e:	f025 0503 	bic.w	r5, r5, #3
 8001762:	3508      	adds	r5, #8
 8001764:	2d0c      	cmp	r5, #12
 8001766:	bf38      	it	cc
 8001768:	250c      	movcc	r5, #12
 800176a:	2d00      	cmp	r5, #0
 800176c:	4607      	mov	r7, r0
 800176e:	db01      	blt.n	8001774 <_malloc_r+0x1c>
 8001770:	42a9      	cmp	r1, r5
 8001772:	d905      	bls.n	8001780 <_malloc_r+0x28>
 8001774:	230c      	movs	r3, #12
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	2600      	movs	r6, #0
 800177a:	4630      	mov	r0, r6
 800177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001780:	4e2e      	ldr	r6, [pc, #184]	; (800183c <_malloc_r+0xe4>)
 8001782:	f000 fbf3 	bl	8001f6c <__malloc_lock>
 8001786:	6833      	ldr	r3, [r6, #0]
 8001788:	461c      	mov	r4, r3
 800178a:	bb34      	cbnz	r4, 80017da <_malloc_r+0x82>
 800178c:	4629      	mov	r1, r5
 800178e:	4638      	mov	r0, r7
 8001790:	f7ff ffc2 	bl	8001718 <sbrk_aligned>
 8001794:	1c43      	adds	r3, r0, #1
 8001796:	4604      	mov	r4, r0
 8001798:	d14d      	bne.n	8001836 <_malloc_r+0xde>
 800179a:	6834      	ldr	r4, [r6, #0]
 800179c:	4626      	mov	r6, r4
 800179e:	2e00      	cmp	r6, #0
 80017a0:	d140      	bne.n	8001824 <_malloc_r+0xcc>
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	4631      	mov	r1, r6
 80017a6:	4638      	mov	r0, r7
 80017a8:	eb04 0803 	add.w	r8, r4, r3
 80017ac:	f000 fb34 	bl	8001e18 <_sbrk_r>
 80017b0:	4580      	cmp	r8, r0
 80017b2:	d13a      	bne.n	800182a <_malloc_r+0xd2>
 80017b4:	6821      	ldr	r1, [r4, #0]
 80017b6:	3503      	adds	r5, #3
 80017b8:	1a6d      	subs	r5, r5, r1
 80017ba:	f025 0503 	bic.w	r5, r5, #3
 80017be:	3508      	adds	r5, #8
 80017c0:	2d0c      	cmp	r5, #12
 80017c2:	bf38      	it	cc
 80017c4:	250c      	movcc	r5, #12
 80017c6:	4629      	mov	r1, r5
 80017c8:	4638      	mov	r0, r7
 80017ca:	f7ff ffa5 	bl	8001718 <sbrk_aligned>
 80017ce:	3001      	adds	r0, #1
 80017d0:	d02b      	beq.n	800182a <_malloc_r+0xd2>
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	442b      	add	r3, r5
 80017d6:	6023      	str	r3, [r4, #0]
 80017d8:	e00e      	b.n	80017f8 <_malloc_r+0xa0>
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	1b52      	subs	r2, r2, r5
 80017de:	d41e      	bmi.n	800181e <_malloc_r+0xc6>
 80017e0:	2a0b      	cmp	r2, #11
 80017e2:	d916      	bls.n	8001812 <_malloc_r+0xba>
 80017e4:	1961      	adds	r1, r4, r5
 80017e6:	42a3      	cmp	r3, r4
 80017e8:	6025      	str	r5, [r4, #0]
 80017ea:	bf18      	it	ne
 80017ec:	6059      	strne	r1, [r3, #4]
 80017ee:	6863      	ldr	r3, [r4, #4]
 80017f0:	bf08      	it	eq
 80017f2:	6031      	streq	r1, [r6, #0]
 80017f4:	5162      	str	r2, [r4, r5]
 80017f6:	604b      	str	r3, [r1, #4]
 80017f8:	4638      	mov	r0, r7
 80017fa:	f104 060b 	add.w	r6, r4, #11
 80017fe:	f000 fbbb 	bl	8001f78 <__malloc_unlock>
 8001802:	f026 0607 	bic.w	r6, r6, #7
 8001806:	1d23      	adds	r3, r4, #4
 8001808:	1af2      	subs	r2, r6, r3
 800180a:	d0b6      	beq.n	800177a <_malloc_r+0x22>
 800180c:	1b9b      	subs	r3, r3, r6
 800180e:	50a3      	str	r3, [r4, r2]
 8001810:	e7b3      	b.n	800177a <_malloc_r+0x22>
 8001812:	6862      	ldr	r2, [r4, #4]
 8001814:	42a3      	cmp	r3, r4
 8001816:	bf0c      	ite	eq
 8001818:	6032      	streq	r2, [r6, #0]
 800181a:	605a      	strne	r2, [r3, #4]
 800181c:	e7ec      	b.n	80017f8 <_malloc_r+0xa0>
 800181e:	4623      	mov	r3, r4
 8001820:	6864      	ldr	r4, [r4, #4]
 8001822:	e7b2      	b.n	800178a <_malloc_r+0x32>
 8001824:	4634      	mov	r4, r6
 8001826:	6876      	ldr	r6, [r6, #4]
 8001828:	e7b9      	b.n	800179e <_malloc_r+0x46>
 800182a:	230c      	movs	r3, #12
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4638      	mov	r0, r7
 8001830:	f000 fba2 	bl	8001f78 <__malloc_unlock>
 8001834:	e7a1      	b.n	800177a <_malloc_r+0x22>
 8001836:	6025      	str	r5, [r4, #0]
 8001838:	e7de      	b.n	80017f8 <_malloc_r+0xa0>
 800183a:	bf00      	nop
 800183c:	200001c8 	.word	0x200001c8

08001840 <__sfputc_r>:
 8001840:	6893      	ldr	r3, [r2, #8]
 8001842:	3b01      	subs	r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	b410      	push	{r4}
 8001848:	6093      	str	r3, [r2, #8]
 800184a:	da07      	bge.n	800185c <__sfputc_r+0x1c>
 800184c:	6994      	ldr	r4, [r2, #24]
 800184e:	42a3      	cmp	r3, r4
 8001850:	db01      	blt.n	8001856 <__sfputc_r+0x16>
 8001852:	290a      	cmp	r1, #10
 8001854:	d102      	bne.n	800185c <__sfputc_r+0x1c>
 8001856:	bc10      	pop	{r4}
 8001858:	f7ff bc38 	b.w	80010cc <__swbuf_r>
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	1c58      	adds	r0, r3, #1
 8001860:	6010      	str	r0, [r2, #0]
 8001862:	7019      	strb	r1, [r3, #0]
 8001864:	4608      	mov	r0, r1
 8001866:	bc10      	pop	{r4}
 8001868:	4770      	bx	lr

0800186a <__sfputs_r>:
 800186a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186c:	4606      	mov	r6, r0
 800186e:	460f      	mov	r7, r1
 8001870:	4614      	mov	r4, r2
 8001872:	18d5      	adds	r5, r2, r3
 8001874:	42ac      	cmp	r4, r5
 8001876:	d101      	bne.n	800187c <__sfputs_r+0x12>
 8001878:	2000      	movs	r0, #0
 800187a:	e007      	b.n	800188c <__sfputs_r+0x22>
 800187c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001880:	463a      	mov	r2, r7
 8001882:	4630      	mov	r0, r6
 8001884:	f7ff ffdc 	bl	8001840 <__sfputc_r>
 8001888:	1c43      	adds	r3, r0, #1
 800188a:	d1f3      	bne.n	8001874 <__sfputs_r+0xa>
 800188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001890 <_vfiprintf_r>:
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001894:	460d      	mov	r5, r1
 8001896:	b09d      	sub	sp, #116	; 0x74
 8001898:	4614      	mov	r4, r2
 800189a:	4698      	mov	r8, r3
 800189c:	4606      	mov	r6, r0
 800189e:	b118      	cbz	r0, 80018a8 <_vfiprintf_r+0x18>
 80018a0:	6983      	ldr	r3, [r0, #24]
 80018a2:	b90b      	cbnz	r3, 80018a8 <_vfiprintf_r+0x18>
 80018a4:	f7ff fde8 	bl	8001478 <__sinit>
 80018a8:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <_vfiprintf_r+0x240>)
 80018aa:	429d      	cmp	r5, r3
 80018ac:	d11b      	bne.n	80018e6 <_vfiprintf_r+0x56>
 80018ae:	6875      	ldr	r5, [r6, #4]
 80018b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018b2:	07d9      	lsls	r1, r3, #31
 80018b4:	d405      	bmi.n	80018c2 <_vfiprintf_r+0x32>
 80018b6:	89ab      	ldrh	r3, [r5, #12]
 80018b8:	059a      	lsls	r2, r3, #22
 80018ba:	d402      	bmi.n	80018c2 <_vfiprintf_r+0x32>
 80018bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018be:	f7ff fe79 	bl	80015b4 <__retarget_lock_acquire_recursive>
 80018c2:	89ab      	ldrh	r3, [r5, #12]
 80018c4:	071b      	lsls	r3, r3, #28
 80018c6:	d501      	bpl.n	80018cc <_vfiprintf_r+0x3c>
 80018c8:	692b      	ldr	r3, [r5, #16]
 80018ca:	b9eb      	cbnz	r3, 8001908 <_vfiprintf_r+0x78>
 80018cc:	4629      	mov	r1, r5
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff fc4e 	bl	8001170 <__swsetup_r>
 80018d4:	b1c0      	cbz	r0, 8001908 <_vfiprintf_r+0x78>
 80018d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018d8:	07dc      	lsls	r4, r3, #31
 80018da:	d50e      	bpl.n	80018fa <_vfiprintf_r+0x6a>
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	b01d      	add	sp, #116	; 0x74
 80018e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e6:	4b7b      	ldr	r3, [pc, #492]	; (8001ad4 <_vfiprintf_r+0x244>)
 80018e8:	429d      	cmp	r5, r3
 80018ea:	d101      	bne.n	80018f0 <_vfiprintf_r+0x60>
 80018ec:	68b5      	ldr	r5, [r6, #8]
 80018ee:	e7df      	b.n	80018b0 <_vfiprintf_r+0x20>
 80018f0:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <_vfiprintf_r+0x248>)
 80018f2:	429d      	cmp	r5, r3
 80018f4:	bf08      	it	eq
 80018f6:	68f5      	ldreq	r5, [r6, #12]
 80018f8:	e7da      	b.n	80018b0 <_vfiprintf_r+0x20>
 80018fa:	89ab      	ldrh	r3, [r5, #12]
 80018fc:	0598      	lsls	r0, r3, #22
 80018fe:	d4ed      	bmi.n	80018dc <_vfiprintf_r+0x4c>
 8001900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001902:	f7ff fe58 	bl	80015b6 <__retarget_lock_release_recursive>
 8001906:	e7e9      	b.n	80018dc <_vfiprintf_r+0x4c>
 8001908:	2300      	movs	r3, #0
 800190a:	9309      	str	r3, [sp, #36]	; 0x24
 800190c:	2320      	movs	r3, #32
 800190e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001912:	f8cd 800c 	str.w	r8, [sp, #12]
 8001916:	2330      	movs	r3, #48	; 0x30
 8001918:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001adc <_vfiprintf_r+0x24c>
 800191c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001920:	f04f 0901 	mov.w	r9, #1
 8001924:	4623      	mov	r3, r4
 8001926:	469a      	mov	sl, r3
 8001928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800192c:	b10a      	cbz	r2, 8001932 <_vfiprintf_r+0xa2>
 800192e:	2a25      	cmp	r2, #37	; 0x25
 8001930:	d1f9      	bne.n	8001926 <_vfiprintf_r+0x96>
 8001932:	ebba 0b04 	subs.w	fp, sl, r4
 8001936:	d00b      	beq.n	8001950 <_vfiprintf_r+0xc0>
 8001938:	465b      	mov	r3, fp
 800193a:	4622      	mov	r2, r4
 800193c:	4629      	mov	r1, r5
 800193e:	4630      	mov	r0, r6
 8001940:	f7ff ff93 	bl	800186a <__sfputs_r>
 8001944:	3001      	adds	r0, #1
 8001946:	f000 80aa 	beq.w	8001a9e <_vfiprintf_r+0x20e>
 800194a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800194c:	445a      	add	r2, fp
 800194e:	9209      	str	r2, [sp, #36]	; 0x24
 8001950:	f89a 3000 	ldrb.w	r3, [sl]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a2 	beq.w	8001a9e <_vfiprintf_r+0x20e>
 800195a:	2300      	movs	r3, #0
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001964:	f10a 0a01 	add.w	sl, sl, #1
 8001968:	9304      	str	r3, [sp, #16]
 800196a:	9307      	str	r3, [sp, #28]
 800196c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001970:	931a      	str	r3, [sp, #104]	; 0x68
 8001972:	4654      	mov	r4, sl
 8001974:	2205      	movs	r2, #5
 8001976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800197a:	4858      	ldr	r0, [pc, #352]	; (8001adc <_vfiprintf_r+0x24c>)
 800197c:	f7fe fc38 	bl	80001f0 <memchr>
 8001980:	9a04      	ldr	r2, [sp, #16]
 8001982:	b9d8      	cbnz	r0, 80019bc <_vfiprintf_r+0x12c>
 8001984:	06d1      	lsls	r1, r2, #27
 8001986:	bf44      	itt	mi
 8001988:	2320      	movmi	r3, #32
 800198a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800198e:	0713      	lsls	r3, r2, #28
 8001990:	bf44      	itt	mi
 8001992:	232b      	movmi	r3, #43	; 0x2b
 8001994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001998:	f89a 3000 	ldrb.w	r3, [sl]
 800199c:	2b2a      	cmp	r3, #42	; 0x2a
 800199e:	d015      	beq.n	80019cc <_vfiprintf_r+0x13c>
 80019a0:	9a07      	ldr	r2, [sp, #28]
 80019a2:	4654      	mov	r4, sl
 80019a4:	2000      	movs	r0, #0
 80019a6:	f04f 0c0a 	mov.w	ip, #10
 80019aa:	4621      	mov	r1, r4
 80019ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019b0:	3b30      	subs	r3, #48	; 0x30
 80019b2:	2b09      	cmp	r3, #9
 80019b4:	d94e      	bls.n	8001a54 <_vfiprintf_r+0x1c4>
 80019b6:	b1b0      	cbz	r0, 80019e6 <_vfiprintf_r+0x156>
 80019b8:	9207      	str	r2, [sp, #28]
 80019ba:	e014      	b.n	80019e6 <_vfiprintf_r+0x156>
 80019bc:	eba0 0308 	sub.w	r3, r0, r8
 80019c0:	fa09 f303 	lsl.w	r3, r9, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	9304      	str	r3, [sp, #16]
 80019c8:	46a2      	mov	sl, r4
 80019ca:	e7d2      	b.n	8001972 <_vfiprintf_r+0xe2>
 80019cc:	9b03      	ldr	r3, [sp, #12]
 80019ce:	1d19      	adds	r1, r3, #4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	9103      	str	r1, [sp, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bfbb      	ittet	lt
 80019d8:	425b      	neglt	r3, r3
 80019da:	f042 0202 	orrlt.w	r2, r2, #2
 80019de:	9307      	strge	r3, [sp, #28]
 80019e0:	9307      	strlt	r3, [sp, #28]
 80019e2:	bfb8      	it	lt
 80019e4:	9204      	strlt	r2, [sp, #16]
 80019e6:	7823      	ldrb	r3, [r4, #0]
 80019e8:	2b2e      	cmp	r3, #46	; 0x2e
 80019ea:	d10c      	bne.n	8001a06 <_vfiprintf_r+0x176>
 80019ec:	7863      	ldrb	r3, [r4, #1]
 80019ee:	2b2a      	cmp	r3, #42	; 0x2a
 80019f0:	d135      	bne.n	8001a5e <_vfiprintf_r+0x1ce>
 80019f2:	9b03      	ldr	r3, [sp, #12]
 80019f4:	1d1a      	adds	r2, r3, #4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	9203      	str	r2, [sp, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bfb8      	it	lt
 80019fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a02:	3402      	adds	r4, #2
 8001a04:	9305      	str	r3, [sp, #20]
 8001a06:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001ae0 <_vfiprintf_r+0x250>
 8001a0a:	7821      	ldrb	r1, [r4, #0]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	4650      	mov	r0, sl
 8001a10:	f7fe fbee 	bl	80001f0 <memchr>
 8001a14:	b140      	cbz	r0, 8001a28 <_vfiprintf_r+0x198>
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	eba0 000a 	sub.w	r0, r0, sl
 8001a1c:	fa03 f000 	lsl.w	r0, r3, r0
 8001a20:	9b04      	ldr	r3, [sp, #16]
 8001a22:	4303      	orrs	r3, r0
 8001a24:	3401      	adds	r4, #1
 8001a26:	9304      	str	r3, [sp, #16]
 8001a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a2c:	482d      	ldr	r0, [pc, #180]	; (8001ae4 <_vfiprintf_r+0x254>)
 8001a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a32:	2206      	movs	r2, #6
 8001a34:	f7fe fbdc 	bl	80001f0 <memchr>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d03f      	beq.n	8001abc <_vfiprintf_r+0x22c>
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <_vfiprintf_r+0x258>)
 8001a3e:	bb1b      	cbnz	r3, 8001a88 <_vfiprintf_r+0x1f8>
 8001a40:	9b03      	ldr	r3, [sp, #12]
 8001a42:	3307      	adds	r3, #7
 8001a44:	f023 0307 	bic.w	r3, r3, #7
 8001a48:	3308      	adds	r3, #8
 8001a4a:	9303      	str	r3, [sp, #12]
 8001a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a4e:	443b      	add	r3, r7
 8001a50:	9309      	str	r3, [sp, #36]	; 0x24
 8001a52:	e767      	b.n	8001924 <_vfiprintf_r+0x94>
 8001a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a58:	460c      	mov	r4, r1
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e7a5      	b.n	80019aa <_vfiprintf_r+0x11a>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	3401      	adds	r4, #1
 8001a62:	9305      	str	r3, [sp, #20]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f04f 0c0a 	mov.w	ip, #10
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a70:	3a30      	subs	r2, #48	; 0x30
 8001a72:	2a09      	cmp	r2, #9
 8001a74:	d903      	bls.n	8001a7e <_vfiprintf_r+0x1ee>
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0c5      	beq.n	8001a06 <_vfiprintf_r+0x176>
 8001a7a:	9105      	str	r1, [sp, #20]
 8001a7c:	e7c3      	b.n	8001a06 <_vfiprintf_r+0x176>
 8001a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a82:	4604      	mov	r4, r0
 8001a84:	2301      	movs	r3, #1
 8001a86:	e7f0      	b.n	8001a6a <_vfiprintf_r+0x1da>
 8001a88:	ab03      	add	r3, sp, #12
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	462a      	mov	r2, r5
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <_vfiprintf_r+0x25c>)
 8001a90:	a904      	add	r1, sp, #16
 8001a92:	4630      	mov	r0, r6
 8001a94:	f3af 8000 	nop.w
 8001a98:	4607      	mov	r7, r0
 8001a9a:	1c78      	adds	r0, r7, #1
 8001a9c:	d1d6      	bne.n	8001a4c <_vfiprintf_r+0x1bc>
 8001a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001aa0:	07d9      	lsls	r1, r3, #31
 8001aa2:	d405      	bmi.n	8001ab0 <_vfiprintf_r+0x220>
 8001aa4:	89ab      	ldrh	r3, [r5, #12]
 8001aa6:	059a      	lsls	r2, r3, #22
 8001aa8:	d402      	bmi.n	8001ab0 <_vfiprintf_r+0x220>
 8001aaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001aac:	f7ff fd83 	bl	80015b6 <__retarget_lock_release_recursive>
 8001ab0:	89ab      	ldrh	r3, [r5, #12]
 8001ab2:	065b      	lsls	r3, r3, #25
 8001ab4:	f53f af12 	bmi.w	80018dc <_vfiprintf_r+0x4c>
 8001ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001aba:	e711      	b.n	80018e0 <_vfiprintf_r+0x50>
 8001abc:	ab03      	add	r3, sp, #12
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	462a      	mov	r2, r5
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <_vfiprintf_r+0x25c>)
 8001ac4:	a904      	add	r1, sp, #16
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f000 f880 	bl	8001bcc <_printf_i>
 8001acc:	e7e4      	b.n	8001a98 <_vfiprintf_r+0x208>
 8001ace:	bf00      	nop
 8001ad0:	080020a8 	.word	0x080020a8
 8001ad4:	080020c8 	.word	0x080020c8
 8001ad8:	08002088 	.word	0x08002088
 8001adc:	080020e8 	.word	0x080020e8
 8001ae0:	080020ee 	.word	0x080020ee
 8001ae4:	080020f2 	.word	0x080020f2
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	0800186b 	.word	0x0800186b

08001af0 <_printf_common>:
 8001af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af4:	4616      	mov	r6, r2
 8001af6:	4699      	mov	r9, r3
 8001af8:	688a      	ldr	r2, [r1, #8]
 8001afa:	690b      	ldr	r3, [r1, #16]
 8001afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b00:	4293      	cmp	r3, r2
 8001b02:	bfb8      	it	lt
 8001b04:	4613      	movlt	r3, r2
 8001b06:	6033      	str	r3, [r6, #0]
 8001b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b0c:	4607      	mov	r7, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	b10a      	cbz	r2, 8001b16 <_printf_common+0x26>
 8001b12:	3301      	adds	r3, #1
 8001b14:	6033      	str	r3, [r6, #0]
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	0699      	lsls	r1, r3, #26
 8001b1a:	bf42      	ittt	mi
 8001b1c:	6833      	ldrmi	r3, [r6, #0]
 8001b1e:	3302      	addmi	r3, #2
 8001b20:	6033      	strmi	r3, [r6, #0]
 8001b22:	6825      	ldr	r5, [r4, #0]
 8001b24:	f015 0506 	ands.w	r5, r5, #6
 8001b28:	d106      	bne.n	8001b38 <_printf_common+0x48>
 8001b2a:	f104 0a19 	add.w	sl, r4, #25
 8001b2e:	68e3      	ldr	r3, [r4, #12]
 8001b30:	6832      	ldr	r2, [r6, #0]
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	42ab      	cmp	r3, r5
 8001b36:	dc26      	bgt.n	8001b86 <_printf_common+0x96>
 8001b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b3c:	1e13      	subs	r3, r2, #0
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	bf18      	it	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	0692      	lsls	r2, r2, #26
 8001b46:	d42b      	bmi.n	8001ba0 <_printf_common+0xb0>
 8001b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	4638      	mov	r0, r7
 8001b50:	47c0      	blx	r8
 8001b52:	3001      	adds	r0, #1
 8001b54:	d01e      	beq.n	8001b94 <_printf_common+0xa4>
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	68e5      	ldr	r5, [r4, #12]
 8001b5a:	6832      	ldr	r2, [r6, #0]
 8001b5c:	f003 0306 	and.w	r3, r3, #6
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	bf08      	it	eq
 8001b64:	1aad      	subeq	r5, r5, r2
 8001b66:	68a3      	ldr	r3, [r4, #8]
 8001b68:	6922      	ldr	r2, [r4, #16]
 8001b6a:	bf0c      	ite	eq
 8001b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b70:	2500      	movne	r5, #0
 8001b72:	4293      	cmp	r3, r2
 8001b74:	bfc4      	itt	gt
 8001b76:	1a9b      	subgt	r3, r3, r2
 8001b78:	18ed      	addgt	r5, r5, r3
 8001b7a:	2600      	movs	r6, #0
 8001b7c:	341a      	adds	r4, #26
 8001b7e:	42b5      	cmp	r5, r6
 8001b80:	d11a      	bne.n	8001bb8 <_printf_common+0xc8>
 8001b82:	2000      	movs	r0, #0
 8001b84:	e008      	b.n	8001b98 <_printf_common+0xa8>
 8001b86:	2301      	movs	r3, #1
 8001b88:	4652      	mov	r2, sl
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	4638      	mov	r0, r7
 8001b8e:	47c0      	blx	r8
 8001b90:	3001      	adds	r0, #1
 8001b92:	d103      	bne.n	8001b9c <_printf_common+0xac>
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b9c:	3501      	adds	r5, #1
 8001b9e:	e7c6      	b.n	8001b2e <_printf_common+0x3e>
 8001ba0:	18e1      	adds	r1, r4, r3
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	2030      	movs	r0, #48	; 0x30
 8001ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001baa:	4422      	add	r2, r4
 8001bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	e7c7      	b.n	8001b48 <_printf_common+0x58>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	4622      	mov	r2, r4
 8001bbc:	4649      	mov	r1, r9
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	47c0      	blx	r8
 8001bc2:	3001      	adds	r0, #1
 8001bc4:	d0e6      	beq.n	8001b94 <_printf_common+0xa4>
 8001bc6:	3601      	adds	r6, #1
 8001bc8:	e7d9      	b.n	8001b7e <_printf_common+0x8e>
	...

08001bcc <_printf_i>:
 8001bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bd0:	7e0f      	ldrb	r7, [r1, #24]
 8001bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001bd4:	2f78      	cmp	r7, #120	; 0x78
 8001bd6:	4691      	mov	r9, r2
 8001bd8:	4680      	mov	r8, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	469a      	mov	sl, r3
 8001bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001be2:	d807      	bhi.n	8001bf4 <_printf_i+0x28>
 8001be4:	2f62      	cmp	r7, #98	; 0x62
 8001be6:	d80a      	bhi.n	8001bfe <_printf_i+0x32>
 8001be8:	2f00      	cmp	r7, #0
 8001bea:	f000 80d8 	beq.w	8001d9e <_printf_i+0x1d2>
 8001bee:	2f58      	cmp	r7, #88	; 0x58
 8001bf0:	f000 80a3 	beq.w	8001d3a <_printf_i+0x16e>
 8001bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001bfc:	e03a      	b.n	8001c74 <_printf_i+0xa8>
 8001bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c02:	2b15      	cmp	r3, #21
 8001c04:	d8f6      	bhi.n	8001bf4 <_printf_i+0x28>
 8001c06:	a101      	add	r1, pc, #4	; (adr r1, 8001c0c <_printf_i+0x40>)
 8001c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c0c:	08001c65 	.word	0x08001c65
 8001c10:	08001c79 	.word	0x08001c79
 8001c14:	08001bf5 	.word	0x08001bf5
 8001c18:	08001bf5 	.word	0x08001bf5
 8001c1c:	08001bf5 	.word	0x08001bf5
 8001c20:	08001bf5 	.word	0x08001bf5
 8001c24:	08001c79 	.word	0x08001c79
 8001c28:	08001bf5 	.word	0x08001bf5
 8001c2c:	08001bf5 	.word	0x08001bf5
 8001c30:	08001bf5 	.word	0x08001bf5
 8001c34:	08001bf5 	.word	0x08001bf5
 8001c38:	08001d85 	.word	0x08001d85
 8001c3c:	08001ca9 	.word	0x08001ca9
 8001c40:	08001d67 	.word	0x08001d67
 8001c44:	08001bf5 	.word	0x08001bf5
 8001c48:	08001bf5 	.word	0x08001bf5
 8001c4c:	08001da7 	.word	0x08001da7
 8001c50:	08001bf5 	.word	0x08001bf5
 8001c54:	08001ca9 	.word	0x08001ca9
 8001c58:	08001bf5 	.word	0x08001bf5
 8001c5c:	08001bf5 	.word	0x08001bf5
 8001c60:	08001d6f 	.word	0x08001d6f
 8001c64:	682b      	ldr	r3, [r5, #0]
 8001c66:	1d1a      	adds	r2, r3, #4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	602a      	str	r2, [r5, #0]
 8001c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0a3      	b.n	8001dc0 <_printf_i+0x1f4>
 8001c78:	6820      	ldr	r0, [r4, #0]
 8001c7a:	6829      	ldr	r1, [r5, #0]
 8001c7c:	0606      	lsls	r6, r0, #24
 8001c7e:	f101 0304 	add.w	r3, r1, #4
 8001c82:	d50a      	bpl.n	8001c9a <_printf_i+0xce>
 8001c84:	680e      	ldr	r6, [r1, #0]
 8001c86:	602b      	str	r3, [r5, #0]
 8001c88:	2e00      	cmp	r6, #0
 8001c8a:	da03      	bge.n	8001c94 <_printf_i+0xc8>
 8001c8c:	232d      	movs	r3, #45	; 0x2d
 8001c8e:	4276      	negs	r6, r6
 8001c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c94:	485e      	ldr	r0, [pc, #376]	; (8001e10 <_printf_i+0x244>)
 8001c96:	230a      	movs	r3, #10
 8001c98:	e019      	b.n	8001cce <_printf_i+0x102>
 8001c9a:	680e      	ldr	r6, [r1, #0]
 8001c9c:	602b      	str	r3, [r5, #0]
 8001c9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ca2:	bf18      	it	ne
 8001ca4:	b236      	sxthne	r6, r6
 8001ca6:	e7ef      	b.n	8001c88 <_printf_i+0xbc>
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	1d19      	adds	r1, r3, #4
 8001cae:	6029      	str	r1, [r5, #0]
 8001cb0:	0601      	lsls	r1, r0, #24
 8001cb2:	d501      	bpl.n	8001cb8 <_printf_i+0xec>
 8001cb4:	681e      	ldr	r6, [r3, #0]
 8001cb6:	e002      	b.n	8001cbe <_printf_i+0xf2>
 8001cb8:	0646      	lsls	r6, r0, #25
 8001cba:	d5fb      	bpl.n	8001cb4 <_printf_i+0xe8>
 8001cbc:	881e      	ldrh	r6, [r3, #0]
 8001cbe:	4854      	ldr	r0, [pc, #336]	; (8001e10 <_printf_i+0x244>)
 8001cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2308      	moveq	r3, #8
 8001cc6:	230a      	movne	r3, #10
 8001cc8:	2100      	movs	r1, #0
 8001cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cce:	6865      	ldr	r5, [r4, #4]
 8001cd0:	60a5      	str	r5, [r4, #8]
 8001cd2:	2d00      	cmp	r5, #0
 8001cd4:	bfa2      	ittt	ge
 8001cd6:	6821      	ldrge	r1, [r4, #0]
 8001cd8:	f021 0104 	bicge.w	r1, r1, #4
 8001cdc:	6021      	strge	r1, [r4, #0]
 8001cde:	b90e      	cbnz	r6, 8001ce4 <_printf_i+0x118>
 8001ce0:	2d00      	cmp	r5, #0
 8001ce2:	d04d      	beq.n	8001d80 <_printf_i+0x1b4>
 8001ce4:	4615      	mov	r5, r2
 8001ce6:	fbb6 f1f3 	udiv	r1, r6, r3
 8001cea:	fb03 6711 	mls	r7, r3, r1, r6
 8001cee:	5dc7      	ldrb	r7, [r0, r7]
 8001cf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001cf4:	4637      	mov	r7, r6
 8001cf6:	42bb      	cmp	r3, r7
 8001cf8:	460e      	mov	r6, r1
 8001cfa:	d9f4      	bls.n	8001ce6 <_printf_i+0x11a>
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d10b      	bne.n	8001d18 <_printf_i+0x14c>
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	07de      	lsls	r6, r3, #31
 8001d04:	d508      	bpl.n	8001d18 <_printf_i+0x14c>
 8001d06:	6923      	ldr	r3, [r4, #16]
 8001d08:	6861      	ldr	r1, [r4, #4]
 8001d0a:	4299      	cmp	r1, r3
 8001d0c:	bfde      	ittt	le
 8001d0e:	2330      	movle	r3, #48	; 0x30
 8001d10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d18:	1b52      	subs	r2, r2, r5
 8001d1a:	6122      	str	r2, [r4, #16]
 8001d1c:	f8cd a000 	str.w	sl, [sp]
 8001d20:	464b      	mov	r3, r9
 8001d22:	aa03      	add	r2, sp, #12
 8001d24:	4621      	mov	r1, r4
 8001d26:	4640      	mov	r0, r8
 8001d28:	f7ff fee2 	bl	8001af0 <_printf_common>
 8001d2c:	3001      	adds	r0, #1
 8001d2e:	d14c      	bne.n	8001dca <_printf_i+0x1fe>
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	b004      	add	sp, #16
 8001d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d3a:	4835      	ldr	r0, [pc, #212]	; (8001e10 <_printf_i+0x244>)
 8001d3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001d40:	6829      	ldr	r1, [r5, #0]
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d48:	6029      	str	r1, [r5, #0]
 8001d4a:	061d      	lsls	r5, r3, #24
 8001d4c:	d514      	bpl.n	8001d78 <_printf_i+0x1ac>
 8001d4e:	07df      	lsls	r7, r3, #31
 8001d50:	bf44      	itt	mi
 8001d52:	f043 0320 	orrmi.w	r3, r3, #32
 8001d56:	6023      	strmi	r3, [r4, #0]
 8001d58:	b91e      	cbnz	r6, 8001d62 <_printf_i+0x196>
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	f023 0320 	bic.w	r3, r3, #32
 8001d60:	6023      	str	r3, [r4, #0]
 8001d62:	2310      	movs	r3, #16
 8001d64:	e7b0      	b.n	8001cc8 <_printf_i+0xfc>
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	2378      	movs	r3, #120	; 0x78
 8001d70:	4828      	ldr	r0, [pc, #160]	; (8001e14 <_printf_i+0x248>)
 8001d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d76:	e7e3      	b.n	8001d40 <_printf_i+0x174>
 8001d78:	0659      	lsls	r1, r3, #25
 8001d7a:	bf48      	it	mi
 8001d7c:	b2b6      	uxthmi	r6, r6
 8001d7e:	e7e6      	b.n	8001d4e <_printf_i+0x182>
 8001d80:	4615      	mov	r5, r2
 8001d82:	e7bb      	b.n	8001cfc <_printf_i+0x130>
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	6826      	ldr	r6, [r4, #0]
 8001d88:	6961      	ldr	r1, [r4, #20]
 8001d8a:	1d18      	adds	r0, r3, #4
 8001d8c:	6028      	str	r0, [r5, #0]
 8001d8e:	0635      	lsls	r5, r6, #24
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	d501      	bpl.n	8001d98 <_printf_i+0x1cc>
 8001d94:	6019      	str	r1, [r3, #0]
 8001d96:	e002      	b.n	8001d9e <_printf_i+0x1d2>
 8001d98:	0670      	lsls	r0, r6, #25
 8001d9a:	d5fb      	bpl.n	8001d94 <_printf_i+0x1c8>
 8001d9c:	8019      	strh	r1, [r3, #0]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6123      	str	r3, [r4, #16]
 8001da2:	4615      	mov	r5, r2
 8001da4:	e7ba      	b.n	8001d1c <_printf_i+0x150>
 8001da6:	682b      	ldr	r3, [r5, #0]
 8001da8:	1d1a      	adds	r2, r3, #4
 8001daa:	602a      	str	r2, [r5, #0]
 8001dac:	681d      	ldr	r5, [r3, #0]
 8001dae:	6862      	ldr	r2, [r4, #4]
 8001db0:	2100      	movs	r1, #0
 8001db2:	4628      	mov	r0, r5
 8001db4:	f7fe fa1c 	bl	80001f0 <memchr>
 8001db8:	b108      	cbz	r0, 8001dbe <_printf_i+0x1f2>
 8001dba:	1b40      	subs	r0, r0, r5
 8001dbc:	6060      	str	r0, [r4, #4]
 8001dbe:	6863      	ldr	r3, [r4, #4]
 8001dc0:	6123      	str	r3, [r4, #16]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dc8:	e7a8      	b.n	8001d1c <_printf_i+0x150>
 8001dca:	6923      	ldr	r3, [r4, #16]
 8001dcc:	462a      	mov	r2, r5
 8001dce:	4649      	mov	r1, r9
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	47d0      	blx	sl
 8001dd4:	3001      	adds	r0, #1
 8001dd6:	d0ab      	beq.n	8001d30 <_printf_i+0x164>
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	079b      	lsls	r3, r3, #30
 8001ddc:	d413      	bmi.n	8001e06 <_printf_i+0x23a>
 8001dde:	68e0      	ldr	r0, [r4, #12]
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	4298      	cmp	r0, r3
 8001de4:	bfb8      	it	lt
 8001de6:	4618      	movlt	r0, r3
 8001de8:	e7a4      	b.n	8001d34 <_printf_i+0x168>
 8001dea:	2301      	movs	r3, #1
 8001dec:	4632      	mov	r2, r6
 8001dee:	4649      	mov	r1, r9
 8001df0:	4640      	mov	r0, r8
 8001df2:	47d0      	blx	sl
 8001df4:	3001      	adds	r0, #1
 8001df6:	d09b      	beq.n	8001d30 <_printf_i+0x164>
 8001df8:	3501      	adds	r5, #1
 8001dfa:	68e3      	ldr	r3, [r4, #12]
 8001dfc:	9903      	ldr	r1, [sp, #12]
 8001dfe:	1a5b      	subs	r3, r3, r1
 8001e00:	42ab      	cmp	r3, r5
 8001e02:	dcf2      	bgt.n	8001dea <_printf_i+0x21e>
 8001e04:	e7eb      	b.n	8001dde <_printf_i+0x212>
 8001e06:	2500      	movs	r5, #0
 8001e08:	f104 0619 	add.w	r6, r4, #25
 8001e0c:	e7f5      	b.n	8001dfa <_printf_i+0x22e>
 8001e0e:	bf00      	nop
 8001e10:	080020f9 	.word	0x080020f9
 8001e14:	0800210a 	.word	0x0800210a

08001e18 <_sbrk_r>:
 8001e18:	b538      	push	{r3, r4, r5, lr}
 8001e1a:	4d06      	ldr	r5, [pc, #24]	; (8001e34 <_sbrk_r+0x1c>)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	4604      	mov	r4, r0
 8001e20:	4608      	mov	r0, r1
 8001e22:	602b      	str	r3, [r5, #0]
 8001e24:	f000 f8e8 	bl	8001ff8 <_sbrk>
 8001e28:	1c43      	adds	r3, r0, #1
 8001e2a:	d102      	bne.n	8001e32 <_sbrk_r+0x1a>
 8001e2c:	682b      	ldr	r3, [r5, #0]
 8001e2e:	b103      	cbz	r3, 8001e32 <_sbrk_r+0x1a>
 8001e30:	6023      	str	r3, [r4, #0]
 8001e32:	bd38      	pop	{r3, r4, r5, pc}
 8001e34:	200001d0 	.word	0x200001d0

08001e38 <__sread>:
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e40:	f000 f8a0 	bl	8001f84 <_read_r>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	bfab      	itete	ge
 8001e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8001e4c:	181b      	addge	r3, r3, r0
 8001e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e52:	bfac      	ite	ge
 8001e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e56:	81a3      	strhlt	r3, [r4, #12]
 8001e58:	bd10      	pop	{r4, pc}

08001e5a <__swrite>:
 8001e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e5e:	461f      	mov	r7, r3
 8001e60:	898b      	ldrh	r3, [r1, #12]
 8001e62:	05db      	lsls	r3, r3, #23
 8001e64:	4605      	mov	r5, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	4616      	mov	r6, r2
 8001e6a:	d505      	bpl.n	8001e78 <__swrite+0x1e>
 8001e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e70:	2302      	movs	r3, #2
 8001e72:	2200      	movs	r2, #0
 8001e74:	f000 f868 	bl	8001f48 <_lseek_r>
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e82:	81a3      	strh	r3, [r4, #12]
 8001e84:	4632      	mov	r2, r6
 8001e86:	463b      	mov	r3, r7
 8001e88:	4628      	mov	r0, r5
 8001e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8e:	f000 b817 	b.w	8001ec0 <_write_r>

08001e92 <__sseek>:
 8001e92:	b510      	push	{r4, lr}
 8001e94:	460c      	mov	r4, r1
 8001e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e9a:	f000 f855 	bl	8001f48 <_lseek_r>
 8001e9e:	1c43      	adds	r3, r0, #1
 8001ea0:	89a3      	ldrh	r3, [r4, #12]
 8001ea2:	bf15      	itete	ne
 8001ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001eae:	81a3      	strheq	r3, [r4, #12]
 8001eb0:	bf18      	it	ne
 8001eb2:	81a3      	strhne	r3, [r4, #12]
 8001eb4:	bd10      	pop	{r4, pc}

08001eb6 <__sclose>:
 8001eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eba:	f000 b813 	b.w	8001ee4 <_close_r>
	...

08001ec0 <_write_r>:
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4d07      	ldr	r5, [pc, #28]	; (8001ee0 <_write_r+0x20>)
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	602a      	str	r2, [r5, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f000 f8a0 	bl	8002014 <_write>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	d102      	bne.n	8001ede <_write_r+0x1e>
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	b103      	cbz	r3, 8001ede <_write_r+0x1e>
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
 8001ee0:	200001d0 	.word	0x200001d0

08001ee4 <_close_r>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4d06      	ldr	r5, [pc, #24]	; (8001f00 <_close_r+0x1c>)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4604      	mov	r4, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	602b      	str	r3, [r5, #0]
 8001ef0:	f000 f85a 	bl	8001fa8 <_close>
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d102      	bne.n	8001efe <_close_r+0x1a>
 8001ef8:	682b      	ldr	r3, [r5, #0]
 8001efa:	b103      	cbz	r3, 8001efe <_close_r+0x1a>
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
 8001f00:	200001d0 	.word	0x200001d0

08001f04 <_fstat_r>:
 8001f04:	b538      	push	{r3, r4, r5, lr}
 8001f06:	4d07      	ldr	r5, [pc, #28]	; (8001f24 <_fstat_r+0x20>)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	602b      	str	r3, [r5, #0]
 8001f12:	f000 f851 	bl	8001fb8 <_fstat>
 8001f16:	1c43      	adds	r3, r0, #1
 8001f18:	d102      	bne.n	8001f20 <_fstat_r+0x1c>
 8001f1a:	682b      	ldr	r3, [r5, #0]
 8001f1c:	b103      	cbz	r3, 8001f20 <_fstat_r+0x1c>
 8001f1e:	6023      	str	r3, [r4, #0]
 8001f20:	bd38      	pop	{r3, r4, r5, pc}
 8001f22:	bf00      	nop
 8001f24:	200001d0 	.word	0x200001d0

08001f28 <_isatty_r>:
 8001f28:	b538      	push	{r3, r4, r5, lr}
 8001f2a:	4d06      	ldr	r5, [pc, #24]	; (8001f44 <_isatty_r+0x1c>)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4604      	mov	r4, r0
 8001f30:	4608      	mov	r0, r1
 8001f32:	602b      	str	r3, [r5, #0]
 8001f34:	f000 f848 	bl	8001fc8 <_isatty>
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d102      	bne.n	8001f42 <_isatty_r+0x1a>
 8001f3c:	682b      	ldr	r3, [r5, #0]
 8001f3e:	b103      	cbz	r3, 8001f42 <_isatty_r+0x1a>
 8001f40:	6023      	str	r3, [r4, #0]
 8001f42:	bd38      	pop	{r3, r4, r5, pc}
 8001f44:	200001d0 	.word	0x200001d0

08001f48 <_lseek_r>:
 8001f48:	b538      	push	{r3, r4, r5, lr}
 8001f4a:	4d07      	ldr	r5, [pc, #28]	; (8001f68 <_lseek_r+0x20>)
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	4608      	mov	r0, r1
 8001f50:	4611      	mov	r1, r2
 8001f52:	2200      	movs	r2, #0
 8001f54:	602a      	str	r2, [r5, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	f000 f83e 	bl	8001fd8 <_lseek>
 8001f5c:	1c43      	adds	r3, r0, #1
 8001f5e:	d102      	bne.n	8001f66 <_lseek_r+0x1e>
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	b103      	cbz	r3, 8001f66 <_lseek_r+0x1e>
 8001f64:	6023      	str	r3, [r4, #0]
 8001f66:	bd38      	pop	{r3, r4, r5, pc}
 8001f68:	200001d0 	.word	0x200001d0

08001f6c <__malloc_lock>:
 8001f6c:	4801      	ldr	r0, [pc, #4]	; (8001f74 <__malloc_lock+0x8>)
 8001f6e:	f7ff bb21 	b.w	80015b4 <__retarget_lock_acquire_recursive>
 8001f72:	bf00      	nop
 8001f74:	200001c4 	.word	0x200001c4

08001f78 <__malloc_unlock>:
 8001f78:	4801      	ldr	r0, [pc, #4]	; (8001f80 <__malloc_unlock+0x8>)
 8001f7a:	f7ff bb1c 	b.w	80015b6 <__retarget_lock_release_recursive>
 8001f7e:	bf00      	nop
 8001f80:	200001c4 	.word	0x200001c4

08001f84 <_read_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4d07      	ldr	r5, [pc, #28]	; (8001fa4 <_read_r+0x20>)
 8001f88:	4604      	mov	r4, r0
 8001f8a:	4608      	mov	r0, r1
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	2200      	movs	r2, #0
 8001f90:	602a      	str	r2, [r5, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f000 f828 	bl	8001fe8 <_read>
 8001f98:	1c43      	adds	r3, r0, #1
 8001f9a:	d102      	bne.n	8001fa2 <_read_r+0x1e>
 8001f9c:	682b      	ldr	r3, [r5, #0]
 8001f9e:	b103      	cbz	r3, 8001fa2 <_read_r+0x1e>
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
 8001fa4:	200001d0 	.word	0x200001d0

08001fa8 <_close>:
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <_close+0xc>)
 8001faa:	2258      	movs	r2, #88	; 0x58
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	4770      	bx	lr
 8001fb4:	200001d0 	.word	0x200001d0

08001fb8 <_fstat>:
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <_fstat+0xc>)
 8001fba:	2258      	movs	r2, #88	; 0x58
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc2:	4770      	bx	lr
 8001fc4:	200001d0 	.word	0x200001d0

08001fc8 <_isatty>:
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <_isatty+0xc>)
 8001fca:	2258      	movs	r2, #88	; 0x58
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	2000      	movs	r0, #0
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200001d0 	.word	0x200001d0

08001fd8 <_lseek>:
 8001fd8:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <_lseek+0xc>)
 8001fda:	2258      	movs	r2, #88	; 0x58
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe2:	4770      	bx	lr
 8001fe4:	200001d0 	.word	0x200001d0

08001fe8 <_read>:
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <_read+0xc>)
 8001fea:	2258      	movs	r2, #88	; 0x58
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff2:	4770      	bx	lr
 8001ff4:	200001d0 	.word	0x200001d0

08001ff8 <_sbrk>:
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <_sbrk+0x14>)
 8001ffa:	6811      	ldr	r1, [r2, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b909      	cbnz	r1, 8002004 <_sbrk+0xc>
 8002000:	4903      	ldr	r1, [pc, #12]	; (8002010 <_sbrk+0x18>)
 8002002:	6011      	str	r1, [r2, #0]
 8002004:	6810      	ldr	r0, [r2, #0]
 8002006:	4403      	add	r3, r0
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4770      	bx	lr
 800200c:	200001d4 	.word	0x200001d4
 8002010:	200001d8 	.word	0x200001d8

08002014 <_write>:
 8002014:	4b02      	ldr	r3, [pc, #8]	; (8002020 <_write+0xc>)
 8002016:	2258      	movs	r2, #88	; 0x58
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f04f 30ff 	mov.w	r0, #4294967295
 800201e:	4770      	bx	lr
 8002020:	200001d0 	.word	0x200001d0

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	bf00      	nop
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
