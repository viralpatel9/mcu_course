
stm32f4xx_drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800215c  0800215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002204  08002204  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002204  08002204  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002204  08002204  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002208  08002208  00012208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800220c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000024c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b0  200002b0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001754  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000539  00000000  00000000  000217e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00021d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000178  00000000  00000000  00021ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002993  00000000  00000000  00022048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b81  00000000  00000000  000249db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a390  00000000  00000000  0002655c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000308ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f08  00000000  00000000  0003093c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  00031844  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  000318e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002144 	.word	0x08002144

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002144 	.word	0x08002144

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <SPI2_GPIOInits+0x58>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800029e:	2305      	movs	r3, #5
 80002a0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ae:	230d      	movs	r3, #13
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fa25 	bl	8000704 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002ba:	230f      	movs	r3, #15
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fa1f 	bl	8000704 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002c6:	230e      	movs	r3, #14
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fa19 	bl	8000704 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002d2:	230c      	movs	r3, #12
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fa13 	bl	8000704 <GPIO_Init>


}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020400 	.word	0x40020400

080002ec <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <SPI2_Inits+0x40>)
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <SPI2_Inits+0x44>)
 80002f4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <SPI2_Inits+0x40>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <SPI2_Inits+0x40>)
 80002fe:	2201      	movs	r2, #1
 8000300:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <SPI2_Inits+0x40>)
 8000304:	2204      	movs	r2, #4
 8000306:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <SPI2_Inits+0x40>)
 800030a:	2200      	movs	r2, #0
 800030c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <SPI2_Inits+0x40>)
 8000310:	2200      	movs	r2, #0
 8000312:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <SPI2_Inits+0x40>)
 8000316:	2200      	movs	r2, #0
 8000318:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <SPI2_Inits+0x40>)
 800031c:	2200      	movs	r2, #0
 800031e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <SPI2_Inits+0x40>)
 8000322:	f000 fc95 	bl	8000c50 <SPI_Init>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000080 	.word	0x20000080
 8000330:	40003800 	.word	0x40003800

08000334 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	220c      	movs	r2, #12
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f000 ff33 	bl	80011ac <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <Slave_GPIO_InterruptPinInit+0x48>)
 8000348:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800034a:	2306      	movs	r3, #6
 800034c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800034e:	2304      	movs	r3, #4
 8000350:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000352:	2300      	movs	r3, #0
 8000354:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000356:	2301      	movs	r3, #1
 8000358:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f9d1 	bl	8000704 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15);
 8000362:	210f      	movs	r1, #15
 8000364:	2017      	movs	r0, #23
 8000366:	f000 fbf3 	bl	8000b50 <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(IRQ_NO_EXTI9_5,ENABLE);
 800036a:	2101      	movs	r1, #1
 800036c:	2017      	movs	r0, #23
 800036e:	f000 fb6b 	bl	8000a48 <GPIO_IRQConfig>

}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40020c00 	.word	0x40020c00

08000380 <main>:


int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000386:	23ff      	movs	r3, #255	; 0xff
 8000388:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800038a:	f7ff ffd3 	bl	8000334 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800038e:	f7ff ff7f 	bl	8000290 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000392:	f7ff ffab 	bl	80002ec <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000396:	2101      	movs	r1, #1
 8000398:	4824      	ldr	r0, [pc, #144]	; (800042c <main+0xac>)
 800039a:	f000 fce2 	bl	8000d62 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 800039e:	2101      	movs	r1, #1
 80003a0:	2024      	movs	r0, #36	; 0x24
 80003a2:	f000 fcf9 	bl	8000d98 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <main+0xb0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 80003ac:	bf00      	nop
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <main+0xb4>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0fa      	beq.n	80003ae <main+0x2e>

		GPIO_IRQConfig(IRQ_NO_EXTI9_5,DISABLE);
 80003b8:	2100      	movs	r1, #0
 80003ba:	2017      	movs	r0, #23
 80003bc:	f000 fb44 	bl	8000a48 <GPIO_IRQConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003c0:	2101      	movs	r1, #1
 80003c2:	481a      	ldr	r0, [pc, #104]	; (800042c <main+0xac>)
 80003c4:	f000 fcb2 	bl	8000d2c <SPI_PeripheralControl>


		while(!rcvStop)
 80003c8:	e012      	b.n	80003f0 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_Busy_IN_TX);
 80003ca:	bf00      	nop
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	4819      	ldr	r0, [pc, #100]	; (8000438 <main+0xb8>)
 80003d4:	f000 fd64 	bl	8000ea0 <SPI_SendDataIT>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d0f6      	beq.n	80003cc <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_Busy_IN_RX );
 80003de:	bf00      	nop
 80003e0:	2201      	movs	r2, #1
 80003e2:	4916      	ldr	r1, [pc, #88]	; (800043c <main+0xbc>)
 80003e4:	4814      	ldr	r0, [pc, #80]	; (8000438 <main+0xb8>)
 80003e6:	f000 fd7e 	bl	8000ee6 <SPI_ReceiveDataIT>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d0f7      	beq.n	80003e0 <main+0x60>
		while(!rcvStop)
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <main+0xb0>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0e7      	beq.n	80003ca <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80003fa:	bf00      	nop
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <main+0xac>)
 8000400:	f000 fc81 	bl	8000d06 <SPI_GetFlagStatus>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1f8      	bne.n	80003fc <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800040a:	2100      	movs	r1, #0
 800040c:	4807      	ldr	r0, [pc, #28]	; (800042c <main+0xac>)
 800040e:	f000 fc8d 	bl	8000d2c <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 8000412:	490b      	ldr	r1, [pc, #44]	; (8000440 <main+0xc0>)
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <main+0xc4>)
 8000416:	f000 fed1 	bl	80011bc <iprintf>

		dataAvailable = 0;
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <main+0xb4>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]

		GPIO_IRQConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000420:	2101      	movs	r1, #1
 8000422:	2017      	movs	r0, #23
 8000424:	f000 fb10 	bl	8000a48 <GPIO_IRQConfig>
		rcvStop = 0;
 8000428:	e7bd      	b.n	80003a6 <main+0x26>
 800042a:	bf00      	nop
 800042c:	40003800 	.word	0x40003800
 8000430:	20000295 	.word	0x20000295
 8000434:	20000296 	.word	0x20000296
 8000438:	20000080 	.word	0x20000080
 800043c:	20000294 	.word	0x20000294
 8000440:	200000a0 	.word	0x200000a0
 8000444:	0800215c 	.word	0x0800215c

08000448 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 800044c:	4802      	ldr	r0, [pc, #8]	; (8000458 <SPI2_IRQHandler+0x10>)
 800044e:	f000 fd6d 	bl	8000f2c <SPI_IRQHandling>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000080 	.word	0x20000080

0800045c <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d11f      	bne.n	80004ae <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	4910      	ldr	r1, [pc, #64]	; (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 8000476:	600a      	str	r2, [r1, #0]
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <SPI_ApplicationEventCallback+0x60>)
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	b2d1      	uxtb	r1, r2
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <SPI_ApplicationEventCallback+0x64>)
 8000480:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <SPI_ApplicationEventCallback+0x60>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b00      	cmp	r3, #0
 800048a:	d004      	beq.n	8000496 <SPI_ApplicationEventCallback+0x3a>
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000494:	d10b      	bne.n	80004ae <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <SPI_ApplicationEventCallback+0x68>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <SPI_ApplicationEventCallback+0x64>)
 80004a4:	2100      	movs	r1, #0
 80004a6:	54d1      	strb	r1, [r2, r3]
					i = 0;
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
				}
	}

}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000298 	.word	0x20000298
 80004bc:	20000294 	.word	0x20000294
 80004c0:	200000a0 	.word	0x200000a0
 80004c4:	20000295 	.word	0x20000295

080004c8 <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80004cc:	2006      	movs	r0, #6
 80004ce:	f000 fb69 	bl	8000ba4 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004d2:	4b02      	ldr	r3, [pc, #8]	; (80004dc <EXTI9_5_IRQHandler+0x14>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000296 	.word	0x20000296

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	; (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	; (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f000 fe29 	bl	8001164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff ff35 	bl	8000380 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000524:	0800220c 	.word	0x0800220c
  ldr r2, =_sbss
 8000528:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800052c:	200002b0 	.word	0x200002b0

08000530 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC_IRQHandler>
	...

08000534 <GPIO_PeriClockControl>:
 * @Note			-  None
 *
 *
 *************************************** */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d162      	bne.n	800060c <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a64      	ldr	r2, [pc, #400]	; (80006dc <GPIO_PeriClockControl+0x1a8>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d106      	bne.n	800055c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800054e:	4b64      	ldr	r3, [pc, #400]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a63      	ldr	r2, [pc, #396]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 800055a:	e0b9      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a61      	ldr	r2, [pc, #388]	; (80006e4 <GPIO_PeriClockControl+0x1b0>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d106      	bne.n	8000572 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000564:	4b5e      	ldr	r3, [pc, #376]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	4a5d      	ldr	r2, [pc, #372]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 800056a:	f043 0302 	orr.w	r3, r3, #2
 800056e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000570:	e0ae      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a5c      	ldr	r2, [pc, #368]	; (80006e8 <GPIO_PeriClockControl+0x1b4>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800057a:	4b59      	ldr	r3, [pc, #356]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a58      	ldr	r2, [pc, #352]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000586:	e0a3      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a58      	ldr	r2, [pc, #352]	; (80006ec <GPIO_PeriClockControl+0x1b8>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d106      	bne.n	800059e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000590:	4b53      	ldr	r3, [pc, #332]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4a52      	ldr	r2, [pc, #328]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000596:	f043 0308 	orr.w	r3, r3, #8
 800059a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059c:	e098      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a53      	ldr	r2, [pc, #332]	; (80006f0 <GPIO_PeriClockControl+0x1bc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d106      	bne.n	80005b4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005a6:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a4d      	ldr	r2, [pc, #308]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b2:	e08d      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a4f      	ldr	r2, [pc, #316]	; (80006f4 <GPIO_PeriClockControl+0x1c0>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d106      	bne.n	80005ca <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005bc:	4b48      	ldr	r3, [pc, #288]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	4a47      	ldr	r2, [pc, #284]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c8:	e082      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a4a      	ldr	r2, [pc, #296]	; (80006f8 <GPIO_PeriClockControl+0x1c4>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d106      	bne.n	80005e0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005d2:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a42      	ldr	r2, [pc, #264]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80005d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005de:	e077      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a46      	ldr	r2, [pc, #280]	; (80006fc <GPIO_PeriClockControl+0x1c8>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d106      	bne.n	80005f6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80005ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f4:	e06c      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a41      	ldr	r2, [pc, #260]	; (8000700 <GPIO_PeriClockControl+0x1cc>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d168      	bne.n	80006d0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a37      	ldr	r2, [pc, #220]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060a:	e061      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a33      	ldr	r2, [pc, #204]	; (80006dc <GPIO_PeriClockControl+0x1a8>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d106      	bne.n	8000622 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a31      	ldr	r2, [pc, #196]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 800061a:	f023 0301 	bic.w	r3, r3, #1
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000620:	e056      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <GPIO_PeriClockControl+0x1b0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000630:	f023 0302 	bic.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000636:	e04b      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <GPIO_PeriClockControl+0x1b4>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000646:	f023 0304 	bic.w	r3, r3, #4
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800064c:	e040      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <GPIO_PeriClockControl+0x1b8>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 800065c:	f023 0308 	bic.w	r3, r3, #8
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000662:	e035      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <GPIO_PeriClockControl+0x1bc>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d106      	bne.n	800067a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000672:	f023 0310 	bic.w	r3, r3, #16
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000678:	e02a      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <GPIO_PeriClockControl+0x1c0>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d106      	bne.n	8000690 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 8000688:	f023 0320 	bic.w	r3, r3, #32
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800068e:	e01f      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <GPIO_PeriClockControl+0x1c4>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d106      	bne.n	80006a6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 800069e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006a4:	e014      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <GPIO_PeriClockControl+0x1c8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d106      	bne.n	80006bc <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80006b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ba:	e009      	b.n	80006d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <GPIO_PeriClockControl+0x1cc>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d105      	bne.n	80006d0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <GPIO_PeriClockControl+0x1ac>)
 80006ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40021400 	.word	0x40021400
 80006f8:	40021800 	.word	0x40021800
 80006fc:	40021c00 	.word	0x40021c00
 8000700:	40022000 	.word	0x40022000

08000704 <GPIO_Init>:

/*
 * 	Init and Deint of the peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2101      	movs	r1, #1
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff0c 	bl	8000534 <GPIO_PeriClockControl>

	// Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d81f      	bhi.n	8000764 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000734:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // cleraing off the pin number before using it
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	4619      	mov	r1, r3
 8000742:	2303      	movs	r3, #3
 8000744:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 8000746:	43db      	mvns	r3, r3
 8000748:	4619      	mov	r1, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	400a      	ands	r2, r1
 8000750:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6819      	ldr	r1, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	430a      	orrs	r2, r1
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	e0ca      	b.n	80008fa <GPIO_Init+0x1f6>

	}
	else
	{
		// this is the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	2b04      	cmp	r3, #4
 800076a:	d117      	bne.n	800079c <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076c:	4b4a      	ldr	r3, [pc, #296]	; (8000898 <GPIO_Init+0x194>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7912      	ldrb	r2, [r2, #4]
 8000774:	4611      	mov	r1, r2
 8000776:	2201      	movs	r2, #1
 8000778:	408a      	lsls	r2, r1
 800077a:	4611      	mov	r1, r2
 800077c:	4a46      	ldr	r2, [pc, #280]	; (8000898 <GPIO_Init+0x194>)
 800077e:	430b      	orrs	r3, r1
 8000780:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000782:	4b45      	ldr	r3, [pc, #276]	; (8000898 <GPIO_Init+0x194>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	7912      	ldrb	r2, [r2, #4]
 800078a:	4611      	mov	r1, r2
 800078c:	2201      	movs	r2, #1
 800078e:	408a      	lsls	r2, r1
 8000790:	43d2      	mvns	r2, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4a40      	ldr	r2, [pc, #256]	; (8000898 <GPIO_Init+0x194>)
 8000796:	400b      	ands	r3, r1
 8000798:	6093      	str	r3, [r2, #8]
 800079a:	e035      	b.n	8000808 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	2b05      	cmp	r3, #5
 80007a2:	d117      	bne.n	80007d4 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a4:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <GPIO_Init+0x194>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	7912      	ldrb	r2, [r2, #4]
 80007ac:	4611      	mov	r1, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	408a      	lsls	r2, r1
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a38      	ldr	r2, [pc, #224]	; (8000898 <GPIO_Init+0x194>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ba:	4b37      	ldr	r3, [pc, #220]	; (8000898 <GPIO_Init+0x194>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	7912      	ldrb	r2, [r2, #4]
 80007c2:	4611      	mov	r1, r2
 80007c4:	2201      	movs	r2, #1
 80007c6:	408a      	lsls	r2, r1
 80007c8:	43d2      	mvns	r2, r2
 80007ca:	4611      	mov	r1, r2
 80007cc:	4a32      	ldr	r2, [pc, #200]	; (8000898 <GPIO_Init+0x194>)
 80007ce:	400b      	ands	r3, r1
 80007d0:	60d3      	str	r3, [r2, #12]
 80007d2:	e019      	b.n	8000808 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	2b06      	cmp	r3, #6
 80007da:	d115      	bne.n	8000808 <GPIO_Init+0x104>
		{
			//1. Configure bothh RTSR and FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <GPIO_Init+0x194>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	7912      	ldrb	r2, [r2, #4]
 80007e4:	4611      	mov	r1, r2
 80007e6:	2201      	movs	r2, #1
 80007e8:	408a      	lsls	r2, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <GPIO_Init+0x194>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <GPIO_Init+0x194>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7912      	ldrb	r2, [r2, #4]
 80007fa:	4611      	mov	r1, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	408a      	lsls	r2, r1
 8000800:	4611      	mov	r1, r2
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <GPIO_Init+0x194>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6093      	str	r3, [r2, #8]

		}
		//2. COnfigure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	f003 0303 	and.w	r3, r3, #3
 8000818:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIOA_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <GPIO_Init+0x198>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d04d      	beq.n	80008c0 <GPIO_Init+0x1bc>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <GPIO_Init+0x19c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d032      	beq.n	8000894 <GPIO_Init+0x190>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <GPIO_Init+0x1a0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d02b      	beq.n	8000890 <GPIO_Init+0x18c>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <GPIO_Init+0x1a4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d024      	beq.n	800088c <GPIO_Init+0x188>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <GPIO_Init+0x1a8>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d01d      	beq.n	8000888 <GPIO_Init+0x184>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <GPIO_Init+0x1ac>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d016      	beq.n	8000884 <GPIO_Init+0x180>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <GPIO_Init+0x1b0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d00f      	beq.n	8000880 <GPIO_Init+0x17c>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <GPIO_Init+0x1b4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d008      	beq.n	800087c <GPIO_Init+0x178>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <GPIO_Init+0x1b8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d101      	bne.n	8000878 <GPIO_Init+0x174>
 8000874:	2308      	movs	r3, #8
 8000876:	e024      	b.n	80008c2 <GPIO_Init+0x1be>
 8000878:	2300      	movs	r3, #0
 800087a:	e022      	b.n	80008c2 <GPIO_Init+0x1be>
 800087c:	2307      	movs	r3, #7
 800087e:	e020      	b.n	80008c2 <GPIO_Init+0x1be>
 8000880:	2306      	movs	r3, #6
 8000882:	e01e      	b.n	80008c2 <GPIO_Init+0x1be>
 8000884:	2305      	movs	r3, #5
 8000886:	e01c      	b.n	80008c2 <GPIO_Init+0x1be>
 8000888:	2304      	movs	r3, #4
 800088a:	e01a      	b.n	80008c2 <GPIO_Init+0x1be>
 800088c:	2303      	movs	r3, #3
 800088e:	e018      	b.n	80008c2 <GPIO_Init+0x1be>
 8000890:	2302      	movs	r3, #2
 8000892:	e016      	b.n	80008c2 <GPIO_Init+0x1be>
 8000894:	2301      	movs	r3, #1
 8000896:	e014      	b.n	80008c2 <GPIO_Init+0x1be>
 8000898:	40013c00 	.word	0x40013c00
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020c00 	.word	0x40020c00
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40021400 	.word	0x40021400
 80008b4:	40021800 	.word	0x40021800
 80008b8:	40021c00 	.word	0x40021c00
 80008bc:	40022000 	.word	0x40022000
 80008c0:	2300      	movs	r3, #0
 80008c2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80008c4:	4b5d      	ldr	r3, [pc, #372]	; (8000a3c <GPIO_Init+0x338>)
 80008c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c8:	4a5c      	ldr	r2, [pc, #368]	; (8000a3c <GPIO_Init+0x338>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 80008d0:	7c7a      	ldrb	r2, [r7, #17]
 80008d2:	7cbb      	ldrb	r3, [r7, #18]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	fa02 f103 	lsl.w	r1, r2, r3
 80008da:	4a59      	ldr	r2, [pc, #356]	; (8000a40 <GPIO_Init+0x33c>)
 80008dc:	7cfb      	ldrb	r3, [r7, #19]
 80008de:	3302      	adds	r3, #2
 80008e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. ENable the Exti intrrupt delivery using IMR
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e4:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <GPIO_Init+0x340>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	7912      	ldrb	r2, [r2, #4]
 80008ec:	4611      	mov	r1, r2
 80008ee:	2201      	movs	r2, #1
 80008f0:	408a      	lsls	r2, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a53      	ldr	r2, [pc, #332]	; (8000a44 <GPIO_Init+0x340>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800090e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	4619      	mov	r1, r3
 800091c:	2303      	movs	r3, #3
 800091e:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000920:	43db      	mvns	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	400a      	ands	r2, r1
 800092a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6899      	ldr	r1, [r3, #8]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	430a      	orrs	r2, r1
 800093a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

	// Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	79db      	ldrb	r3, [r3, #7]
 8000944:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000950:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	791b      	ldrb	r3, [r3, #4]
 800095c:	4619      	mov	r1, r3
 800095e:	2303      	movs	r3, #3
 8000960:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 8000962:	43db      	mvns	r3, r3
 8000964:	4619      	mov	r1, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	400a      	ands	r2, r1
 800096c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68d9      	ldr	r1, [r3, #12]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	430a      	orrs	r2, r1
 800097c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]

	//configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7a1b      	ldrb	r3, [r3, #8]
 8000986:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	791b      	ldrb	r3, [r3, #4]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000992:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	791b      	ldrb	r3, [r3, #4]
 800099e:	4619      	mov	r1, r3
 80009a0:	2301      	movs	r3, #1
 80009a2:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80009a4:	43db      	mvns	r3, r3
 80009a6:	4619      	mov	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	400a      	ands	r2, r1
 80009ae:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6859      	ldr	r1, [r3, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	430a      	orrs	r2, r1
 80009be:	605a      	str	r2, [r3, #4]

	temp = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	795b      	ldrb	r3, [r3, #5]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d132      	bne.n	8000a32 <GPIO_Init+0x32e>
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	08db      	lsrs	r3, r3, #3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	3208      	adds	r2, #8
 80009e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	210f      	movs	r1, #15
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4011      	ands	r1, r2
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	3208      	adds	r2, #8
 8000a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	3208      	adds	r2, #8
 8000a10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7a5b      	ldrb	r3, [r3, #9]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4311      	orrs	r1, r2
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40013800 	.word	0x40013800
 8000a44:	40013c00 	.word	0x40013c00

08000a48 <GPIO_IRQConfig>:

/*
 * IRQ Configuration and ISR Handling
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d133      	bne.n	8000ac6 <GPIO_IRQConfig+0x7e>
	{
		if(IRQNumber <=31)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b1f      	cmp	r3, #31
 8000a62:	d80a      	bhi.n	8000a7a <GPIO_IRQConfig+0x32>
		{
			// program ISER0 Register
			*NVIC_ISER0 |=(1<<IRQNumber);
 8000a64:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <GPIO_IRQConfig+0xf0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	4a31      	ldr	r2, [pc, #196]	; (8000b38 <GPIO_IRQConfig+0xf0>)
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6013      	str	r3, [r2, #0]
		else if(IRQNumber>=64 && IRQNumber<96)
		{
			*NVIC_ICER3 |=(1<<(IRQNumber%64));
		}
	}
}
 8000a78:	e059      	b.n	8000b2e <GPIO_IRQConfig+0xe6>
		else if (IRQNumber>31 && IRQNumber<64)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	d90f      	bls.n	8000aa0 <GPIO_IRQConfig+0x58>
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b3f      	cmp	r3, #63	; 0x3f
 8000a84:	d80c      	bhi.n	8000aa0 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <GPIO_IRQConfig+0xf4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	f002 021f 	and.w	r2, r2, #31
 8000a90:	2101      	movs	r1, #1
 8000a92:	fa01 f202 	lsl.w	r2, r1, r2
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <GPIO_IRQConfig+0xf4>)
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e046      	b.n	8000b2e <GPIO_IRQConfig+0xe6>
		else if(IRQNumber>=64 && IRQNumber<96)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b3f      	cmp	r3, #63	; 0x3f
 8000aa4:	d943      	bls.n	8000b2e <GPIO_IRQConfig+0xe6>
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b5f      	cmp	r3, #95	; 0x5f
 8000aaa:	d840      	bhi.n	8000b2e <GPIO_IRQConfig+0xe6>
			*NVIC_ISER3 |=(1<<(IRQNumber%64));
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <GPIO_IRQConfig+0xf8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	79fa      	ldrb	r2, [r7, #7]
 8000ab2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	4611      	mov	r1, r2
 8000abe:	4a20      	ldr	r2, [pc, #128]	; (8000b40 <GPIO_IRQConfig+0xf8>)
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	e033      	b.n	8000b2e <GPIO_IRQConfig+0xe6>
		if(IRQNumber <=31)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b1f      	cmp	r3, #31
 8000aca:	d80a      	bhi.n	8000ae2 <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |=(1<<IRQNumber);
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <GPIO_IRQConfig+0xfc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	79fa      	ldrb	r2, [r7, #7]
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <GPIO_IRQConfig+0xfc>)
 8000adc:	430b      	orrs	r3, r1
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	e025      	b.n	8000b2e <GPIO_IRQConfig+0xe6>
		else if (IRQNumber>31 && IRQNumber<64)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b1f      	cmp	r3, #31
 8000ae6:	d90f      	bls.n	8000b08 <GPIO_IRQConfig+0xc0>
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b3f      	cmp	r3, #63	; 0x3f
 8000aec:	d80c      	bhi.n	8000b08 <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |=(1<<(IRQNumber%32));
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <GPIO_IRQConfig+0x100>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	f002 021f 	and.w	r2, r2, #31
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <GPIO_IRQConfig+0x100>)
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e012      	b.n	8000b2e <GPIO_IRQConfig+0xe6>
		else if(IRQNumber>=64 && IRQNumber<96)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b0c:	d90f      	bls.n	8000b2e <GPIO_IRQConfig+0xe6>
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b5f      	cmp	r3, #95	; 0x5f
 8000b12:	d80c      	bhi.n	8000b2e <GPIO_IRQConfig+0xe6>
			*NVIC_ICER3 |=(1<<(IRQNumber%64));
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <GPIO_IRQConfig+0x104>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fa01 f202 	lsl.w	r2, r1, r2
 8000b24:	4611      	mov	r1, r2
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <GPIO_IRQConfig+0x104>)
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	e7ff      	b.n	8000b2e <GPIO_IRQConfig+0xe6>
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000e104 	.word	0xe000e104
 8000b40:	e000e10c 	.word	0xe000e10c
 8000b44:	e000e180 	.word	0xe000e180
 8000b48:	e000e184 	.word	0xe000e184
 8000b4c:	e000e18c 	.word	0xe000e18c

08000b50 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber/4;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber%4;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8*iprx_section)+(8-NO_PR_BITS_IMPLEMENTED);
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	3304      	adds	r3, #4
 8000b72:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQPriority<< shift_amount);
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b7c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000b80:	6819      	ldr	r1, [r3, #0]
 8000b82:	7b7b      	ldrb	r3, [r7, #13]
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	409a      	lsls	r2, r3
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b90:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <GPIO_IRQHandling>:



void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & (1<< PinNumber))
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <GPIO_IRQHandling+0x3c>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	4013      	ands	r3, r2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d009      	beq.n	8000bd4 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= (1<<PinNumber);
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <GPIO_IRQHandling+0x3c>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <GPIO_IRQHandling+0x3c>)
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6153      	str	r3, [r2, #20]
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40013c00 	.word	0x40013c00

08000be4 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d11f      	bne.n	8000c36 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <SPI_PeriClockControl+0x5c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d106      	bne.n	8000c0c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <SPI_PeriClockControl+0x60>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <SPI_PeriClockControl+0x60>)
 8000c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8000c0a:	e014      	b.n	8000c36 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <SPI_PeriClockControl+0x64>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d106      	bne.n	8000c22 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <SPI_PeriClockControl+0x60>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SPI_PeriClockControl+0x60>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c20:	e009      	b.n	8000c36 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <SPI_PeriClockControl+0x68>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d105      	bne.n	8000c36 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SPI_PeriClockControl+0x60>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SPI_PeriClockControl+0x60>)
 8000c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40013000 	.word	0x40013000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40003800 	.word	0x40003800
 8000c4c:	40003c00 	.word	0x40003c00

08000c50 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffc0 	bl	8000be4 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	791b      	ldrb	r3, [r3, #4]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	795b      	ldrb	r3, [r3, #5]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d104      	bne.n	8000c88 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e014      	b.n	8000cb2 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	795b      	ldrb	r3, [r3, #5]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d104      	bne.n	8000c9a <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e00b      	b.n	8000cb2 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	795b      	ldrb	r3, [r3, #5]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d107      	bne.n	8000cb2 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ca8:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb0:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	799b      	ldrb	r3, [r3, #6]
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	79db      	ldrb	r3, [r3, #7]
 8000cc4:	02db      	lsls	r3, r3, #11
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7a1b      	ldrb	r3, [r3, #8]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7a5b      	ldrb	r3, [r3, #9]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7a9b      	ldrb	r3, [r3, #10]
 8000cec:	025b      	lsls	r3, r3, #9
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	601a      	str	r2, [r3, #0]

}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	4013      	ands	r3, r2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d106      	bne.n	8000d4c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000d4a:	e005      	b.n	8000d58 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d106      	bne.n	8000d82 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f043 0204 	orr.w	r2, r3, #4
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000d80:	e005      	b.n	8000d8e <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f023 0204 	bic.w	r2, r3, #4
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	605a      	str	r2, [r3, #4]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <SPI_IRQInterruptConfig>:
 * @return            -
 *
 * @Note              -
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d133      	bne.n	8000e16 <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b1f      	cmp	r3, #31
 8000db2:	d80a      	bhi.n	8000dca <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000db4:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <SPI_IRQInterruptConfig+0xf0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	79fa      	ldrb	r2, [r7, #7]
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <SPI_IRQInterruptConfig+0xf0>)
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000dc8:	e059      	b.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b1f      	cmp	r3, #31
 8000dce:	d90f      	bls.n	8000df0 <SPI_IRQInterruptConfig+0x58>
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd4:	d80c      	bhi.n	8000df0 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <SPI_IRQInterruptConfig+0xf4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	f002 021f 	and.w	r2, r2, #31
 8000de0:	2101      	movs	r1, #1
 8000de2:	fa01 f202 	lsl.w	r2, r1, r2
 8000de6:	4611      	mov	r1, r2
 8000de8:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <SPI_IRQInterruptConfig+0xf4>)
 8000dea:	430b      	orrs	r3, r1
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e046      	b.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b3f      	cmp	r3, #63	; 0x3f
 8000df4:	d943      	bls.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b5f      	cmp	r3, #95	; 0x5f
 8000dfa:	d840      	bhi.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <SPI_IRQInterruptConfig+0xf8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e06:	2101      	movs	r1, #1
 8000e08:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <SPI_IRQInterruptConfig+0xf8>)
 8000e10:	430b      	orrs	r3, r1
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	e033      	b.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b1f      	cmp	r3, #31
 8000e1a:	d80a      	bhi.n	8000e32 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <SPI_IRQInterruptConfig+0xfc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	2101      	movs	r1, #1
 8000e24:	fa01 f202 	lsl.w	r2, r1, r2
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <SPI_IRQInterruptConfig+0xfc>)
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	e025      	b.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b1f      	cmp	r3, #31
 8000e36:	d90f      	bls.n	8000e58 <SPI_IRQInterruptConfig+0xc0>
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e3c:	d80c      	bhi.n	8000e58 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <SPI_IRQInterruptConfig+0x100>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	f002 021f 	and.w	r2, r2, #31
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <SPI_IRQInterruptConfig+0x100>)
 8000e52:	430b      	orrs	r3, r1
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e012      	b.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d90f      	bls.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b5f      	cmp	r3, #95	; 0x5f
 8000e62:	d80c      	bhi.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <SPI_IRQInterruptConfig+0x104>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	79fa      	ldrb	r2, [r7, #7]
 8000e6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	4611      	mov	r1, r2
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <SPI_IRQInterruptConfig+0x104>)
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	e7ff      	b.n	8000e7e <SPI_IRQInterruptConfig+0xe6>
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000e104 	.word	0xe000e104
 8000e90:	e000e10c 	.word	0xe000e10c
 8000e94:	e000e180 	.word	0xe000e180
 8000e98:	e000e184 	.word	0xe000e184
 8000e9c:	e000e18c 	.word	0xe000e18c

08000ea0 <SPI_SendDataIT>:

}


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	7f1b      	ldrb	r3, [r3, #28]
 8000eb0:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_Busy_IN_TX)
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d010      	beq.n	8000eda <SPI_SendDataIT+0x3a>
	{
		//1 . Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	615a      	str	r2, [r3, #20]
		//2.  Mark the SPI state as busy in transmission so that
		//    no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_Busy_IN_TX;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ed8:	605a      	str	r2, [r3, #4]

	}


	return state;
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <SPI_ReceiveDataIT>:


uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b087      	sub	sp, #28
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	7f5b      	ldrb	r3, [r3, #29]
 8000ef6:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_Busy_IN_RX)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d010      	beq.n	8000f20 <SPI_ReceiveDataIT+0x3a>
	{
		//1 . Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	619a      	str	r2, [r3, #24]
		//2.  Mark the SPI state as busy in reception so that
		//    no other code can take over same SPI peripheral until reception is over
		pSPIHandle->RxState = SPI_Busy_IN_RX;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	775a      	strb	r2, [r3, #29]

		//3. Enable the RXNEIE control bit to get interrupt whenever RXNEIE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f1e:	605a      	str	r2, [r3, #4]

	}


	return state;
 8000f20:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f22:	4618      	mov	r0, r3
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SPI_IRQHandling>:




void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

	uint8_t temp1 , temp2;
	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f4e:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d005      	beq.n	8000f62 <SPI_IRQHandling+0x36>
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f832 	bl	8000fc6 <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <SPI_IRQHandling+0x64>
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f85b 	bl	8001046 <spi_rxne_interrupt_handle>
	}

	// check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9c:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f003 0320 	and.w	r3, r3, #32
 8000faa:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <SPI_IRQHandling+0x92>
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f886 	bl	80010ca <spi_ovr_err_interrupt_handle>
	}


}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <spi_txe_interrupt_handle>:


//some helper function implementations

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d015      	beq.n	8001008 <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	1e5a      	subs	r2, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	e00f      	b.n	8001028 <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =   *pSPIHandle->pTxBuffer;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d106      	bne.n	800103e <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero , so close the spi transmission and inform the application that
		//TX is over.

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f862 	bl	80010fa <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 8001036:	2101      	movs	r1, #1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fa0f 	bl	800045c <SPI_ApplicationEventCallback>
	}

}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if(pSPIHandle->pSPIx->CR1 & ( 1 << 11))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001058:	2b00      	cmp	r3, #0
 800105a:	d016      	beq.n	800108a <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	b292      	uxth	r2, r2
 8001068:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	1e9a      	subs	r2, r3, #2
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	e010      	b.n	80010ac <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d106      	bne.n	80010c2 <spi_rxne_interrupt_handle+0x7c>
	{
		//reception is complete
		SPI_CloseReception(pSPIHandle);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f83a 	bl	800112e <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 80010ba:	2102      	movs	r1, #2
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff f9cd 	bl	800045c <SPI_ApplicationEventCallback>
	}

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_Busy_IN_TX)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7f1b      	ldrb	r3, [r3, #28]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d007      	beq.n	80010ea <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 80010ea:	2103      	movs	r1, #3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f9b5 	bl	800045c <SPI_ApplicationEventCallback>

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <SPI_CloseTransmisson>:


void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001110:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	771a      	strb	r2, [r3, #28]

}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001144:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	775a      	strb	r2, [r3, #29]

}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <__libc_init_array>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	4d0d      	ldr	r5, [pc, #52]	; (800119c <__libc_init_array+0x38>)
 8001168:	4c0d      	ldr	r4, [pc, #52]	; (80011a0 <__libc_init_array+0x3c>)
 800116a:	1b64      	subs	r4, r4, r5
 800116c:	10a4      	asrs	r4, r4, #2
 800116e:	2600      	movs	r6, #0
 8001170:	42a6      	cmp	r6, r4
 8001172:	d109      	bne.n	8001188 <__libc_init_array+0x24>
 8001174:	4d0b      	ldr	r5, [pc, #44]	; (80011a4 <__libc_init_array+0x40>)
 8001176:	4c0c      	ldr	r4, [pc, #48]	; (80011a8 <__libc_init_array+0x44>)
 8001178:	f000 ffe4 	bl	8002144 <_init>
 800117c:	1b64      	subs	r4, r4, r5
 800117e:	10a4      	asrs	r4, r4, #2
 8001180:	2600      	movs	r6, #0
 8001182:	42a6      	cmp	r6, r4
 8001184:	d105      	bne.n	8001192 <__libc_init_array+0x2e>
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	f855 3b04 	ldr.w	r3, [r5], #4
 800118c:	4798      	blx	r3
 800118e:	3601      	adds	r6, #1
 8001190:	e7ee      	b.n	8001170 <__libc_init_array+0xc>
 8001192:	f855 3b04 	ldr.w	r3, [r5], #4
 8001196:	4798      	blx	r3
 8001198:	3601      	adds	r6, #1
 800119a:	e7f2      	b.n	8001182 <__libc_init_array+0x1e>
 800119c:	08002204 	.word	0x08002204
 80011a0:	08002204 	.word	0x08002204
 80011a4:	08002204 	.word	0x08002204
 80011a8:	08002208 	.word	0x08002208

080011ac <memset>:
 80011ac:	4402      	add	r2, r0
 80011ae:	4603      	mov	r3, r0
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d100      	bne.n	80011b6 <memset+0xa>
 80011b4:	4770      	bx	lr
 80011b6:	f803 1b01 	strb.w	r1, [r3], #1
 80011ba:	e7f9      	b.n	80011b0 <memset+0x4>

080011bc <iprintf>:
 80011bc:	b40f      	push	{r0, r1, r2, r3}
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <iprintf+0x2c>)
 80011c0:	b513      	push	{r0, r1, r4, lr}
 80011c2:	681c      	ldr	r4, [r3, #0]
 80011c4:	b124      	cbz	r4, 80011d0 <iprintf+0x14>
 80011c6:	69a3      	ldr	r3, [r4, #24]
 80011c8:	b913      	cbnz	r3, 80011d0 <iprintf+0x14>
 80011ca:	4620      	mov	r0, r4
 80011cc:	f000 f866 	bl	800129c <__sinit>
 80011d0:	ab05      	add	r3, sp, #20
 80011d2:	9a04      	ldr	r2, [sp, #16]
 80011d4:	68a1      	ldr	r1, [r4, #8]
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	4620      	mov	r0, r4
 80011da:	f000 f9bb 	bl	8001554 <_vfiprintf_r>
 80011de:	b002      	add	sp, #8
 80011e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011e4:	b004      	add	sp, #16
 80011e6:	4770      	bx	lr
 80011e8:	20000000 	.word	0x20000000

080011ec <std>:
 80011ec:	2300      	movs	r3, #0
 80011ee:	b510      	push	{r4, lr}
 80011f0:	4604      	mov	r4, r0
 80011f2:	e9c0 3300 	strd	r3, r3, [r0]
 80011f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011fa:	6083      	str	r3, [r0, #8]
 80011fc:	8181      	strh	r1, [r0, #12]
 80011fe:	6643      	str	r3, [r0, #100]	; 0x64
 8001200:	81c2      	strh	r2, [r0, #14]
 8001202:	6183      	str	r3, [r0, #24]
 8001204:	4619      	mov	r1, r3
 8001206:	2208      	movs	r2, #8
 8001208:	305c      	adds	r0, #92	; 0x5c
 800120a:	f7ff ffcf 	bl	80011ac <memset>
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <std+0x38>)
 8001210:	6263      	str	r3, [r4, #36]	; 0x24
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <std+0x3c>)
 8001214:	62a3      	str	r3, [r4, #40]	; 0x28
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <std+0x40>)
 8001218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <std+0x44>)
 800121c:	6224      	str	r4, [r4, #32]
 800121e:	6323      	str	r3, [r4, #48]	; 0x30
 8001220:	bd10      	pop	{r4, pc}
 8001222:	bf00      	nop
 8001224:	08001afd 	.word	0x08001afd
 8001228:	08001b1f 	.word	0x08001b1f
 800122c:	08001b57 	.word	0x08001b57
 8001230:	08001b7b 	.word	0x08001b7b

08001234 <_cleanup_r>:
 8001234:	4901      	ldr	r1, [pc, #4]	; (800123c <_cleanup_r+0x8>)
 8001236:	f000 b8af 	b.w	8001398 <_fwalk_reent>
 800123a:	bf00      	nop
 800123c:	08001e4d 	.word	0x08001e4d

08001240 <__sfmoreglue>:
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	2268      	movs	r2, #104	; 0x68
 8001244:	1e4d      	subs	r5, r1, #1
 8001246:	4355      	muls	r5, r2
 8001248:	460e      	mov	r6, r1
 800124a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800124e:	f000 f8e5 	bl	800141c <_malloc_r>
 8001252:	4604      	mov	r4, r0
 8001254:	b140      	cbz	r0, 8001268 <__sfmoreglue+0x28>
 8001256:	2100      	movs	r1, #0
 8001258:	e9c0 1600 	strd	r1, r6, [r0]
 800125c:	300c      	adds	r0, #12
 800125e:	60a0      	str	r0, [r4, #8]
 8001260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001264:	f7ff ffa2 	bl	80011ac <memset>
 8001268:	4620      	mov	r0, r4
 800126a:	bd70      	pop	{r4, r5, r6, pc}

0800126c <__sfp_lock_acquire>:
 800126c:	4801      	ldr	r0, [pc, #4]	; (8001274 <__sfp_lock_acquire+0x8>)
 800126e:	f000 b8b3 	b.w	80013d8 <__retarget_lock_acquire_recursive>
 8001272:	bf00      	nop
 8001274:	2000029d 	.word	0x2000029d

08001278 <__sfp_lock_release>:
 8001278:	4801      	ldr	r0, [pc, #4]	; (8001280 <__sfp_lock_release+0x8>)
 800127a:	f000 b8ae 	b.w	80013da <__retarget_lock_release_recursive>
 800127e:	bf00      	nop
 8001280:	2000029d 	.word	0x2000029d

08001284 <__sinit_lock_acquire>:
 8001284:	4801      	ldr	r0, [pc, #4]	; (800128c <__sinit_lock_acquire+0x8>)
 8001286:	f000 b8a7 	b.w	80013d8 <__retarget_lock_acquire_recursive>
 800128a:	bf00      	nop
 800128c:	2000029e 	.word	0x2000029e

08001290 <__sinit_lock_release>:
 8001290:	4801      	ldr	r0, [pc, #4]	; (8001298 <__sinit_lock_release+0x8>)
 8001292:	f000 b8a2 	b.w	80013da <__retarget_lock_release_recursive>
 8001296:	bf00      	nop
 8001298:	2000029e 	.word	0x2000029e

0800129c <__sinit>:
 800129c:	b510      	push	{r4, lr}
 800129e:	4604      	mov	r4, r0
 80012a0:	f7ff fff0 	bl	8001284 <__sinit_lock_acquire>
 80012a4:	69a3      	ldr	r3, [r4, #24]
 80012a6:	b11b      	cbz	r3, 80012b0 <__sinit+0x14>
 80012a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012ac:	f7ff bff0 	b.w	8001290 <__sinit_lock_release>
 80012b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80012b4:	6523      	str	r3, [r4, #80]	; 0x50
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <__sinit+0x68>)
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <__sinit+0x6c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80012be:	42a3      	cmp	r3, r4
 80012c0:	bf04      	itt	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	61a3      	streq	r3, [r4, #24]
 80012c6:	4620      	mov	r0, r4
 80012c8:	f000 f820 	bl	800130c <__sfp>
 80012cc:	6060      	str	r0, [r4, #4]
 80012ce:	4620      	mov	r0, r4
 80012d0:	f000 f81c 	bl	800130c <__sfp>
 80012d4:	60a0      	str	r0, [r4, #8]
 80012d6:	4620      	mov	r0, r4
 80012d8:	f000 f818 	bl	800130c <__sfp>
 80012dc:	2200      	movs	r2, #0
 80012de:	60e0      	str	r0, [r4, #12]
 80012e0:	2104      	movs	r1, #4
 80012e2:	6860      	ldr	r0, [r4, #4]
 80012e4:	f7ff ff82 	bl	80011ec <std>
 80012e8:	68a0      	ldr	r0, [r4, #8]
 80012ea:	2201      	movs	r2, #1
 80012ec:	2109      	movs	r1, #9
 80012ee:	f7ff ff7d 	bl	80011ec <std>
 80012f2:	68e0      	ldr	r0, [r4, #12]
 80012f4:	2202      	movs	r2, #2
 80012f6:	2112      	movs	r1, #18
 80012f8:	f7ff ff78 	bl	80011ec <std>
 80012fc:	2301      	movs	r3, #1
 80012fe:	61a3      	str	r3, [r4, #24]
 8001300:	e7d2      	b.n	80012a8 <__sinit+0xc>
 8001302:	bf00      	nop
 8001304:	0800216c 	.word	0x0800216c
 8001308:	08001235 	.word	0x08001235

0800130c <__sfp>:
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	4607      	mov	r7, r0
 8001310:	f7ff ffac 	bl	800126c <__sfp_lock_acquire>
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <__sfp+0x84>)
 8001316:	681e      	ldr	r6, [r3, #0]
 8001318:	69b3      	ldr	r3, [r6, #24]
 800131a:	b913      	cbnz	r3, 8001322 <__sfp+0x16>
 800131c:	4630      	mov	r0, r6
 800131e:	f7ff ffbd 	bl	800129c <__sinit>
 8001322:	3648      	adds	r6, #72	; 0x48
 8001324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001328:	3b01      	subs	r3, #1
 800132a:	d503      	bpl.n	8001334 <__sfp+0x28>
 800132c:	6833      	ldr	r3, [r6, #0]
 800132e:	b30b      	cbz	r3, 8001374 <__sfp+0x68>
 8001330:	6836      	ldr	r6, [r6, #0]
 8001332:	e7f7      	b.n	8001324 <__sfp+0x18>
 8001334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001338:	b9d5      	cbnz	r5, 8001370 <__sfp+0x64>
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <__sfp+0x88>)
 800133c:	60e3      	str	r3, [r4, #12]
 800133e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001342:	6665      	str	r5, [r4, #100]	; 0x64
 8001344:	f000 f847 	bl	80013d6 <__retarget_lock_init_recursive>
 8001348:	f7ff ff96 	bl	8001278 <__sfp_lock_release>
 800134c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001354:	6025      	str	r5, [r4, #0]
 8001356:	61a5      	str	r5, [r4, #24]
 8001358:	2208      	movs	r2, #8
 800135a:	4629      	mov	r1, r5
 800135c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001360:	f7ff ff24 	bl	80011ac <memset>
 8001364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800136c:	4620      	mov	r0, r4
 800136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001370:	3468      	adds	r4, #104	; 0x68
 8001372:	e7d9      	b.n	8001328 <__sfp+0x1c>
 8001374:	2104      	movs	r1, #4
 8001376:	4638      	mov	r0, r7
 8001378:	f7ff ff62 	bl	8001240 <__sfmoreglue>
 800137c:	4604      	mov	r4, r0
 800137e:	6030      	str	r0, [r6, #0]
 8001380:	2800      	cmp	r0, #0
 8001382:	d1d5      	bne.n	8001330 <__sfp+0x24>
 8001384:	f7ff ff78 	bl	8001278 <__sfp_lock_release>
 8001388:	230c      	movs	r3, #12
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	e7ee      	b.n	800136c <__sfp+0x60>
 800138e:	bf00      	nop
 8001390:	0800216c 	.word	0x0800216c
 8001394:	ffff0001 	.word	0xffff0001

08001398 <_fwalk_reent>:
 8001398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800139c:	4606      	mov	r6, r0
 800139e:	4688      	mov	r8, r1
 80013a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80013a4:	2700      	movs	r7, #0
 80013a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80013aa:	f1b9 0901 	subs.w	r9, r9, #1
 80013ae:	d505      	bpl.n	80013bc <_fwalk_reent+0x24>
 80013b0:	6824      	ldr	r4, [r4, #0]
 80013b2:	2c00      	cmp	r4, #0
 80013b4:	d1f7      	bne.n	80013a6 <_fwalk_reent+0xe>
 80013b6:	4638      	mov	r0, r7
 80013b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013bc:	89ab      	ldrh	r3, [r5, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d907      	bls.n	80013d2 <_fwalk_reent+0x3a>
 80013c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013c6:	3301      	adds	r3, #1
 80013c8:	d003      	beq.n	80013d2 <_fwalk_reent+0x3a>
 80013ca:	4629      	mov	r1, r5
 80013cc:	4630      	mov	r0, r6
 80013ce:	47c0      	blx	r8
 80013d0:	4307      	orrs	r7, r0
 80013d2:	3568      	adds	r5, #104	; 0x68
 80013d4:	e7e9      	b.n	80013aa <_fwalk_reent+0x12>

080013d6 <__retarget_lock_init_recursive>:
 80013d6:	4770      	bx	lr

080013d8 <__retarget_lock_acquire_recursive>:
 80013d8:	4770      	bx	lr

080013da <__retarget_lock_release_recursive>:
 80013da:	4770      	bx	lr

080013dc <sbrk_aligned>:
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	4e0e      	ldr	r6, [pc, #56]	; (8001418 <sbrk_aligned+0x3c>)
 80013e0:	460c      	mov	r4, r1
 80013e2:	6831      	ldr	r1, [r6, #0]
 80013e4:	4605      	mov	r5, r0
 80013e6:	b911      	cbnz	r1, 80013ee <sbrk_aligned+0x12>
 80013e8:	f000 fb78 	bl	8001adc <_sbrk_r>
 80013ec:	6030      	str	r0, [r6, #0]
 80013ee:	4621      	mov	r1, r4
 80013f0:	4628      	mov	r0, r5
 80013f2:	f000 fb73 	bl	8001adc <_sbrk_r>
 80013f6:	1c43      	adds	r3, r0, #1
 80013f8:	d00a      	beq.n	8001410 <sbrk_aligned+0x34>
 80013fa:	1cc4      	adds	r4, r0, #3
 80013fc:	f024 0403 	bic.w	r4, r4, #3
 8001400:	42a0      	cmp	r0, r4
 8001402:	d007      	beq.n	8001414 <sbrk_aligned+0x38>
 8001404:	1a21      	subs	r1, r4, r0
 8001406:	4628      	mov	r0, r5
 8001408:	f000 fb68 	bl	8001adc <_sbrk_r>
 800140c:	3001      	adds	r0, #1
 800140e:	d101      	bne.n	8001414 <sbrk_aligned+0x38>
 8001410:	f04f 34ff 	mov.w	r4, #4294967295
 8001414:	4620      	mov	r0, r4
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	200002a4 	.word	0x200002a4

0800141c <_malloc_r>:
 800141c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001420:	1ccd      	adds	r5, r1, #3
 8001422:	f025 0503 	bic.w	r5, r5, #3
 8001426:	3508      	adds	r5, #8
 8001428:	2d0c      	cmp	r5, #12
 800142a:	bf38      	it	cc
 800142c:	250c      	movcc	r5, #12
 800142e:	2d00      	cmp	r5, #0
 8001430:	4607      	mov	r7, r0
 8001432:	db01      	blt.n	8001438 <_malloc_r+0x1c>
 8001434:	42a9      	cmp	r1, r5
 8001436:	d905      	bls.n	8001444 <_malloc_r+0x28>
 8001438:	230c      	movs	r3, #12
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	2600      	movs	r6, #0
 800143e:	4630      	mov	r0, r6
 8001440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001444:	4e2e      	ldr	r6, [pc, #184]	; (8001500 <_malloc_r+0xe4>)
 8001446:	f000 fdb5 	bl	8001fb4 <__malloc_lock>
 800144a:	6833      	ldr	r3, [r6, #0]
 800144c:	461c      	mov	r4, r3
 800144e:	bb34      	cbnz	r4, 800149e <_malloc_r+0x82>
 8001450:	4629      	mov	r1, r5
 8001452:	4638      	mov	r0, r7
 8001454:	f7ff ffc2 	bl	80013dc <sbrk_aligned>
 8001458:	1c43      	adds	r3, r0, #1
 800145a:	4604      	mov	r4, r0
 800145c:	d14d      	bne.n	80014fa <_malloc_r+0xde>
 800145e:	6834      	ldr	r4, [r6, #0]
 8001460:	4626      	mov	r6, r4
 8001462:	2e00      	cmp	r6, #0
 8001464:	d140      	bne.n	80014e8 <_malloc_r+0xcc>
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	4631      	mov	r1, r6
 800146a:	4638      	mov	r0, r7
 800146c:	eb04 0803 	add.w	r8, r4, r3
 8001470:	f000 fb34 	bl	8001adc <_sbrk_r>
 8001474:	4580      	cmp	r8, r0
 8001476:	d13a      	bne.n	80014ee <_malloc_r+0xd2>
 8001478:	6821      	ldr	r1, [r4, #0]
 800147a:	3503      	adds	r5, #3
 800147c:	1a6d      	subs	r5, r5, r1
 800147e:	f025 0503 	bic.w	r5, r5, #3
 8001482:	3508      	adds	r5, #8
 8001484:	2d0c      	cmp	r5, #12
 8001486:	bf38      	it	cc
 8001488:	250c      	movcc	r5, #12
 800148a:	4629      	mov	r1, r5
 800148c:	4638      	mov	r0, r7
 800148e:	f7ff ffa5 	bl	80013dc <sbrk_aligned>
 8001492:	3001      	adds	r0, #1
 8001494:	d02b      	beq.n	80014ee <_malloc_r+0xd2>
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	442b      	add	r3, r5
 800149a:	6023      	str	r3, [r4, #0]
 800149c:	e00e      	b.n	80014bc <_malloc_r+0xa0>
 800149e:	6822      	ldr	r2, [r4, #0]
 80014a0:	1b52      	subs	r2, r2, r5
 80014a2:	d41e      	bmi.n	80014e2 <_malloc_r+0xc6>
 80014a4:	2a0b      	cmp	r2, #11
 80014a6:	d916      	bls.n	80014d6 <_malloc_r+0xba>
 80014a8:	1961      	adds	r1, r4, r5
 80014aa:	42a3      	cmp	r3, r4
 80014ac:	6025      	str	r5, [r4, #0]
 80014ae:	bf18      	it	ne
 80014b0:	6059      	strne	r1, [r3, #4]
 80014b2:	6863      	ldr	r3, [r4, #4]
 80014b4:	bf08      	it	eq
 80014b6:	6031      	streq	r1, [r6, #0]
 80014b8:	5162      	str	r2, [r4, r5]
 80014ba:	604b      	str	r3, [r1, #4]
 80014bc:	4638      	mov	r0, r7
 80014be:	f104 060b 	add.w	r6, r4, #11
 80014c2:	f000 fd7d 	bl	8001fc0 <__malloc_unlock>
 80014c6:	f026 0607 	bic.w	r6, r6, #7
 80014ca:	1d23      	adds	r3, r4, #4
 80014cc:	1af2      	subs	r2, r6, r3
 80014ce:	d0b6      	beq.n	800143e <_malloc_r+0x22>
 80014d0:	1b9b      	subs	r3, r3, r6
 80014d2:	50a3      	str	r3, [r4, r2]
 80014d4:	e7b3      	b.n	800143e <_malloc_r+0x22>
 80014d6:	6862      	ldr	r2, [r4, #4]
 80014d8:	42a3      	cmp	r3, r4
 80014da:	bf0c      	ite	eq
 80014dc:	6032      	streq	r2, [r6, #0]
 80014de:	605a      	strne	r2, [r3, #4]
 80014e0:	e7ec      	b.n	80014bc <_malloc_r+0xa0>
 80014e2:	4623      	mov	r3, r4
 80014e4:	6864      	ldr	r4, [r4, #4]
 80014e6:	e7b2      	b.n	800144e <_malloc_r+0x32>
 80014e8:	4634      	mov	r4, r6
 80014ea:	6876      	ldr	r6, [r6, #4]
 80014ec:	e7b9      	b.n	8001462 <_malloc_r+0x46>
 80014ee:	230c      	movs	r3, #12
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4638      	mov	r0, r7
 80014f4:	f000 fd64 	bl	8001fc0 <__malloc_unlock>
 80014f8:	e7a1      	b.n	800143e <_malloc_r+0x22>
 80014fa:	6025      	str	r5, [r4, #0]
 80014fc:	e7de      	b.n	80014bc <_malloc_r+0xa0>
 80014fe:	bf00      	nop
 8001500:	200002a0 	.word	0x200002a0

08001504 <__sfputc_r>:
 8001504:	6893      	ldr	r3, [r2, #8]
 8001506:	3b01      	subs	r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	b410      	push	{r4}
 800150c:	6093      	str	r3, [r2, #8]
 800150e:	da07      	bge.n	8001520 <__sfputc_r+0x1c>
 8001510:	6994      	ldr	r4, [r2, #24]
 8001512:	42a3      	cmp	r3, r4
 8001514:	db01      	blt.n	800151a <__sfputc_r+0x16>
 8001516:	290a      	cmp	r1, #10
 8001518:	d102      	bne.n	8001520 <__sfputc_r+0x1c>
 800151a:	bc10      	pop	{r4}
 800151c:	f000 bb32 	b.w	8001b84 <__swbuf_r>
 8001520:	6813      	ldr	r3, [r2, #0]
 8001522:	1c58      	adds	r0, r3, #1
 8001524:	6010      	str	r0, [r2, #0]
 8001526:	7019      	strb	r1, [r3, #0]
 8001528:	4608      	mov	r0, r1
 800152a:	bc10      	pop	{r4}
 800152c:	4770      	bx	lr

0800152e <__sfputs_r>:
 800152e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001530:	4606      	mov	r6, r0
 8001532:	460f      	mov	r7, r1
 8001534:	4614      	mov	r4, r2
 8001536:	18d5      	adds	r5, r2, r3
 8001538:	42ac      	cmp	r4, r5
 800153a:	d101      	bne.n	8001540 <__sfputs_r+0x12>
 800153c:	2000      	movs	r0, #0
 800153e:	e007      	b.n	8001550 <__sfputs_r+0x22>
 8001540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001544:	463a      	mov	r2, r7
 8001546:	4630      	mov	r0, r6
 8001548:	f7ff ffdc 	bl	8001504 <__sfputc_r>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d1f3      	bne.n	8001538 <__sfputs_r+0xa>
 8001550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001554 <_vfiprintf_r>:
 8001554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001558:	460d      	mov	r5, r1
 800155a:	b09d      	sub	sp, #116	; 0x74
 800155c:	4614      	mov	r4, r2
 800155e:	4698      	mov	r8, r3
 8001560:	4606      	mov	r6, r0
 8001562:	b118      	cbz	r0, 800156c <_vfiprintf_r+0x18>
 8001564:	6983      	ldr	r3, [r0, #24]
 8001566:	b90b      	cbnz	r3, 800156c <_vfiprintf_r+0x18>
 8001568:	f7ff fe98 	bl	800129c <__sinit>
 800156c:	4b89      	ldr	r3, [pc, #548]	; (8001794 <_vfiprintf_r+0x240>)
 800156e:	429d      	cmp	r5, r3
 8001570:	d11b      	bne.n	80015aa <_vfiprintf_r+0x56>
 8001572:	6875      	ldr	r5, [r6, #4]
 8001574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001576:	07d9      	lsls	r1, r3, #31
 8001578:	d405      	bmi.n	8001586 <_vfiprintf_r+0x32>
 800157a:	89ab      	ldrh	r3, [r5, #12]
 800157c:	059a      	lsls	r2, r3, #22
 800157e:	d402      	bmi.n	8001586 <_vfiprintf_r+0x32>
 8001580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001582:	f7ff ff29 	bl	80013d8 <__retarget_lock_acquire_recursive>
 8001586:	89ab      	ldrh	r3, [r5, #12]
 8001588:	071b      	lsls	r3, r3, #28
 800158a:	d501      	bpl.n	8001590 <_vfiprintf_r+0x3c>
 800158c:	692b      	ldr	r3, [r5, #16]
 800158e:	b9eb      	cbnz	r3, 80015cc <_vfiprintf_r+0x78>
 8001590:	4629      	mov	r1, r5
 8001592:	4630      	mov	r0, r6
 8001594:	f000 fb5a 	bl	8001c4c <__swsetup_r>
 8001598:	b1c0      	cbz	r0, 80015cc <_vfiprintf_r+0x78>
 800159a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800159c:	07dc      	lsls	r4, r3, #31
 800159e:	d50e      	bpl.n	80015be <_vfiprintf_r+0x6a>
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	b01d      	add	sp, #116	; 0x74
 80015a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015aa:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <_vfiprintf_r+0x244>)
 80015ac:	429d      	cmp	r5, r3
 80015ae:	d101      	bne.n	80015b4 <_vfiprintf_r+0x60>
 80015b0:	68b5      	ldr	r5, [r6, #8]
 80015b2:	e7df      	b.n	8001574 <_vfiprintf_r+0x20>
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <_vfiprintf_r+0x248>)
 80015b6:	429d      	cmp	r5, r3
 80015b8:	bf08      	it	eq
 80015ba:	68f5      	ldreq	r5, [r6, #12]
 80015bc:	e7da      	b.n	8001574 <_vfiprintf_r+0x20>
 80015be:	89ab      	ldrh	r3, [r5, #12]
 80015c0:	0598      	lsls	r0, r3, #22
 80015c2:	d4ed      	bmi.n	80015a0 <_vfiprintf_r+0x4c>
 80015c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015c6:	f7ff ff08 	bl	80013da <__retarget_lock_release_recursive>
 80015ca:	e7e9      	b.n	80015a0 <_vfiprintf_r+0x4c>
 80015cc:	2300      	movs	r3, #0
 80015ce:	9309      	str	r3, [sp, #36]	; 0x24
 80015d0:	2320      	movs	r3, #32
 80015d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80015da:	2330      	movs	r3, #48	; 0x30
 80015dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80017a0 <_vfiprintf_r+0x24c>
 80015e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015e4:	f04f 0901 	mov.w	r9, #1
 80015e8:	4623      	mov	r3, r4
 80015ea:	469a      	mov	sl, r3
 80015ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015f0:	b10a      	cbz	r2, 80015f6 <_vfiprintf_r+0xa2>
 80015f2:	2a25      	cmp	r2, #37	; 0x25
 80015f4:	d1f9      	bne.n	80015ea <_vfiprintf_r+0x96>
 80015f6:	ebba 0b04 	subs.w	fp, sl, r4
 80015fa:	d00b      	beq.n	8001614 <_vfiprintf_r+0xc0>
 80015fc:	465b      	mov	r3, fp
 80015fe:	4622      	mov	r2, r4
 8001600:	4629      	mov	r1, r5
 8001602:	4630      	mov	r0, r6
 8001604:	f7ff ff93 	bl	800152e <__sfputs_r>
 8001608:	3001      	adds	r0, #1
 800160a:	f000 80aa 	beq.w	8001762 <_vfiprintf_r+0x20e>
 800160e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001610:	445a      	add	r2, fp
 8001612:	9209      	str	r2, [sp, #36]	; 0x24
 8001614:	f89a 3000 	ldrb.w	r3, [sl]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a2 	beq.w	8001762 <_vfiprintf_r+0x20e>
 800161e:	2300      	movs	r3, #0
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001628:	f10a 0a01 	add.w	sl, sl, #1
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	9307      	str	r3, [sp, #28]
 8001630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001634:	931a      	str	r3, [sp, #104]	; 0x68
 8001636:	4654      	mov	r4, sl
 8001638:	2205      	movs	r2, #5
 800163a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800163e:	4858      	ldr	r0, [pc, #352]	; (80017a0 <_vfiprintf_r+0x24c>)
 8001640:	f7fe fdd6 	bl	80001f0 <memchr>
 8001644:	9a04      	ldr	r2, [sp, #16]
 8001646:	b9d8      	cbnz	r0, 8001680 <_vfiprintf_r+0x12c>
 8001648:	06d1      	lsls	r1, r2, #27
 800164a:	bf44      	itt	mi
 800164c:	2320      	movmi	r3, #32
 800164e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001652:	0713      	lsls	r3, r2, #28
 8001654:	bf44      	itt	mi
 8001656:	232b      	movmi	r3, #43	; 0x2b
 8001658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800165c:	f89a 3000 	ldrb.w	r3, [sl]
 8001660:	2b2a      	cmp	r3, #42	; 0x2a
 8001662:	d015      	beq.n	8001690 <_vfiprintf_r+0x13c>
 8001664:	9a07      	ldr	r2, [sp, #28]
 8001666:	4654      	mov	r4, sl
 8001668:	2000      	movs	r0, #0
 800166a:	f04f 0c0a 	mov.w	ip, #10
 800166e:	4621      	mov	r1, r4
 8001670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001674:	3b30      	subs	r3, #48	; 0x30
 8001676:	2b09      	cmp	r3, #9
 8001678:	d94e      	bls.n	8001718 <_vfiprintf_r+0x1c4>
 800167a:	b1b0      	cbz	r0, 80016aa <_vfiprintf_r+0x156>
 800167c:	9207      	str	r2, [sp, #28]
 800167e:	e014      	b.n	80016aa <_vfiprintf_r+0x156>
 8001680:	eba0 0308 	sub.w	r3, r0, r8
 8001684:	fa09 f303 	lsl.w	r3, r9, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	9304      	str	r3, [sp, #16]
 800168c:	46a2      	mov	sl, r4
 800168e:	e7d2      	b.n	8001636 <_vfiprintf_r+0xe2>
 8001690:	9b03      	ldr	r3, [sp, #12]
 8001692:	1d19      	adds	r1, r3, #4
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	9103      	str	r1, [sp, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	bfbb      	ittet	lt
 800169c:	425b      	neglt	r3, r3
 800169e:	f042 0202 	orrlt.w	r2, r2, #2
 80016a2:	9307      	strge	r3, [sp, #28]
 80016a4:	9307      	strlt	r3, [sp, #28]
 80016a6:	bfb8      	it	lt
 80016a8:	9204      	strlt	r2, [sp, #16]
 80016aa:	7823      	ldrb	r3, [r4, #0]
 80016ac:	2b2e      	cmp	r3, #46	; 0x2e
 80016ae:	d10c      	bne.n	80016ca <_vfiprintf_r+0x176>
 80016b0:	7863      	ldrb	r3, [r4, #1]
 80016b2:	2b2a      	cmp	r3, #42	; 0x2a
 80016b4:	d135      	bne.n	8001722 <_vfiprintf_r+0x1ce>
 80016b6:	9b03      	ldr	r3, [sp, #12]
 80016b8:	1d1a      	adds	r2, r3, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	9203      	str	r2, [sp, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bfb8      	it	lt
 80016c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80016c6:	3402      	adds	r4, #2
 80016c8:	9305      	str	r3, [sp, #20]
 80016ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80017a4 <_vfiprintf_r+0x250>
 80016ce:	7821      	ldrb	r1, [r4, #0]
 80016d0:	2203      	movs	r2, #3
 80016d2:	4650      	mov	r0, sl
 80016d4:	f7fe fd8c 	bl	80001f0 <memchr>
 80016d8:	b140      	cbz	r0, 80016ec <_vfiprintf_r+0x198>
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	eba0 000a 	sub.w	r0, r0, sl
 80016e0:	fa03 f000 	lsl.w	r0, r3, r0
 80016e4:	9b04      	ldr	r3, [sp, #16]
 80016e6:	4303      	orrs	r3, r0
 80016e8:	3401      	adds	r4, #1
 80016ea:	9304      	str	r3, [sp, #16]
 80016ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016f0:	482d      	ldr	r0, [pc, #180]	; (80017a8 <_vfiprintf_r+0x254>)
 80016f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016f6:	2206      	movs	r2, #6
 80016f8:	f7fe fd7a 	bl	80001f0 <memchr>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d03f      	beq.n	8001780 <_vfiprintf_r+0x22c>
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <_vfiprintf_r+0x258>)
 8001702:	bb1b      	cbnz	r3, 800174c <_vfiprintf_r+0x1f8>
 8001704:	9b03      	ldr	r3, [sp, #12]
 8001706:	3307      	adds	r3, #7
 8001708:	f023 0307 	bic.w	r3, r3, #7
 800170c:	3308      	adds	r3, #8
 800170e:	9303      	str	r3, [sp, #12]
 8001710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001712:	443b      	add	r3, r7
 8001714:	9309      	str	r3, [sp, #36]	; 0x24
 8001716:	e767      	b.n	80015e8 <_vfiprintf_r+0x94>
 8001718:	fb0c 3202 	mla	r2, ip, r2, r3
 800171c:	460c      	mov	r4, r1
 800171e:	2001      	movs	r0, #1
 8001720:	e7a5      	b.n	800166e <_vfiprintf_r+0x11a>
 8001722:	2300      	movs	r3, #0
 8001724:	3401      	adds	r4, #1
 8001726:	9305      	str	r3, [sp, #20]
 8001728:	4619      	mov	r1, r3
 800172a:	f04f 0c0a 	mov.w	ip, #10
 800172e:	4620      	mov	r0, r4
 8001730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001734:	3a30      	subs	r2, #48	; 0x30
 8001736:	2a09      	cmp	r2, #9
 8001738:	d903      	bls.n	8001742 <_vfiprintf_r+0x1ee>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0c5      	beq.n	80016ca <_vfiprintf_r+0x176>
 800173e:	9105      	str	r1, [sp, #20]
 8001740:	e7c3      	b.n	80016ca <_vfiprintf_r+0x176>
 8001742:	fb0c 2101 	mla	r1, ip, r1, r2
 8001746:	4604      	mov	r4, r0
 8001748:	2301      	movs	r3, #1
 800174a:	e7f0      	b.n	800172e <_vfiprintf_r+0x1da>
 800174c:	ab03      	add	r3, sp, #12
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	462a      	mov	r2, r5
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <_vfiprintf_r+0x25c>)
 8001754:	a904      	add	r1, sp, #16
 8001756:	4630      	mov	r0, r6
 8001758:	f3af 8000 	nop.w
 800175c:	4607      	mov	r7, r0
 800175e:	1c78      	adds	r0, r7, #1
 8001760:	d1d6      	bne.n	8001710 <_vfiprintf_r+0x1bc>
 8001762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001764:	07d9      	lsls	r1, r3, #31
 8001766:	d405      	bmi.n	8001774 <_vfiprintf_r+0x220>
 8001768:	89ab      	ldrh	r3, [r5, #12]
 800176a:	059a      	lsls	r2, r3, #22
 800176c:	d402      	bmi.n	8001774 <_vfiprintf_r+0x220>
 800176e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001770:	f7ff fe33 	bl	80013da <__retarget_lock_release_recursive>
 8001774:	89ab      	ldrh	r3, [r5, #12]
 8001776:	065b      	lsls	r3, r3, #25
 8001778:	f53f af12 	bmi.w	80015a0 <_vfiprintf_r+0x4c>
 800177c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800177e:	e711      	b.n	80015a4 <_vfiprintf_r+0x50>
 8001780:	ab03      	add	r3, sp, #12
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	462a      	mov	r2, r5
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <_vfiprintf_r+0x25c>)
 8001788:	a904      	add	r1, sp, #16
 800178a:	4630      	mov	r0, r6
 800178c:	f000 f880 	bl	8001890 <_printf_i>
 8001790:	e7e4      	b.n	800175c <_vfiprintf_r+0x208>
 8001792:	bf00      	nop
 8001794:	08002190 	.word	0x08002190
 8001798:	080021b0 	.word	0x080021b0
 800179c:	08002170 	.word	0x08002170
 80017a0:	080021d0 	.word	0x080021d0
 80017a4:	080021d6 	.word	0x080021d6
 80017a8:	080021da 	.word	0x080021da
 80017ac:	00000000 	.word	0x00000000
 80017b0:	0800152f 	.word	0x0800152f

080017b4 <_printf_common>:
 80017b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017b8:	4616      	mov	r6, r2
 80017ba:	4699      	mov	r9, r3
 80017bc:	688a      	ldr	r2, [r1, #8]
 80017be:	690b      	ldr	r3, [r1, #16]
 80017c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	bfb8      	it	lt
 80017c8:	4613      	movlt	r3, r2
 80017ca:	6033      	str	r3, [r6, #0]
 80017cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017d0:	4607      	mov	r7, r0
 80017d2:	460c      	mov	r4, r1
 80017d4:	b10a      	cbz	r2, 80017da <_printf_common+0x26>
 80017d6:	3301      	adds	r3, #1
 80017d8:	6033      	str	r3, [r6, #0]
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	0699      	lsls	r1, r3, #26
 80017de:	bf42      	ittt	mi
 80017e0:	6833      	ldrmi	r3, [r6, #0]
 80017e2:	3302      	addmi	r3, #2
 80017e4:	6033      	strmi	r3, [r6, #0]
 80017e6:	6825      	ldr	r5, [r4, #0]
 80017e8:	f015 0506 	ands.w	r5, r5, #6
 80017ec:	d106      	bne.n	80017fc <_printf_common+0x48>
 80017ee:	f104 0a19 	add.w	sl, r4, #25
 80017f2:	68e3      	ldr	r3, [r4, #12]
 80017f4:	6832      	ldr	r2, [r6, #0]
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	42ab      	cmp	r3, r5
 80017fa:	dc26      	bgt.n	800184a <_printf_common+0x96>
 80017fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001800:	1e13      	subs	r3, r2, #0
 8001802:	6822      	ldr	r2, [r4, #0]
 8001804:	bf18      	it	ne
 8001806:	2301      	movne	r3, #1
 8001808:	0692      	lsls	r2, r2, #26
 800180a:	d42b      	bmi.n	8001864 <_printf_common+0xb0>
 800180c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001810:	4649      	mov	r1, r9
 8001812:	4638      	mov	r0, r7
 8001814:	47c0      	blx	r8
 8001816:	3001      	adds	r0, #1
 8001818:	d01e      	beq.n	8001858 <_printf_common+0xa4>
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	68e5      	ldr	r5, [r4, #12]
 800181e:	6832      	ldr	r2, [r6, #0]
 8001820:	f003 0306 	and.w	r3, r3, #6
 8001824:	2b04      	cmp	r3, #4
 8001826:	bf08      	it	eq
 8001828:	1aad      	subeq	r5, r5, r2
 800182a:	68a3      	ldr	r3, [r4, #8]
 800182c:	6922      	ldr	r2, [r4, #16]
 800182e:	bf0c      	ite	eq
 8001830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001834:	2500      	movne	r5, #0
 8001836:	4293      	cmp	r3, r2
 8001838:	bfc4      	itt	gt
 800183a:	1a9b      	subgt	r3, r3, r2
 800183c:	18ed      	addgt	r5, r5, r3
 800183e:	2600      	movs	r6, #0
 8001840:	341a      	adds	r4, #26
 8001842:	42b5      	cmp	r5, r6
 8001844:	d11a      	bne.n	800187c <_printf_common+0xc8>
 8001846:	2000      	movs	r0, #0
 8001848:	e008      	b.n	800185c <_printf_common+0xa8>
 800184a:	2301      	movs	r3, #1
 800184c:	4652      	mov	r2, sl
 800184e:	4649      	mov	r1, r9
 8001850:	4638      	mov	r0, r7
 8001852:	47c0      	blx	r8
 8001854:	3001      	adds	r0, #1
 8001856:	d103      	bne.n	8001860 <_printf_common+0xac>
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001860:	3501      	adds	r5, #1
 8001862:	e7c6      	b.n	80017f2 <_printf_common+0x3e>
 8001864:	18e1      	adds	r1, r4, r3
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	2030      	movs	r0, #48	; 0x30
 800186a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800186e:	4422      	add	r2, r4
 8001870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001878:	3302      	adds	r3, #2
 800187a:	e7c7      	b.n	800180c <_printf_common+0x58>
 800187c:	2301      	movs	r3, #1
 800187e:	4622      	mov	r2, r4
 8001880:	4649      	mov	r1, r9
 8001882:	4638      	mov	r0, r7
 8001884:	47c0      	blx	r8
 8001886:	3001      	adds	r0, #1
 8001888:	d0e6      	beq.n	8001858 <_printf_common+0xa4>
 800188a:	3601      	adds	r6, #1
 800188c:	e7d9      	b.n	8001842 <_printf_common+0x8e>
	...

08001890 <_printf_i>:
 8001890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001894:	7e0f      	ldrb	r7, [r1, #24]
 8001896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001898:	2f78      	cmp	r7, #120	; 0x78
 800189a:	4691      	mov	r9, r2
 800189c:	4680      	mov	r8, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	469a      	mov	sl, r3
 80018a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80018a6:	d807      	bhi.n	80018b8 <_printf_i+0x28>
 80018a8:	2f62      	cmp	r7, #98	; 0x62
 80018aa:	d80a      	bhi.n	80018c2 <_printf_i+0x32>
 80018ac:	2f00      	cmp	r7, #0
 80018ae:	f000 80d8 	beq.w	8001a62 <_printf_i+0x1d2>
 80018b2:	2f58      	cmp	r7, #88	; 0x58
 80018b4:	f000 80a3 	beq.w	80019fe <_printf_i+0x16e>
 80018b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80018c0:	e03a      	b.n	8001938 <_printf_i+0xa8>
 80018c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80018c6:	2b15      	cmp	r3, #21
 80018c8:	d8f6      	bhi.n	80018b8 <_printf_i+0x28>
 80018ca:	a101      	add	r1, pc, #4	; (adr r1, 80018d0 <_printf_i+0x40>)
 80018cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018d0:	08001929 	.word	0x08001929
 80018d4:	0800193d 	.word	0x0800193d
 80018d8:	080018b9 	.word	0x080018b9
 80018dc:	080018b9 	.word	0x080018b9
 80018e0:	080018b9 	.word	0x080018b9
 80018e4:	080018b9 	.word	0x080018b9
 80018e8:	0800193d 	.word	0x0800193d
 80018ec:	080018b9 	.word	0x080018b9
 80018f0:	080018b9 	.word	0x080018b9
 80018f4:	080018b9 	.word	0x080018b9
 80018f8:	080018b9 	.word	0x080018b9
 80018fc:	08001a49 	.word	0x08001a49
 8001900:	0800196d 	.word	0x0800196d
 8001904:	08001a2b 	.word	0x08001a2b
 8001908:	080018b9 	.word	0x080018b9
 800190c:	080018b9 	.word	0x080018b9
 8001910:	08001a6b 	.word	0x08001a6b
 8001914:	080018b9 	.word	0x080018b9
 8001918:	0800196d 	.word	0x0800196d
 800191c:	080018b9 	.word	0x080018b9
 8001920:	080018b9 	.word	0x080018b9
 8001924:	08001a33 	.word	0x08001a33
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	1d1a      	adds	r2, r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	602a      	str	r2, [r5, #0]
 8001930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001938:	2301      	movs	r3, #1
 800193a:	e0a3      	b.n	8001a84 <_printf_i+0x1f4>
 800193c:	6820      	ldr	r0, [r4, #0]
 800193e:	6829      	ldr	r1, [r5, #0]
 8001940:	0606      	lsls	r6, r0, #24
 8001942:	f101 0304 	add.w	r3, r1, #4
 8001946:	d50a      	bpl.n	800195e <_printf_i+0xce>
 8001948:	680e      	ldr	r6, [r1, #0]
 800194a:	602b      	str	r3, [r5, #0]
 800194c:	2e00      	cmp	r6, #0
 800194e:	da03      	bge.n	8001958 <_printf_i+0xc8>
 8001950:	232d      	movs	r3, #45	; 0x2d
 8001952:	4276      	negs	r6, r6
 8001954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001958:	485e      	ldr	r0, [pc, #376]	; (8001ad4 <_printf_i+0x244>)
 800195a:	230a      	movs	r3, #10
 800195c:	e019      	b.n	8001992 <_printf_i+0x102>
 800195e:	680e      	ldr	r6, [r1, #0]
 8001960:	602b      	str	r3, [r5, #0]
 8001962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001966:	bf18      	it	ne
 8001968:	b236      	sxthne	r6, r6
 800196a:	e7ef      	b.n	800194c <_printf_i+0xbc>
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	6820      	ldr	r0, [r4, #0]
 8001970:	1d19      	adds	r1, r3, #4
 8001972:	6029      	str	r1, [r5, #0]
 8001974:	0601      	lsls	r1, r0, #24
 8001976:	d501      	bpl.n	800197c <_printf_i+0xec>
 8001978:	681e      	ldr	r6, [r3, #0]
 800197a:	e002      	b.n	8001982 <_printf_i+0xf2>
 800197c:	0646      	lsls	r6, r0, #25
 800197e:	d5fb      	bpl.n	8001978 <_printf_i+0xe8>
 8001980:	881e      	ldrh	r6, [r3, #0]
 8001982:	4854      	ldr	r0, [pc, #336]	; (8001ad4 <_printf_i+0x244>)
 8001984:	2f6f      	cmp	r7, #111	; 0x6f
 8001986:	bf0c      	ite	eq
 8001988:	2308      	moveq	r3, #8
 800198a:	230a      	movne	r3, #10
 800198c:	2100      	movs	r1, #0
 800198e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001992:	6865      	ldr	r5, [r4, #4]
 8001994:	60a5      	str	r5, [r4, #8]
 8001996:	2d00      	cmp	r5, #0
 8001998:	bfa2      	ittt	ge
 800199a:	6821      	ldrge	r1, [r4, #0]
 800199c:	f021 0104 	bicge.w	r1, r1, #4
 80019a0:	6021      	strge	r1, [r4, #0]
 80019a2:	b90e      	cbnz	r6, 80019a8 <_printf_i+0x118>
 80019a4:	2d00      	cmp	r5, #0
 80019a6:	d04d      	beq.n	8001a44 <_printf_i+0x1b4>
 80019a8:	4615      	mov	r5, r2
 80019aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80019ae:	fb03 6711 	mls	r7, r3, r1, r6
 80019b2:	5dc7      	ldrb	r7, [r0, r7]
 80019b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80019b8:	4637      	mov	r7, r6
 80019ba:	42bb      	cmp	r3, r7
 80019bc:	460e      	mov	r6, r1
 80019be:	d9f4      	bls.n	80019aa <_printf_i+0x11a>
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d10b      	bne.n	80019dc <_printf_i+0x14c>
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	07de      	lsls	r6, r3, #31
 80019c8:	d508      	bpl.n	80019dc <_printf_i+0x14c>
 80019ca:	6923      	ldr	r3, [r4, #16]
 80019cc:	6861      	ldr	r1, [r4, #4]
 80019ce:	4299      	cmp	r1, r3
 80019d0:	bfde      	ittt	le
 80019d2:	2330      	movle	r3, #48	; 0x30
 80019d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80019d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80019dc:	1b52      	subs	r2, r2, r5
 80019de:	6122      	str	r2, [r4, #16]
 80019e0:	f8cd a000 	str.w	sl, [sp]
 80019e4:	464b      	mov	r3, r9
 80019e6:	aa03      	add	r2, sp, #12
 80019e8:	4621      	mov	r1, r4
 80019ea:	4640      	mov	r0, r8
 80019ec:	f7ff fee2 	bl	80017b4 <_printf_common>
 80019f0:	3001      	adds	r0, #1
 80019f2:	d14c      	bne.n	8001a8e <_printf_i+0x1fe>
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	b004      	add	sp, #16
 80019fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019fe:	4835      	ldr	r0, [pc, #212]	; (8001ad4 <_printf_i+0x244>)
 8001a00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001a04:	6829      	ldr	r1, [r5, #0]
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8001a0c:	6029      	str	r1, [r5, #0]
 8001a0e:	061d      	lsls	r5, r3, #24
 8001a10:	d514      	bpl.n	8001a3c <_printf_i+0x1ac>
 8001a12:	07df      	lsls	r7, r3, #31
 8001a14:	bf44      	itt	mi
 8001a16:	f043 0320 	orrmi.w	r3, r3, #32
 8001a1a:	6023      	strmi	r3, [r4, #0]
 8001a1c:	b91e      	cbnz	r6, 8001a26 <_printf_i+0x196>
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	f023 0320 	bic.w	r3, r3, #32
 8001a24:	6023      	str	r3, [r4, #0]
 8001a26:	2310      	movs	r3, #16
 8001a28:	e7b0      	b.n	800198c <_printf_i+0xfc>
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	6023      	str	r3, [r4, #0]
 8001a32:	2378      	movs	r3, #120	; 0x78
 8001a34:	4828      	ldr	r0, [pc, #160]	; (8001ad8 <_printf_i+0x248>)
 8001a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a3a:	e7e3      	b.n	8001a04 <_printf_i+0x174>
 8001a3c:	0659      	lsls	r1, r3, #25
 8001a3e:	bf48      	it	mi
 8001a40:	b2b6      	uxthmi	r6, r6
 8001a42:	e7e6      	b.n	8001a12 <_printf_i+0x182>
 8001a44:	4615      	mov	r5, r2
 8001a46:	e7bb      	b.n	80019c0 <_printf_i+0x130>
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	6826      	ldr	r6, [r4, #0]
 8001a4c:	6961      	ldr	r1, [r4, #20]
 8001a4e:	1d18      	adds	r0, r3, #4
 8001a50:	6028      	str	r0, [r5, #0]
 8001a52:	0635      	lsls	r5, r6, #24
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	d501      	bpl.n	8001a5c <_printf_i+0x1cc>
 8001a58:	6019      	str	r1, [r3, #0]
 8001a5a:	e002      	b.n	8001a62 <_printf_i+0x1d2>
 8001a5c:	0670      	lsls	r0, r6, #25
 8001a5e:	d5fb      	bpl.n	8001a58 <_printf_i+0x1c8>
 8001a60:	8019      	strh	r1, [r3, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	6123      	str	r3, [r4, #16]
 8001a66:	4615      	mov	r5, r2
 8001a68:	e7ba      	b.n	80019e0 <_printf_i+0x150>
 8001a6a:	682b      	ldr	r3, [r5, #0]
 8001a6c:	1d1a      	adds	r2, r3, #4
 8001a6e:	602a      	str	r2, [r5, #0]
 8001a70:	681d      	ldr	r5, [r3, #0]
 8001a72:	6862      	ldr	r2, [r4, #4]
 8001a74:	2100      	movs	r1, #0
 8001a76:	4628      	mov	r0, r5
 8001a78:	f7fe fbba 	bl	80001f0 <memchr>
 8001a7c:	b108      	cbz	r0, 8001a82 <_printf_i+0x1f2>
 8001a7e:	1b40      	subs	r0, r0, r5
 8001a80:	6060      	str	r0, [r4, #4]
 8001a82:	6863      	ldr	r3, [r4, #4]
 8001a84:	6123      	str	r3, [r4, #16]
 8001a86:	2300      	movs	r3, #0
 8001a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a8c:	e7a8      	b.n	80019e0 <_printf_i+0x150>
 8001a8e:	6923      	ldr	r3, [r4, #16]
 8001a90:	462a      	mov	r2, r5
 8001a92:	4649      	mov	r1, r9
 8001a94:	4640      	mov	r0, r8
 8001a96:	47d0      	blx	sl
 8001a98:	3001      	adds	r0, #1
 8001a9a:	d0ab      	beq.n	80019f4 <_printf_i+0x164>
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	079b      	lsls	r3, r3, #30
 8001aa0:	d413      	bmi.n	8001aca <_printf_i+0x23a>
 8001aa2:	68e0      	ldr	r0, [r4, #12]
 8001aa4:	9b03      	ldr	r3, [sp, #12]
 8001aa6:	4298      	cmp	r0, r3
 8001aa8:	bfb8      	it	lt
 8001aaa:	4618      	movlt	r0, r3
 8001aac:	e7a4      	b.n	80019f8 <_printf_i+0x168>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	4632      	mov	r2, r6
 8001ab2:	4649      	mov	r1, r9
 8001ab4:	4640      	mov	r0, r8
 8001ab6:	47d0      	blx	sl
 8001ab8:	3001      	adds	r0, #1
 8001aba:	d09b      	beq.n	80019f4 <_printf_i+0x164>
 8001abc:	3501      	adds	r5, #1
 8001abe:	68e3      	ldr	r3, [r4, #12]
 8001ac0:	9903      	ldr	r1, [sp, #12]
 8001ac2:	1a5b      	subs	r3, r3, r1
 8001ac4:	42ab      	cmp	r3, r5
 8001ac6:	dcf2      	bgt.n	8001aae <_printf_i+0x21e>
 8001ac8:	e7eb      	b.n	8001aa2 <_printf_i+0x212>
 8001aca:	2500      	movs	r5, #0
 8001acc:	f104 0619 	add.w	r6, r4, #25
 8001ad0:	e7f5      	b.n	8001abe <_printf_i+0x22e>
 8001ad2:	bf00      	nop
 8001ad4:	080021e1 	.word	0x080021e1
 8001ad8:	080021f2 	.word	0x080021f2

08001adc <_sbrk_r>:
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	4d06      	ldr	r5, [pc, #24]	; (8001af8 <_sbrk_r+0x1c>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	602b      	str	r3, [r5, #0]
 8001ae8:	f000 fb16 	bl	8002118 <_sbrk>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_sbrk_r+0x1a>
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_sbrk_r+0x1a>
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	200002a8 	.word	0x200002a8

08001afc <__sread>:
 8001afc:	b510      	push	{r4, lr}
 8001afe:	460c      	mov	r4, r1
 8001b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b04:	f000 faac 	bl	8002060 <_read_r>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	bfab      	itete	ge
 8001b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8001b10:	181b      	addge	r3, r3, r0
 8001b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b16:	bfac      	ite	ge
 8001b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b1a:	81a3      	strhlt	r3, [r4, #12]
 8001b1c:	bd10      	pop	{r4, pc}

08001b1e <__swrite>:
 8001b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b22:	461f      	mov	r7, r3
 8001b24:	898b      	ldrh	r3, [r1, #12]
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	4605      	mov	r5, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4616      	mov	r6, r2
 8001b2e:	d505      	bpl.n	8001b3c <__swrite+0x1e>
 8001b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b34:	2302      	movs	r3, #2
 8001b36:	2200      	movs	r2, #0
 8001b38:	f000 f9c4 	bl	8001ec4 <_lseek_r>
 8001b3c:	89a3      	ldrh	r3, [r4, #12]
 8001b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b46:	81a3      	strh	r3, [r4, #12]
 8001b48:	4632      	mov	r2, r6
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b52:	f000 b869 	b.w	8001c28 <_write_r>

08001b56 <__sseek>:
 8001b56:	b510      	push	{r4, lr}
 8001b58:	460c      	mov	r4, r1
 8001b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b5e:	f000 f9b1 	bl	8001ec4 <_lseek_r>
 8001b62:	1c43      	adds	r3, r0, #1
 8001b64:	89a3      	ldrh	r3, [r4, #12]
 8001b66:	bf15      	itete	ne
 8001b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b72:	81a3      	strheq	r3, [r4, #12]
 8001b74:	bf18      	it	ne
 8001b76:	81a3      	strhne	r3, [r4, #12]
 8001b78:	bd10      	pop	{r4, pc}

08001b7a <__sclose>:
 8001b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b7e:	f000 b8d3 	b.w	8001d28 <_close_r>
	...

08001b84 <__swbuf_r>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	460e      	mov	r6, r1
 8001b88:	4614      	mov	r4, r2
 8001b8a:	4605      	mov	r5, r0
 8001b8c:	b118      	cbz	r0, 8001b96 <__swbuf_r+0x12>
 8001b8e:	6983      	ldr	r3, [r0, #24]
 8001b90:	b90b      	cbnz	r3, 8001b96 <__swbuf_r+0x12>
 8001b92:	f7ff fb83 	bl	800129c <__sinit>
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <__swbuf_r+0x98>)
 8001b98:	429c      	cmp	r4, r3
 8001b9a:	d12b      	bne.n	8001bf4 <__swbuf_r+0x70>
 8001b9c:	686c      	ldr	r4, [r5, #4]
 8001b9e:	69a3      	ldr	r3, [r4, #24]
 8001ba0:	60a3      	str	r3, [r4, #8]
 8001ba2:	89a3      	ldrh	r3, [r4, #12]
 8001ba4:	071a      	lsls	r2, r3, #28
 8001ba6:	d52f      	bpl.n	8001c08 <__swbuf_r+0x84>
 8001ba8:	6923      	ldr	r3, [r4, #16]
 8001baa:	b36b      	cbz	r3, 8001c08 <__swbuf_r+0x84>
 8001bac:	6923      	ldr	r3, [r4, #16]
 8001bae:	6820      	ldr	r0, [r4, #0]
 8001bb0:	1ac0      	subs	r0, r0, r3
 8001bb2:	6963      	ldr	r3, [r4, #20]
 8001bb4:	b2f6      	uxtb	r6, r6
 8001bb6:	4283      	cmp	r3, r0
 8001bb8:	4637      	mov	r7, r6
 8001bba:	dc04      	bgt.n	8001bc6 <__swbuf_r+0x42>
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f000 f944 	bl	8001e4c <_fflush_r>
 8001bc4:	bb30      	cbnz	r0, 8001c14 <__swbuf_r+0x90>
 8001bc6:	68a3      	ldr	r3, [r4, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60a3      	str	r3, [r4, #8]
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	6022      	str	r2, [r4, #0]
 8001bd2:	701e      	strb	r6, [r3, #0]
 8001bd4:	6963      	ldr	r3, [r4, #20]
 8001bd6:	3001      	adds	r0, #1
 8001bd8:	4283      	cmp	r3, r0
 8001bda:	d004      	beq.n	8001be6 <__swbuf_r+0x62>
 8001bdc:	89a3      	ldrh	r3, [r4, #12]
 8001bde:	07db      	lsls	r3, r3, #31
 8001be0:	d506      	bpl.n	8001bf0 <__swbuf_r+0x6c>
 8001be2:	2e0a      	cmp	r6, #10
 8001be4:	d104      	bne.n	8001bf0 <__swbuf_r+0x6c>
 8001be6:	4621      	mov	r1, r4
 8001be8:	4628      	mov	r0, r5
 8001bea:	f000 f92f 	bl	8001e4c <_fflush_r>
 8001bee:	b988      	cbnz	r0, 8001c14 <__swbuf_r+0x90>
 8001bf0:	4638      	mov	r0, r7
 8001bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <__swbuf_r+0x9c>)
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	d101      	bne.n	8001bfe <__swbuf_r+0x7a>
 8001bfa:	68ac      	ldr	r4, [r5, #8]
 8001bfc:	e7cf      	b.n	8001b9e <__swbuf_r+0x1a>
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <__swbuf_r+0xa0>)
 8001c00:	429c      	cmp	r4, r3
 8001c02:	bf08      	it	eq
 8001c04:	68ec      	ldreq	r4, [r5, #12]
 8001c06:	e7ca      	b.n	8001b9e <__swbuf_r+0x1a>
 8001c08:	4621      	mov	r1, r4
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f000 f81e 	bl	8001c4c <__swsetup_r>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d0cb      	beq.n	8001bac <__swbuf_r+0x28>
 8001c14:	f04f 37ff 	mov.w	r7, #4294967295
 8001c18:	e7ea      	b.n	8001bf0 <__swbuf_r+0x6c>
 8001c1a:	bf00      	nop
 8001c1c:	08002190 	.word	0x08002190
 8001c20:	080021b0 	.word	0x080021b0
 8001c24:	08002170 	.word	0x08002170

08001c28 <_write_r>:
 8001c28:	b538      	push	{r3, r4, r5, lr}
 8001c2a:	4d07      	ldr	r5, [pc, #28]	; (8001c48 <_write_r+0x20>)
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	4608      	mov	r0, r1
 8001c30:	4611      	mov	r1, r2
 8001c32:	2200      	movs	r2, #0
 8001c34:	602a      	str	r2, [r5, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f000 fa7c 	bl	8002134 <_write>
 8001c3c:	1c43      	adds	r3, r0, #1
 8001c3e:	d102      	bne.n	8001c46 <_write_r+0x1e>
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	b103      	cbz	r3, 8001c46 <_write_r+0x1e>
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	bd38      	pop	{r3, r4, r5, pc}
 8001c48:	200002a8 	.word	0x200002a8

08001c4c <__swsetup_r>:
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <__swsetup_r+0xcc>)
 8001c4e:	b570      	push	{r4, r5, r6, lr}
 8001c50:	681d      	ldr	r5, [r3, #0]
 8001c52:	4606      	mov	r6, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	b125      	cbz	r5, 8001c62 <__swsetup_r+0x16>
 8001c58:	69ab      	ldr	r3, [r5, #24]
 8001c5a:	b913      	cbnz	r3, 8001c62 <__swsetup_r+0x16>
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f7ff fb1d 	bl	800129c <__sinit>
 8001c62:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <__swsetup_r+0xd0>)
 8001c64:	429c      	cmp	r4, r3
 8001c66:	d10f      	bne.n	8001c88 <__swsetup_r+0x3c>
 8001c68:	686c      	ldr	r4, [r5, #4]
 8001c6a:	89a3      	ldrh	r3, [r4, #12]
 8001c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c70:	0719      	lsls	r1, r3, #28
 8001c72:	d42c      	bmi.n	8001cce <__swsetup_r+0x82>
 8001c74:	06dd      	lsls	r5, r3, #27
 8001c76:	d411      	bmi.n	8001c9c <__swsetup_r+0x50>
 8001c78:	2309      	movs	r3, #9
 8001c7a:	6033      	str	r3, [r6, #0]
 8001c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c80:	81a3      	strh	r3, [r4, #12]
 8001c82:	f04f 30ff 	mov.w	r0, #4294967295
 8001c86:	e03e      	b.n	8001d06 <__swsetup_r+0xba>
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <__swsetup_r+0xd4>)
 8001c8a:	429c      	cmp	r4, r3
 8001c8c:	d101      	bne.n	8001c92 <__swsetup_r+0x46>
 8001c8e:	68ac      	ldr	r4, [r5, #8]
 8001c90:	e7eb      	b.n	8001c6a <__swsetup_r+0x1e>
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <__swsetup_r+0xd8>)
 8001c94:	429c      	cmp	r4, r3
 8001c96:	bf08      	it	eq
 8001c98:	68ec      	ldreq	r4, [r5, #12]
 8001c9a:	e7e6      	b.n	8001c6a <__swsetup_r+0x1e>
 8001c9c:	0758      	lsls	r0, r3, #29
 8001c9e:	d512      	bpl.n	8001cc6 <__swsetup_r+0x7a>
 8001ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ca2:	b141      	cbz	r1, 8001cb6 <__swsetup_r+0x6a>
 8001ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ca8:	4299      	cmp	r1, r3
 8001caa:	d002      	beq.n	8001cb2 <__swsetup_r+0x66>
 8001cac:	4630      	mov	r0, r6
 8001cae:	f000 f98d 	bl	8001fcc <_free_r>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8001cb6:	89a3      	ldrh	r3, [r4, #12]
 8001cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001cbc:	81a3      	strh	r3, [r4, #12]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6063      	str	r3, [r4, #4]
 8001cc2:	6923      	ldr	r3, [r4, #16]
 8001cc4:	6023      	str	r3, [r4, #0]
 8001cc6:	89a3      	ldrh	r3, [r4, #12]
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	81a3      	strh	r3, [r4, #12]
 8001cce:	6923      	ldr	r3, [r4, #16]
 8001cd0:	b94b      	cbnz	r3, 8001ce6 <__swsetup_r+0x9a>
 8001cd2:	89a3      	ldrh	r3, [r4, #12]
 8001cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cdc:	d003      	beq.n	8001ce6 <__swsetup_r+0x9a>
 8001cde:	4621      	mov	r1, r4
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f000 f927 	bl	8001f34 <__smakebuf_r>
 8001ce6:	89a0      	ldrh	r0, [r4, #12]
 8001ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cec:	f010 0301 	ands.w	r3, r0, #1
 8001cf0:	d00a      	beq.n	8001d08 <__swsetup_r+0xbc>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60a3      	str	r3, [r4, #8]
 8001cf6:	6963      	ldr	r3, [r4, #20]
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	61a3      	str	r3, [r4, #24]
 8001cfc:	6923      	ldr	r3, [r4, #16]
 8001cfe:	b943      	cbnz	r3, 8001d12 <__swsetup_r+0xc6>
 8001d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d04:	d1ba      	bne.n	8001c7c <__swsetup_r+0x30>
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
 8001d08:	0781      	lsls	r1, r0, #30
 8001d0a:	bf58      	it	pl
 8001d0c:	6963      	ldrpl	r3, [r4, #20]
 8001d0e:	60a3      	str	r3, [r4, #8]
 8001d10:	e7f4      	b.n	8001cfc <__swsetup_r+0xb0>
 8001d12:	2000      	movs	r0, #0
 8001d14:	e7f7      	b.n	8001d06 <__swsetup_r+0xba>
 8001d16:	bf00      	nop
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	08002190 	.word	0x08002190
 8001d20:	080021b0 	.word	0x080021b0
 8001d24:	08002170 	.word	0x08002170

08001d28 <_close_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	4d06      	ldr	r5, [pc, #24]	; (8001d44 <_close_r+0x1c>)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	4604      	mov	r4, r0
 8001d30:	4608      	mov	r0, r1
 8001d32:	602b      	str	r3, [r5, #0]
 8001d34:	f000 f9c8 	bl	80020c8 <_close>
 8001d38:	1c43      	adds	r3, r0, #1
 8001d3a:	d102      	bne.n	8001d42 <_close_r+0x1a>
 8001d3c:	682b      	ldr	r3, [r5, #0]
 8001d3e:	b103      	cbz	r3, 8001d42 <_close_r+0x1a>
 8001d40:	6023      	str	r3, [r4, #0]
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
 8001d44:	200002a8 	.word	0x200002a8

08001d48 <__sflush_r>:
 8001d48:	898a      	ldrh	r2, [r1, #12]
 8001d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4c:	4605      	mov	r5, r0
 8001d4e:	0710      	lsls	r0, r2, #28
 8001d50:	460c      	mov	r4, r1
 8001d52:	d457      	bmi.n	8001e04 <__sflush_r+0xbc>
 8001d54:	684b      	ldr	r3, [r1, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dc04      	bgt.n	8001d64 <__sflush_r+0x1c>
 8001d5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	dc01      	bgt.n	8001d64 <__sflush_r+0x1c>
 8001d60:	2000      	movs	r0, #0
 8001d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d66:	2e00      	cmp	r6, #0
 8001d68:	d0fa      	beq.n	8001d60 <__sflush_r+0x18>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d70:	682f      	ldr	r7, [r5, #0]
 8001d72:	602b      	str	r3, [r5, #0]
 8001d74:	d032      	beq.n	8001ddc <__sflush_r+0x94>
 8001d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d78:	89a3      	ldrh	r3, [r4, #12]
 8001d7a:	075a      	lsls	r2, r3, #29
 8001d7c:	d505      	bpl.n	8001d8a <__sflush_r+0x42>
 8001d7e:	6863      	ldr	r3, [r4, #4]
 8001d80:	1ac0      	subs	r0, r0, r3
 8001d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d84:	b10b      	cbz	r3, 8001d8a <__sflush_r+0x42>
 8001d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d88:	1ac0      	subs	r0, r0, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d90:	6a21      	ldr	r1, [r4, #32]
 8001d92:	4628      	mov	r0, r5
 8001d94:	47b0      	blx	r6
 8001d96:	1c43      	adds	r3, r0, #1
 8001d98:	89a3      	ldrh	r3, [r4, #12]
 8001d9a:	d106      	bne.n	8001daa <__sflush_r+0x62>
 8001d9c:	6829      	ldr	r1, [r5, #0]
 8001d9e:	291d      	cmp	r1, #29
 8001da0:	d82c      	bhi.n	8001dfc <__sflush_r+0xb4>
 8001da2:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <__sflush_r+0x100>)
 8001da4:	40ca      	lsrs	r2, r1
 8001da6:	07d6      	lsls	r6, r2, #31
 8001da8:	d528      	bpl.n	8001dfc <__sflush_r+0xb4>
 8001daa:	2200      	movs	r2, #0
 8001dac:	6062      	str	r2, [r4, #4]
 8001dae:	04d9      	lsls	r1, r3, #19
 8001db0:	6922      	ldr	r2, [r4, #16]
 8001db2:	6022      	str	r2, [r4, #0]
 8001db4:	d504      	bpl.n	8001dc0 <__sflush_r+0x78>
 8001db6:	1c42      	adds	r2, r0, #1
 8001db8:	d101      	bne.n	8001dbe <__sflush_r+0x76>
 8001dba:	682b      	ldr	r3, [r5, #0]
 8001dbc:	b903      	cbnz	r3, 8001dc0 <__sflush_r+0x78>
 8001dbe:	6560      	str	r0, [r4, #84]	; 0x54
 8001dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dc2:	602f      	str	r7, [r5, #0]
 8001dc4:	2900      	cmp	r1, #0
 8001dc6:	d0cb      	beq.n	8001d60 <__sflush_r+0x18>
 8001dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001dcc:	4299      	cmp	r1, r3
 8001dce:	d002      	beq.n	8001dd6 <__sflush_r+0x8e>
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f000 f8fb 	bl	8001fcc <_free_r>
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	6360      	str	r0, [r4, #52]	; 0x34
 8001dda:	e7c2      	b.n	8001d62 <__sflush_r+0x1a>
 8001ddc:	6a21      	ldr	r1, [r4, #32]
 8001dde:	2301      	movs	r3, #1
 8001de0:	4628      	mov	r0, r5
 8001de2:	47b0      	blx	r6
 8001de4:	1c41      	adds	r1, r0, #1
 8001de6:	d1c7      	bne.n	8001d78 <__sflush_r+0x30>
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0c4      	beq.n	8001d78 <__sflush_r+0x30>
 8001dee:	2b1d      	cmp	r3, #29
 8001df0:	d001      	beq.n	8001df6 <__sflush_r+0xae>
 8001df2:	2b16      	cmp	r3, #22
 8001df4:	d101      	bne.n	8001dfa <__sflush_r+0xb2>
 8001df6:	602f      	str	r7, [r5, #0]
 8001df8:	e7b2      	b.n	8001d60 <__sflush_r+0x18>
 8001dfa:	89a3      	ldrh	r3, [r4, #12]
 8001dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e00:	81a3      	strh	r3, [r4, #12]
 8001e02:	e7ae      	b.n	8001d62 <__sflush_r+0x1a>
 8001e04:	690f      	ldr	r7, [r1, #16]
 8001e06:	2f00      	cmp	r7, #0
 8001e08:	d0aa      	beq.n	8001d60 <__sflush_r+0x18>
 8001e0a:	0793      	lsls	r3, r2, #30
 8001e0c:	680e      	ldr	r6, [r1, #0]
 8001e0e:	bf08      	it	eq
 8001e10:	694b      	ldreq	r3, [r1, #20]
 8001e12:	600f      	str	r7, [r1, #0]
 8001e14:	bf18      	it	ne
 8001e16:	2300      	movne	r3, #0
 8001e18:	1bf6      	subs	r6, r6, r7
 8001e1a:	608b      	str	r3, [r1, #8]
 8001e1c:	2e00      	cmp	r6, #0
 8001e1e:	dd9f      	ble.n	8001d60 <__sflush_r+0x18>
 8001e20:	6a21      	ldr	r1, [r4, #32]
 8001e22:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001e26:	4633      	mov	r3, r6
 8001e28:	463a      	mov	r2, r7
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	47e0      	blx	ip
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	dc06      	bgt.n	8001e40 <__sflush_r+0xf8>
 8001e32:	89a3      	ldrh	r3, [r4, #12]
 8001e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e38:	81a3      	strh	r3, [r4, #12]
 8001e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3e:	e790      	b.n	8001d62 <__sflush_r+0x1a>
 8001e40:	4407      	add	r7, r0
 8001e42:	1a36      	subs	r6, r6, r0
 8001e44:	e7ea      	b.n	8001e1c <__sflush_r+0xd4>
 8001e46:	bf00      	nop
 8001e48:	20400001 	.word	0x20400001

08001e4c <_fflush_r>:
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	690b      	ldr	r3, [r1, #16]
 8001e50:	4605      	mov	r5, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	b913      	cbnz	r3, 8001e5c <_fflush_r+0x10>
 8001e56:	2500      	movs	r5, #0
 8001e58:	4628      	mov	r0, r5
 8001e5a:	bd38      	pop	{r3, r4, r5, pc}
 8001e5c:	b118      	cbz	r0, 8001e66 <_fflush_r+0x1a>
 8001e5e:	6983      	ldr	r3, [r0, #24]
 8001e60:	b90b      	cbnz	r3, 8001e66 <_fflush_r+0x1a>
 8001e62:	f7ff fa1b 	bl	800129c <__sinit>
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <_fflush_r+0x6c>)
 8001e68:	429c      	cmp	r4, r3
 8001e6a:	d11b      	bne.n	8001ea4 <_fflush_r+0x58>
 8001e6c:	686c      	ldr	r4, [r5, #4]
 8001e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ef      	beq.n	8001e56 <_fflush_r+0xa>
 8001e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e78:	07d0      	lsls	r0, r2, #31
 8001e7a:	d404      	bmi.n	8001e86 <_fflush_r+0x3a>
 8001e7c:	0599      	lsls	r1, r3, #22
 8001e7e:	d402      	bmi.n	8001e86 <_fflush_r+0x3a>
 8001e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e82:	f7ff faa9 	bl	80013d8 <__retarget_lock_acquire_recursive>
 8001e86:	4628      	mov	r0, r5
 8001e88:	4621      	mov	r1, r4
 8001e8a:	f7ff ff5d 	bl	8001d48 <__sflush_r>
 8001e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e90:	07da      	lsls	r2, r3, #31
 8001e92:	4605      	mov	r5, r0
 8001e94:	d4e0      	bmi.n	8001e58 <_fflush_r+0xc>
 8001e96:	89a3      	ldrh	r3, [r4, #12]
 8001e98:	059b      	lsls	r3, r3, #22
 8001e9a:	d4dd      	bmi.n	8001e58 <_fflush_r+0xc>
 8001e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e9e:	f7ff fa9c 	bl	80013da <__retarget_lock_release_recursive>
 8001ea2:	e7d9      	b.n	8001e58 <_fflush_r+0xc>
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <_fflush_r+0x70>)
 8001ea6:	429c      	cmp	r4, r3
 8001ea8:	d101      	bne.n	8001eae <_fflush_r+0x62>
 8001eaa:	68ac      	ldr	r4, [r5, #8]
 8001eac:	e7df      	b.n	8001e6e <_fflush_r+0x22>
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <_fflush_r+0x74>)
 8001eb0:	429c      	cmp	r4, r3
 8001eb2:	bf08      	it	eq
 8001eb4:	68ec      	ldreq	r4, [r5, #12]
 8001eb6:	e7da      	b.n	8001e6e <_fflush_r+0x22>
 8001eb8:	08002190 	.word	0x08002190
 8001ebc:	080021b0 	.word	0x080021b0
 8001ec0:	08002170 	.word	0x08002170

08001ec4 <_lseek_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4d07      	ldr	r5, [pc, #28]	; (8001ee4 <_lseek_r+0x20>)
 8001ec8:	4604      	mov	r4, r0
 8001eca:	4608      	mov	r0, r1
 8001ecc:	4611      	mov	r1, r2
 8001ece:	2200      	movs	r2, #0
 8001ed0:	602a      	str	r2, [r5, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f000 f910 	bl	80020f8 <_lseek>
 8001ed8:	1c43      	adds	r3, r0, #1
 8001eda:	d102      	bne.n	8001ee2 <_lseek_r+0x1e>
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	b103      	cbz	r3, 8001ee2 <_lseek_r+0x1e>
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	200002a8 	.word	0x200002a8

08001ee8 <__swhatbuf_r>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	460e      	mov	r6, r1
 8001eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef0:	2900      	cmp	r1, #0
 8001ef2:	b096      	sub	sp, #88	; 0x58
 8001ef4:	4614      	mov	r4, r2
 8001ef6:	461d      	mov	r5, r3
 8001ef8:	da08      	bge.n	8001f0c <__swhatbuf_r+0x24>
 8001efa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	602a      	str	r2, [r5, #0]
 8001f02:	061a      	lsls	r2, r3, #24
 8001f04:	d410      	bmi.n	8001f28 <__swhatbuf_r+0x40>
 8001f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0a:	e00e      	b.n	8001f2a <__swhatbuf_r+0x42>
 8001f0c:	466a      	mov	r2, sp
 8001f0e:	f000 f8b9 	bl	8002084 <_fstat_r>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	dbf1      	blt.n	8001efa <__swhatbuf_r+0x12>
 8001f16:	9a01      	ldr	r2, [sp, #4]
 8001f18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f20:	425a      	negs	r2, r3
 8001f22:	415a      	adcs	r2, r3
 8001f24:	602a      	str	r2, [r5, #0]
 8001f26:	e7ee      	b.n	8001f06 <__swhatbuf_r+0x1e>
 8001f28:	2340      	movs	r3, #64	; 0x40
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	6023      	str	r3, [r4, #0]
 8001f2e:	b016      	add	sp, #88	; 0x58
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f34 <__smakebuf_r>:
 8001f34:	898b      	ldrh	r3, [r1, #12]
 8001f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f38:	079d      	lsls	r5, r3, #30
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	d507      	bpl.n	8001f50 <__smakebuf_r+0x1c>
 8001f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f44:	6023      	str	r3, [r4, #0]
 8001f46:	6123      	str	r3, [r4, #16]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	6163      	str	r3, [r4, #20]
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd70      	pop	{r4, r5, r6, pc}
 8001f50:	ab01      	add	r3, sp, #4
 8001f52:	466a      	mov	r2, sp
 8001f54:	f7ff ffc8 	bl	8001ee8 <__swhatbuf_r>
 8001f58:	9900      	ldr	r1, [sp, #0]
 8001f5a:	4605      	mov	r5, r0
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	f7ff fa5d 	bl	800141c <_malloc_r>
 8001f62:	b948      	cbnz	r0, 8001f78 <__smakebuf_r+0x44>
 8001f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f68:	059a      	lsls	r2, r3, #22
 8001f6a:	d4ef      	bmi.n	8001f4c <__smakebuf_r+0x18>
 8001f6c:	f023 0303 	bic.w	r3, r3, #3
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	81a3      	strh	r3, [r4, #12]
 8001f76:	e7e3      	b.n	8001f40 <__smakebuf_r+0xc>
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <__smakebuf_r+0x7c>)
 8001f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f7c:	89a3      	ldrh	r3, [r4, #12]
 8001f7e:	6020      	str	r0, [r4, #0]
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	81a3      	strh	r3, [r4, #12]
 8001f86:	9b00      	ldr	r3, [sp, #0]
 8001f88:	6163      	str	r3, [r4, #20]
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	6120      	str	r0, [r4, #16]
 8001f8e:	b15b      	cbz	r3, 8001fa8 <__smakebuf_r+0x74>
 8001f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f94:	4630      	mov	r0, r6
 8001f96:	f000 f887 	bl	80020a8 <_isatty_r>
 8001f9a:	b128      	cbz	r0, 8001fa8 <__smakebuf_r+0x74>
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	81a3      	strh	r3, [r4, #12]
 8001fa8:	89a0      	ldrh	r0, [r4, #12]
 8001faa:	4305      	orrs	r5, r0
 8001fac:	81a5      	strh	r5, [r4, #12]
 8001fae:	e7cd      	b.n	8001f4c <__smakebuf_r+0x18>
 8001fb0:	08001235 	.word	0x08001235

08001fb4 <__malloc_lock>:
 8001fb4:	4801      	ldr	r0, [pc, #4]	; (8001fbc <__malloc_lock+0x8>)
 8001fb6:	f7ff ba0f 	b.w	80013d8 <__retarget_lock_acquire_recursive>
 8001fba:	bf00      	nop
 8001fbc:	2000029c 	.word	0x2000029c

08001fc0 <__malloc_unlock>:
 8001fc0:	4801      	ldr	r0, [pc, #4]	; (8001fc8 <__malloc_unlock+0x8>)
 8001fc2:	f7ff ba0a 	b.w	80013da <__retarget_lock_release_recursive>
 8001fc6:	bf00      	nop
 8001fc8:	2000029c 	.word	0x2000029c

08001fcc <_free_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4605      	mov	r5, r0
 8001fd0:	2900      	cmp	r1, #0
 8001fd2:	d041      	beq.n	8002058 <_free_r+0x8c>
 8001fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fd8:	1f0c      	subs	r4, r1, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bfb8      	it	lt
 8001fde:	18e4      	addlt	r4, r4, r3
 8001fe0:	f7ff ffe8 	bl	8001fb4 <__malloc_lock>
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <_free_r+0x90>)
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	b933      	cbnz	r3, 8001ff8 <_free_r+0x2c>
 8001fea:	6063      	str	r3, [r4, #4]
 8001fec:	6014      	str	r4, [r2, #0]
 8001fee:	4628      	mov	r0, r5
 8001ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ff4:	f7ff bfe4 	b.w	8001fc0 <__malloc_unlock>
 8001ff8:	42a3      	cmp	r3, r4
 8001ffa:	d908      	bls.n	800200e <_free_r+0x42>
 8001ffc:	6820      	ldr	r0, [r4, #0]
 8001ffe:	1821      	adds	r1, r4, r0
 8002000:	428b      	cmp	r3, r1
 8002002:	bf01      	itttt	eq
 8002004:	6819      	ldreq	r1, [r3, #0]
 8002006:	685b      	ldreq	r3, [r3, #4]
 8002008:	1809      	addeq	r1, r1, r0
 800200a:	6021      	streq	r1, [r4, #0]
 800200c:	e7ed      	b.n	8001fea <_free_r+0x1e>
 800200e:	461a      	mov	r2, r3
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	b10b      	cbz	r3, 8002018 <_free_r+0x4c>
 8002014:	42a3      	cmp	r3, r4
 8002016:	d9fa      	bls.n	800200e <_free_r+0x42>
 8002018:	6811      	ldr	r1, [r2, #0]
 800201a:	1850      	adds	r0, r2, r1
 800201c:	42a0      	cmp	r0, r4
 800201e:	d10b      	bne.n	8002038 <_free_r+0x6c>
 8002020:	6820      	ldr	r0, [r4, #0]
 8002022:	4401      	add	r1, r0
 8002024:	1850      	adds	r0, r2, r1
 8002026:	4283      	cmp	r3, r0
 8002028:	6011      	str	r1, [r2, #0]
 800202a:	d1e0      	bne.n	8001fee <_free_r+0x22>
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	6053      	str	r3, [r2, #4]
 8002032:	4401      	add	r1, r0
 8002034:	6011      	str	r1, [r2, #0]
 8002036:	e7da      	b.n	8001fee <_free_r+0x22>
 8002038:	d902      	bls.n	8002040 <_free_r+0x74>
 800203a:	230c      	movs	r3, #12
 800203c:	602b      	str	r3, [r5, #0]
 800203e:	e7d6      	b.n	8001fee <_free_r+0x22>
 8002040:	6820      	ldr	r0, [r4, #0]
 8002042:	1821      	adds	r1, r4, r0
 8002044:	428b      	cmp	r3, r1
 8002046:	bf04      	itt	eq
 8002048:	6819      	ldreq	r1, [r3, #0]
 800204a:	685b      	ldreq	r3, [r3, #4]
 800204c:	6063      	str	r3, [r4, #4]
 800204e:	bf04      	itt	eq
 8002050:	1809      	addeq	r1, r1, r0
 8002052:	6021      	streq	r1, [r4, #0]
 8002054:	6054      	str	r4, [r2, #4]
 8002056:	e7ca      	b.n	8001fee <_free_r+0x22>
 8002058:	bd38      	pop	{r3, r4, r5, pc}
 800205a:	bf00      	nop
 800205c:	200002a0 	.word	0x200002a0

08002060 <_read_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4d07      	ldr	r5, [pc, #28]	; (8002080 <_read_r+0x20>)
 8002064:	4604      	mov	r4, r0
 8002066:	4608      	mov	r0, r1
 8002068:	4611      	mov	r1, r2
 800206a:	2200      	movs	r2, #0
 800206c:	602a      	str	r2, [r5, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f000 f84a 	bl	8002108 <_read>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d102      	bne.n	800207e <_read_r+0x1e>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	b103      	cbz	r3, 800207e <_read_r+0x1e>
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	200002a8 	.word	0x200002a8

08002084 <_fstat_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4d07      	ldr	r5, [pc, #28]	; (80020a4 <_fstat_r+0x20>)
 8002088:	2300      	movs	r3, #0
 800208a:	4604      	mov	r4, r0
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	602b      	str	r3, [r5, #0]
 8002092:	f000 f821 	bl	80020d8 <_fstat>
 8002096:	1c43      	adds	r3, r0, #1
 8002098:	d102      	bne.n	80020a0 <_fstat_r+0x1c>
 800209a:	682b      	ldr	r3, [r5, #0]
 800209c:	b103      	cbz	r3, 80020a0 <_fstat_r+0x1c>
 800209e:	6023      	str	r3, [r4, #0]
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
 80020a2:	bf00      	nop
 80020a4:	200002a8 	.word	0x200002a8

080020a8 <_isatty_r>:
 80020a8:	b538      	push	{r3, r4, r5, lr}
 80020aa:	4d06      	ldr	r5, [pc, #24]	; (80020c4 <_isatty_r+0x1c>)
 80020ac:	2300      	movs	r3, #0
 80020ae:	4604      	mov	r4, r0
 80020b0:	4608      	mov	r0, r1
 80020b2:	602b      	str	r3, [r5, #0]
 80020b4:	f000 f818 	bl	80020e8 <_isatty>
 80020b8:	1c43      	adds	r3, r0, #1
 80020ba:	d102      	bne.n	80020c2 <_isatty_r+0x1a>
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	b103      	cbz	r3, 80020c2 <_isatty_r+0x1a>
 80020c0:	6023      	str	r3, [r4, #0]
 80020c2:	bd38      	pop	{r3, r4, r5, pc}
 80020c4:	200002a8 	.word	0x200002a8

080020c8 <_close>:
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <_close+0xc>)
 80020ca:	2258      	movs	r2, #88	; 0x58
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	4770      	bx	lr
 80020d4:	200002a8 	.word	0x200002a8

080020d8 <_fstat>:
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <_fstat+0xc>)
 80020da:	2258      	movs	r2, #88	; 0x58
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f04f 30ff 	mov.w	r0, #4294967295
 80020e2:	4770      	bx	lr
 80020e4:	200002a8 	.word	0x200002a8

080020e8 <_isatty>:
 80020e8:	4b02      	ldr	r3, [pc, #8]	; (80020f4 <_isatty+0xc>)
 80020ea:	2258      	movs	r2, #88	; 0x58
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	2000      	movs	r0, #0
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200002a8 	.word	0x200002a8

080020f8 <_lseek>:
 80020f8:	4b02      	ldr	r3, [pc, #8]	; (8002104 <_lseek+0xc>)
 80020fa:	2258      	movs	r2, #88	; 0x58
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002102:	4770      	bx	lr
 8002104:	200002a8 	.word	0x200002a8

08002108 <_read>:
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <_read+0xc>)
 800210a:	2258      	movs	r2, #88	; 0x58
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f04f 30ff 	mov.w	r0, #4294967295
 8002112:	4770      	bx	lr
 8002114:	200002a8 	.word	0x200002a8

08002118 <_sbrk>:
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <_sbrk+0x14>)
 800211a:	6811      	ldr	r1, [r2, #0]
 800211c:	4603      	mov	r3, r0
 800211e:	b909      	cbnz	r1, 8002124 <_sbrk+0xc>
 8002120:	4903      	ldr	r1, [pc, #12]	; (8002130 <_sbrk+0x18>)
 8002122:	6011      	str	r1, [r2, #0]
 8002124:	6810      	ldr	r0, [r2, #0]
 8002126:	4403      	add	r3, r0
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4770      	bx	lr
 800212c:	200002ac 	.word	0x200002ac
 8002130:	200002b0 	.word	0x200002b0

08002134 <_write>:
 8002134:	4b02      	ldr	r3, [pc, #8]	; (8002140 <_write+0xc>)
 8002136:	2258      	movs	r2, #88	; 0x58
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f04f 30ff 	mov.w	r0, #4294967295
 800213e:	4770      	bx	lr
 8002140:	200002a8 	.word	0x200002a8

08002144 <_init>:
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	bf00      	nop
 8002148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214a:	bc08      	pop	{r3}
 800214c:	469e      	mov	lr, r3
 800214e:	4770      	bx	lr

08002150 <_fini>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	bf00      	nop
 8002154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002156:	bc08      	pop	{r3}
 8002158:	469e      	mov	lr, r3
 800215a:	4770      	bx	lr
