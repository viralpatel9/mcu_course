
stm32f4xx_drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b8c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d34  08000d34  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d34  08000d34  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000d34  08000d34  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d34  08000d34  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d34  08000d34  00010d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d38  08000d38  00010d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000004c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00020014  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001977  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005bc  00000000  00000000  000219b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00021f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00022160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002aed  00000000  00000000  00022310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f32  00000000  00000000  00024dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a63c  00000000  00000000  00026d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003136b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000748  00000000  00000000  000313bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000014 	.word	0x20000014
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d1c 	.word	0x08000d1c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000018 	.word	0x20000018
 80001e4:	08000d1c 	.word	0x08000d1c

080001e8 <I2C1_GPIOInits>:
 * PB9 --> SDA
 *
 */

void I2C1_GPIOInits(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <I2C1_GPIOInits+0x40>)
 80001f0:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001f6:	2301      	movs	r3, #1
 80001f8:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80001fa:	2301      	movs	r3, #1
 80001fc:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001fe:	2304      	movs	r3, #4
 8000200:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000202:	2302      	movs	r3, #2
 8000204:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000206:	2306      	movs	r3, #6
 8000208:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f989 	bl	8000524 <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000212:	2307      	movs	r3, #7
 8000214:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f983 	bl	8000524 <GPIO_Init>

}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40020400 	.word	0x40020400

0800022c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <I2C1_Inits+0x2c>)
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <I2C1_Inits+0x30>)
 8000234:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <I2C1_Inits+0x2c>)
 8000238:	2201      	movs	r2, #1
 800023a:	60da      	str	r2, [r3, #12]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <I2C1_Inits+0x2c>)
 800023e:	2268      	movs	r2, #104	; 0x68
 8000240:	609a      	str	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <I2C1_Inits+0x2c>)
 8000244:	2200      	movs	r2, #0
 8000246:	611a      	str	r2, [r3, #16]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <I2C1_Inits+0x2c>)
 800024a:	4a05      	ldr	r2, [pc, #20]	; (8000260 <I2C1_Inits+0x34>)
 800024c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800024e:	4802      	ldr	r0, [pc, #8]	; (8000258 <I2C1_Inits+0x2c>)
 8000250:	f000 fbee 	bl	8000a30 <I2C_Init>

}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000030 	.word	0x20000030
 800025c:	40005400 	.word	0x40005400
 8000260:	000186a0 	.word	0x000186a0

08000264 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOB;
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <GPIO_ButtonInit+0x54>)
 800026c:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800026e:	2300      	movs	r3, #0
 8000270:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000272:	2300      	movs	r3, #0
 8000274:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000276:	2302      	movs	r3, #2
 8000278:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800027a:	2300      	movs	r3, #0
 800027c:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 800027e:	f107 030c 	add.w	r3, r7, #12
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f94e 	bl	8000524 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <GPIO_ButtonInit+0x58>)
 800028a:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800028c:	230c      	movs	r3, #12
 800028e:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000290:	2301      	movs	r3, #1
 8000292:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000294:	2302      	movs	r3, #2
 8000296:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000298:	2301      	movs	r3, #1
 800029a:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800029c:	2300      	movs	r3, #0
 800029e:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80002a0:	2101      	movs	r1, #1
 80002a2:	4806      	ldr	r0, [pc, #24]	; (80002bc <GPIO_ButtonInit+0x58>)
 80002a4:	f000 f856 	bl	8000354 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80002a8:	463b      	mov	r3, r7
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f93a 	bl	8000524 <GPIO_Init>

}
 80002b0:	bf00      	nop
 80002b2:	3718      	adds	r7, #24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40020400 	.word	0x40020400
 80002bc:	40020c00 	.word	0x40020c00

080002c0 <main>:

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	uint8_t commandcode;

	uint8_t len;

	GPIO_ButtonInit();
 80002c4:	f7ff ffce 	bl	8000264 <GPIO_ButtonInit>
	//i2c pin inits
	I2C1_GPIOInits();
 80002c8:	f7ff ff8e 	bl	80001e8 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002cc:	f7ff ffae 	bl	800022c <I2C1_Inits>

	//I2C IRQ confiugration
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 80002d0:	2101      	movs	r1, #1
 80002d2:	201f      	movs	r0, #31
 80002d4:	f000 fc7a 	bl	8000bcc <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 80002d8:	2101      	movs	r1, #1
 80002da:	2020      	movs	r0, #32
 80002dc:	f000 fc76 	bl	8000bcc <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1, ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <main+0x3c>)
 80002e4:	f000 fac0 	bl	8000868 <I2C_SlaveEnableDisableCallbackEvents>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002e8:	2101      	movs	r1, #1
 80002ea:	4804      	ldr	r0, [pc, #16]	; (80002fc <main+0x3c>)
 80002ec:	f000 faef 	bl	80008ce <I2C_PeripheralControl>

	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80002f0:	2101      	movs	r1, #1
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <main+0x3c>)
 80002f4:	f000 fc4e 	bl	8000b94 <I2C_ManageAcking>

	while(1);
 80002f8:	e7fe      	b.n	80002f8 <main+0x38>
 80002fa:	bf00      	nop
 80002fc:	40005400 	.word	0x40005400

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	; (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	; (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	; (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 fcd1 	bl	8000cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ffc5 	bl	80002c0 <main>

08000336 <LoopForever>:

LoopForever:
    b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000344:	08000d3c 	.word	0x08000d3c
  ldr r2, =_sbss
 8000348:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800034c:	20000060 	.word	0x20000060

08000350 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_IRQHandler>
	...

08000354 <GPIO_PeriClockControl>:
 * @Note			-  None
 *
 *
 *************************************** */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d162      	bne.n	800042c <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a64      	ldr	r2, [pc, #400]	; (80004fc <GPIO_PeriClockControl+0x1a8>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800036e:	4b64      	ldr	r3, [pc, #400]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a63      	ldr	r2, [pc, #396]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 800037a:	e0b9      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a61      	ldr	r2, [pc, #388]	; (8000504 <GPIO_PeriClockControl+0x1b0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000384:	4b5e      	ldr	r3, [pc, #376]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a5d      	ldr	r2, [pc, #372]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e0ae      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a5c      	ldr	r2, [pc, #368]	; (8000508 <GPIO_PeriClockControl+0x1b4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800039a:	4b59      	ldr	r3, [pc, #356]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a58      	ldr	r2, [pc, #352]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e0a3      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a58      	ldr	r2, [pc, #352]	; (800050c <GPIO_PeriClockControl+0x1b8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003b0:	4b53      	ldr	r3, [pc, #332]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a52      	ldr	r2, [pc, #328]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e098      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a53      	ldr	r2, [pc, #332]	; (8000510 <GPIO_PeriClockControl+0x1bc>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003c6:	4b4e      	ldr	r3, [pc, #312]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a4d      	ldr	r2, [pc, #308]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e08d      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a4f      	ldr	r2, [pc, #316]	; (8000514 <GPIO_PeriClockControl+0x1c0>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003dc:	4b48      	ldr	r3, [pc, #288]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a47      	ldr	r2, [pc, #284]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e082      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a4a      	ldr	r2, [pc, #296]	; (8000518 <GPIO_PeriClockControl+0x1c4>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003f2:	4b43      	ldr	r3, [pc, #268]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a42      	ldr	r2, [pc, #264]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e077      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a46      	ldr	r2, [pc, #280]	; (800051c <GPIO_PeriClockControl+0x1c8>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000408:	4b3d      	ldr	r3, [pc, #244]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a3c      	ldr	r2, [pc, #240]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800040e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e06c      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a41      	ldr	r2, [pc, #260]	; (8000520 <GPIO_PeriClockControl+0x1cc>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d168      	bne.n	80004f0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800041e:	4b38      	ldr	r3, [pc, #224]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a37      	ldr	r2, [pc, #220]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042a:	e061      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a33      	ldr	r2, [pc, #204]	; (80004fc <GPIO_PeriClockControl+0x1a8>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a31      	ldr	r2, [pc, #196]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e056      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a2f      	ldr	r2, [pc, #188]	; (8000504 <GPIO_PeriClockControl+0x1b0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800044a:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a2c      	ldr	r2, [pc, #176]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000450:	f023 0302 	bic.w	r3, r3, #2
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e04b      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a2b      	ldr	r2, [pc, #172]	; (8000508 <GPIO_PeriClockControl+0x1b4>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a26      	ldr	r2, [pc, #152]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000466:	f023 0304 	bic.w	r3, r3, #4
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e040      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a26      	ldr	r2, [pc, #152]	; (800050c <GPIO_PeriClockControl+0x1b8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000476:	4b22      	ldr	r3, [pc, #136]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a21      	ldr	r2, [pc, #132]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800047c:	f023 0308 	bic.w	r3, r3, #8
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e035      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a22      	ldr	r2, [pc, #136]	; (8000510 <GPIO_PeriClockControl+0x1bc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800048c:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000492:	f023 0310 	bic.w	r3, r3, #16
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e02a      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a1d      	ldr	r2, [pc, #116]	; (8000514 <GPIO_PeriClockControl+0x1c0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a16      	ldr	r2, [pc, #88]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	f023 0320 	bic.w	r3, r3, #32
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	e01f      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a19      	ldr	r2, [pc, #100]	; (8000518 <GPIO_PeriClockControl+0x1c4>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a10      	ldr	r2, [pc, #64]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e014      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <GPIO_PeriClockControl+0x1c8>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004da:	e009      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <GPIO_PeriClockControl+0x1cc>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d105      	bne.n	80004f0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40020000 	.word	0x40020000
 8000500:	40023800 	.word	0x40023800
 8000504:	40020400 	.word	0x40020400
 8000508:	40020800 	.word	0x40020800
 800050c:	40020c00 	.word	0x40020c00
 8000510:	40021000 	.word	0x40021000
 8000514:	40021400 	.word	0x40021400
 8000518:	40021800 	.word	0x40021800
 800051c:	40021c00 	.word	0x40021c00
 8000520:	40022000 	.word	0x40022000

08000524 <GPIO_Init>:

/*
 * 	Init and Deint of the peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff0c 	bl	8000354 <GPIO_PeriClockControl>

	// Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d81f      	bhi.n	8000584 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000554:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // cleraing off the pin number before using it
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	2303      	movs	r3, #3
 8000564:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	400a      	ands	r2, r1
 8000570:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	e0ca      	b.n	800071a <GPIO_Init+0x1f6>

	}
	else
	{
		// this is the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d117      	bne.n	80005bc <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b4a      	ldr	r3, [pc, #296]	; (80006b8 <GPIO_Init+0x194>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	4a46      	ldr	r2, [pc, #280]	; (80006b8 <GPIO_Init+0x194>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a2:	4b45      	ldr	r3, [pc, #276]	; (80006b8 <GPIO_Init+0x194>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a40      	ldr	r2, [pc, #256]	; (80006b8 <GPIO_Init+0x194>)
 80005b6:	400b      	ands	r3, r1
 80005b8:	6093      	str	r3, [r2, #8]
 80005ba:	e035      	b.n	8000628 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	795b      	ldrb	r3, [r3, #5]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	d117      	bne.n	80005f4 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c4:	4b3c      	ldr	r3, [pc, #240]	; (80006b8 <GPIO_Init+0x194>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	408a      	lsls	r2, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a38      	ldr	r2, [pc, #224]	; (80006b8 <GPIO_Init+0x194>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005da:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <GPIO_Init+0x194>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7912      	ldrb	r2, [r2, #4]
 80005e2:	4611      	mov	r1, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	408a      	lsls	r2, r1
 80005e8:	43d2      	mvns	r2, r2
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a32      	ldr	r2, [pc, #200]	; (80006b8 <GPIO_Init+0x194>)
 80005ee:	400b      	ands	r3, r1
 80005f0:	60d3      	str	r3, [r2, #12]
 80005f2:	e019      	b.n	8000628 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	795b      	ldrb	r3, [r3, #5]
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d115      	bne.n	8000628 <GPIO_Init+0x104>
		{
			//1. Configure bothh RTSR and FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <GPIO_Init+0x194>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	4611      	mov	r1, r2
 800060c:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <GPIO_Init+0x194>)
 800060e:	430b      	orrs	r3, r1
 8000610:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <GPIO_Init+0x194>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7912      	ldrb	r2, [r2, #4]
 800061a:	4611      	mov	r1, r2
 800061c:	2201      	movs	r2, #1
 800061e:	408a      	lsls	r2, r1
 8000620:	4611      	mov	r1, r2
 8000622:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <GPIO_Init+0x194>)
 8000624:	430b      	orrs	r3, r1
 8000626:	6093      	str	r3, [r2, #8]

		}
		//2. COnfigure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	089b      	lsrs	r3, r3, #2
 800062e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	f003 0303 	and.w	r3, r3, #3
 8000638:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIOA_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <GPIO_Init+0x198>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d04d      	beq.n	80006e0 <GPIO_Init+0x1bc>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <GPIO_Init+0x19c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d032      	beq.n	80006b4 <GPIO_Init+0x190>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <GPIO_Init+0x1a0>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d02b      	beq.n	80006b0 <GPIO_Init+0x18c>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1a      	ldr	r2, [pc, #104]	; (80006c8 <GPIO_Init+0x1a4>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d024      	beq.n	80006ac <GPIO_Init+0x188>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a19      	ldr	r2, [pc, #100]	; (80006cc <GPIO_Init+0x1a8>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d01d      	beq.n	80006a8 <GPIO_Init+0x184>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <GPIO_Init+0x1ac>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d016      	beq.n	80006a4 <GPIO_Init+0x180>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <GPIO_Init+0x1b0>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d00f      	beq.n	80006a0 <GPIO_Init+0x17c>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <GPIO_Init+0x1b4>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d008      	beq.n	800069c <GPIO_Init+0x178>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <GPIO_Init+0x1b8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d101      	bne.n	8000698 <GPIO_Init+0x174>
 8000694:	2308      	movs	r3, #8
 8000696:	e024      	b.n	80006e2 <GPIO_Init+0x1be>
 8000698:	2300      	movs	r3, #0
 800069a:	e022      	b.n	80006e2 <GPIO_Init+0x1be>
 800069c:	2307      	movs	r3, #7
 800069e:	e020      	b.n	80006e2 <GPIO_Init+0x1be>
 80006a0:	2306      	movs	r3, #6
 80006a2:	e01e      	b.n	80006e2 <GPIO_Init+0x1be>
 80006a4:	2305      	movs	r3, #5
 80006a6:	e01c      	b.n	80006e2 <GPIO_Init+0x1be>
 80006a8:	2304      	movs	r3, #4
 80006aa:	e01a      	b.n	80006e2 <GPIO_Init+0x1be>
 80006ac:	2303      	movs	r3, #3
 80006ae:	e018      	b.n	80006e2 <GPIO_Init+0x1be>
 80006b0:	2302      	movs	r3, #2
 80006b2:	e016      	b.n	80006e2 <GPIO_Init+0x1be>
 80006b4:	2301      	movs	r3, #1
 80006b6:	e014      	b.n	80006e2 <GPIO_Init+0x1be>
 80006b8:	40013c00 	.word	0x40013c00
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40020400 	.word	0x40020400
 80006c4:	40020800 	.word	0x40020800
 80006c8:	40020c00 	.word	0x40020c00
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40021400 	.word	0x40021400
 80006d4:	40021800 	.word	0x40021800
 80006d8:	40021c00 	.word	0x40021c00
 80006dc:	40022000 	.word	0x40022000
 80006e0:	2300      	movs	r3, #0
 80006e2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006e4:	4b5d      	ldr	r3, [pc, #372]	; (800085c <GPIO_Init+0x338>)
 80006e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e8:	4a5c      	ldr	r2, [pc, #368]	; (800085c <GPIO_Init+0x338>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 80006f0:	7c7a      	ldrb	r2, [r7, #17]
 80006f2:	7cbb      	ldrb	r3, [r7, #18]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	fa02 f103 	lsl.w	r1, r2, r3
 80006fa:	4a59      	ldr	r2, [pc, #356]	; (8000860 <GPIO_Init+0x33c>)
 80006fc:	7cfb      	ldrb	r3, [r7, #19]
 80006fe:	3302      	adds	r3, #2
 8000700:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. ENable the Exti intrrupt delivery using IMR
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000704:	4b57      	ldr	r3, [pc, #348]	; (8000864 <GPIO_Init+0x340>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	7912      	ldrb	r2, [r2, #4]
 800070c:	4611      	mov	r1, r2
 800070e:	2201      	movs	r2, #1
 8000710:	408a      	lsls	r2, r1
 8000712:	4611      	mov	r1, r2
 8000714:	4a53      	ldr	r2, [pc, #332]	; (8000864 <GPIO_Init+0x340>)
 8000716:	430b      	orrs	r3, r1
 8000718:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800072e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	4619      	mov	r1, r3
 800073c:	2303      	movs	r3, #3
 800073e:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000740:	43db      	mvns	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	400a      	ands	r2, r1
 800074a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6899      	ldr	r1, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	430a      	orrs	r2, r1
 800075a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

	// Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	79db      	ldrb	r3, [r3, #7]
 8000764:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000770:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	4619      	mov	r1, r3
 800077e:	2303      	movs	r3, #3
 8000780:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 8000782:	43db      	mvns	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	400a      	ands	r2, r1
 800078c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	68d9      	ldr	r1, [r3, #12]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	430a      	orrs	r2, r1
 800079c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

	//configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	7a1b      	ldrb	r3, [r3, #8]
 80007a6:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80007b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	4619      	mov	r1, r3
 80007c0:	2301      	movs	r3, #1
 80007c2:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80007c4:	43db      	mvns	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	400a      	ands	r2, r1
 80007ce:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6859      	ldr	r1, [r3, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	430a      	orrs	r2, r1
 80007de:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]

	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	795b      	ldrb	r3, [r3, #5]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d132      	bne.n	8000852 <GPIO_Init+0x32e>
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	3208      	adds	r2, #8
 8000808:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	210f      	movs	r1, #15
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	4619      	mov	r1, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4011      	ands	r1, r2
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	3208      	adds	r2, #8
 8000824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	3208      	adds	r2, #8
 8000830:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7a5b      	ldrb	r3, [r3, #9]
 8000838:	4619      	mov	r1, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4311      	orrs	r1, r2
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	3208      	adds	r2, #8
 800084e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40013800 	.word	0x40013800
 8000864:	40013c00 	.word	0x40013c00

08000868 <I2C_SlaveEnableDisableCallbackEvents>:
{
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
}

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx,uint8_t EnOrDi)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d112      	bne.n	80008a0 <I2C_SlaveEnableDisableCallbackEvents+0x38>
	{
		pI2Cx-> CR2 |= (1 << I2C_CR2_ITEVTEN);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	605a      	str	r2, [r3, #4]
		pI2Cx-> CR2 |= (1 << I2C_CR2_ITERREN);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	605a      	str	r2, [r3, #4]
		pI2Cx-> CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	605a      	str	r2, [r3, #4]
	{
		pI2Cx-> CR2 |= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx-> CR2 |= ~(1 << I2C_CR2_ITERREN);
		pI2Cx-> CR2 |= ~(1 << I2C_CR2_ITBUFEN);
	}
}
 800089e:	e011      	b.n	80008c4 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		pI2Cx-> CR2 |= ~(1 << I2C_CR2_ITEVTEN);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f463 7200 	orn	r2, r3, #512	; 0x200
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
		pI2Cx-> CR2 |= ~(1 << I2C_CR2_ITERREN);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f463 7280 	orn	r2, r3, #256	; 0x100
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	605a      	str	r2, [r3, #4]
		pI2Cx-> CR2 |= ~(1 << I2C_CR2_ITBUFEN);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f463 6280 	orn	r2, r3, #1024	; 0x400
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	605a      	str	r2, [r3, #4]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d106      	bne.n	80008ee <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f043 0201 	orr.w	r2, r3, #1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 80008ec:	e005      	b.n	80008fa <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f023 0201 	bic.w	r2, r3, #1
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	601a      	str	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d11f      	bne.n	8000956 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a11      	ldr	r2, [pc, #68]	; (8000960 <I2C_PeriClockControl+0x5c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d106      	bne.n	800092c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <I2C_PeriClockControl+0x60>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <I2C_PeriClockControl+0x60>)
 8000924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 800092a:	e014      	b.n	8000956 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <I2C_PeriClockControl+0x64>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d106      	bne.n	8000942 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <I2C_PeriClockControl+0x60>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <I2C_PeriClockControl+0x60>)
 800093a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000940:	e009      	b.n	8000956 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <I2C_PeriClockControl+0x68>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d105      	bne.n	8000956 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <I2C_PeriClockControl+0x60>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <I2C_PeriClockControl+0x60>)
 8000950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40005400 	.word	0x40005400
 8000964:	40023800 	.word	0x40023800
 8000968:	40005800 	.word	0x40005800
 800096c:	40005c00 	.word	0x40005c00

08000970 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

	return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc, temp,ahbp, apb1p;

	clksrc= ((RCC->CFGR>>2)&0x3);			//bring those 2 bits to the lsb position and mask
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <RCC_GetPCLK1Value+0x9c>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	727b      	strb	r3, [r7, #9]
	if(clksrc==0)
 8000994:	7a7b      	ldrb	r3, [r7, #9]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk= 16000000;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <RCC_GetPCLK1Value+0xa0>)
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e00b      	b.n	80009b8 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==1)
 80009a0:	7a7b      	ldrb	r3, [r7, #9]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d102      	bne.n	80009ac <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk= 8000000;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <RCC_GetPCLK1Value+0xa4>)
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e005      	b.n	80009b8 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==2)
 80009ac:	7a7b      	ldrb	r3, [r7, #9]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d102      	bne.n	80009b8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk= RCC_GetPLLOutputClock();
 80009b2:	f7ff ffdd 	bl	8000970 <RCC_GetPLLOutputClock>
 80009b6:	60f8      	str	r0, [r7, #12]
	}

	//for ahb1
	temp=((RCC->CFGR>>4)&0xF);
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <RCC_GetPCLK1Value+0x9c>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 030f 	and.w	r3, r3, #15
 80009c4:	723b      	strb	r3, [r7, #8]

	if(temp<8)
 80009c6:	7a3b      	ldrb	r3, [r7, #8]
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	d802      	bhi.n	80009d2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp=1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	72fb      	strb	r3, [r7, #11]
 80009d0:	e005      	b.n	80009de <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		 ahbp=AHB_PreScalar[temp-8];
 80009d2:	7a3b      	ldrb	r3, [r7, #8]
 80009d4:	3b08      	subs	r3, #8
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <RCC_GetPCLK1Value+0xa8>)
 80009d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009dc:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1
	temp=((RCC->CFGR>>10)&0x7);
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <RCC_GetPCLK1Value+0x9c>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	0a9b      	lsrs	r3, r3, #10
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	723b      	strb	r3, [r7, #8]

	if(temp<4)
 80009ec:	7a3b      	ldrb	r3, [r7, #8]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d802      	bhi.n	80009f8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p=1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	72bb      	strb	r3, [r7, #10]
 80009f6:	e004      	b.n	8000a02 <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		 apb1p=APB1_PreScalar[temp-4];
 80009f8:	7a3b      	ldrb	r3, [r7, #8]
 80009fa:	3b04      	subs	r3, #4
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <RCC_GetPCLK1Value+0xac>)
 80009fe:	5cd3      	ldrb	r3, [r2, r3]
 8000a00:	72bb      	strb	r3, [r7, #10]
	}

	pclk1=(SystemClk/ahbp)/apb1p;
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a0a:	7abb      	ldrb	r3, [r7, #10]
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000a12:	687b      	ldr	r3, [r7, #4]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	00f42400 	.word	0x00f42400
 8000a24:	007a1200 	.word	0x007a1200
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000010 	.word	0x20000010

08000a30 <I2C_Init>:
/*
 * 		@ I2C initialisation driver
 */

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]

	//enable the clock for
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff5e 	bl	8000904 <I2C_PeriClockControl>

	//configure the ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl<<10;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	029b      	lsls	r3, r3, #10
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR"
	tempreg = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 8000a60:	f7ff ff8e 	bl	8000980 <RCC_GetPCLK1Value>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a48      	ldr	r2, [pc, #288]	; (8000b88 <I2C_Init+0x158>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	0c9b      	lsrs	r3, r3, #18
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a7e:	605a      	str	r2, [r3, #4]

	//configure the FREQ field for OAR
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress<<1;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);				//becasue datasheet says that
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	609a      	str	r2, [r3, #8]

	//CCR Calculations
	uint16_t ccr_value = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed<= I2C_SCL_SPEED_SM)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4a38      	ldr	r2, [pc, #224]	; (8000b8c <I2C_Init+0x15c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d80f      	bhi.n	8000ace <I2C_Init+0x9e>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value()/(2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000aae:	f7ff ff67 	bl	8000980 <RCC_GetPCLK1Value>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000ac0:	897b      	ldrh	r3, [r7, #10]
 8000ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e030      	b.n	8000b30 <I2C_Init+0x100>
	}
	else
	{
		//fast mode
		tempreg |= (1<<15);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad4:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<pI2CHandle->I2C_Config.I2C_FMDutyCycle<<14);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	2201      	movs	r2, #1
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	039b      	lsls	r3, r3, #14
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10b      	bne.n	8000b0a <I2C_Init+0xda>
		{
			ccr_value = (RCC_GetPCLK1Value()/(3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000af2:	f7ff ff45 	bl	8000980 <RCC_GetPCLK1Value>
 8000af6:	4601      	mov	r1, r0
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b06:	817b      	strh	r3, [r7, #10]
 8000b08:	e00c      	b.n	8000b24 <I2C_Init+0xf4>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value()/(25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b0a:	f7ff ff39 	bl	8000980 <RCC_GetPCLK1Value>
 8000b0e:	4601      	mov	r1, r0
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	009a      	lsls	r2, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b22:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000b24:	897b      	ldrh	r3, [r7, #10]
 8000b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed<= I2C_SCL_SPEED_SM)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <I2C_Init+0x15c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d809      	bhi.n	8000b56 <I2C_Init+0x126>
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U)+1;
 8000b42:	f7ff ff1d 	bl	8000980 <RCC_GetPCLK1Value>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <I2C_Init+0x158>)
 8000b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4e:	0c9b      	lsrs	r3, r3, #18
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e00d      	b.n	8000b72 <I2C_Init+0x142>
	}
	else
	{
		//mod eis fast mode
		tempreg = ((RCC_GetPCLK1Value()*300)/1000000000U)+1;
 8000b56:	f7ff ff13 	bl	8000980 <RCC_GetPCLK1Value>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b60:	fb02 f303 	mul.w	r3, r2, r3
 8000b64:	0a5b      	lsrs	r3, r3, #9
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <I2C_Init+0x160>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	09db      	lsrs	r3, r3, #7
 8000b6e:	3301      	adds	r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b7c:	621a      	str	r2, [r3, #32]
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	000186a0 	.word	0x000186a0
 8000b90:	00044b83 	.word	0x00044b83

08000b94 <I2C_ManageAcking>:
}



void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== I2C_ACK_ENABLE)
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d106      	bne.n	8000bb4 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
	else
	{
		//disable the ack
		pI2Cx->CR1 &=~(1<<I2C_CR1_ACK);
	}
}
 8000bb2:	e005      	b.n	8000bc0 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &=~(1<<I2C_CR1_ACK);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...

08000bcc <I2C_IRQInterruptConfig>:

void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d133      	bne.n	8000c4a <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d80a      	bhi.n	8000bfe <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000be8:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <I2C_IRQInterruptConfig+0xf0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4a31      	ldr	r2, [pc, #196]	; (8000cbc <I2C_IRQInterruptConfig+0xf0>)
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000bfc:	e059      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b1f      	cmp	r3, #31
 8000c02:	d90f      	bls.n	8000c24 <I2C_IRQInterruptConfig+0x58>
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b3f      	cmp	r3, #63	; 0x3f
 8000c08:	d80c      	bhi.n	8000c24 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <I2C_IRQInterruptConfig+0xf4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	f002 021f 	and.w	r2, r2, #31
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <I2C_IRQInterruptConfig+0xf4>)
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e046      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b3f      	cmp	r3, #63	; 0x3f
 8000c28:	d943      	bls.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c2e:	d840      	bhi.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <I2C_IRQInterruptConfig+0xf8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	79fa      	ldrb	r2, [r7, #7]
 8000c36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	4611      	mov	r1, r2
 8000c42:	4a20      	ldr	r2, [pc, #128]	; (8000cc4 <I2C_IRQInterruptConfig+0xf8>)
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	e033      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b1f      	cmp	r3, #31
 8000c4e:	d80a      	bhi.n	8000c66 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <I2C_IRQInterruptConfig+0xfc>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <I2C_IRQInterruptConfig+0xfc>)
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	e025      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b1f      	cmp	r3, #31
 8000c6a:	d90f      	bls.n	8000c8c <I2C_IRQInterruptConfig+0xc0>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c70:	d80c      	bhi.n	8000c8c <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <I2C_IRQInterruptConfig+0x100>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	f002 021f 	and.w	r2, r2, #31
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <I2C_IRQInterruptConfig+0x100>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e012      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	d90f      	bls.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b5f      	cmp	r3, #95	; 0x5f
 8000c96:	d80c      	bhi.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <I2C_IRQInterruptConfig+0x104>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	79fa      	ldrb	r2, [r7, #7]
 8000c9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <I2C_IRQInterruptConfig+0x104>)
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	e7ff      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000e104 	.word	0xe000e104
 8000cc4:	e000e10c 	.word	0xe000e10c
 8000cc8:	e000e180 	.word	0xe000e180
 8000ccc:	e000e184 	.word	0xe000e184
 8000cd0:	e000e18c 	.word	0xe000e18c

08000cd4 <__libc_init_array>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	4d0d      	ldr	r5, [pc, #52]	; (8000d0c <__libc_init_array+0x38>)
 8000cd8:	4c0d      	ldr	r4, [pc, #52]	; (8000d10 <__libc_init_array+0x3c>)
 8000cda:	1b64      	subs	r4, r4, r5
 8000cdc:	10a4      	asrs	r4, r4, #2
 8000cde:	2600      	movs	r6, #0
 8000ce0:	42a6      	cmp	r6, r4
 8000ce2:	d109      	bne.n	8000cf8 <__libc_init_array+0x24>
 8000ce4:	4d0b      	ldr	r5, [pc, #44]	; (8000d14 <__libc_init_array+0x40>)
 8000ce6:	4c0c      	ldr	r4, [pc, #48]	; (8000d18 <__libc_init_array+0x44>)
 8000ce8:	f000 f818 	bl	8000d1c <_init>
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	10a4      	asrs	r4, r4, #2
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	42a6      	cmp	r6, r4
 8000cf4:	d105      	bne.n	8000d02 <__libc_init_array+0x2e>
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfc:	4798      	blx	r3
 8000cfe:	3601      	adds	r6, #1
 8000d00:	e7ee      	b.n	8000ce0 <__libc_init_array+0xc>
 8000d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d06:	4798      	blx	r3
 8000d08:	3601      	adds	r6, #1
 8000d0a:	e7f2      	b.n	8000cf2 <__libc_init_array+0x1e>
 8000d0c:	08000d34 	.word	0x08000d34
 8000d10:	08000d34 	.word	0x08000d34
 8000d14:	08000d34 	.word	0x08000d34
 8000d18:	08000d38 	.word	0x08000d38

08000d1c <_init>:
 8000d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1e:	bf00      	nop
 8000d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d22:	bc08      	pop	{r3}
 8000d24:	469e      	mov	lr, r3
 8000d26:	4770      	bx	lr

08000d28 <_fini>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	bf00      	nop
 8000d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2e:	bc08      	pop	{r3}
 8000d30:	469e      	mov	lr, r3
 8000d32:	4770      	bx	lr
