
stm32f4xx_drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002064  08002064  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002064  08002064  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002064  08002064  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002068  08002068  00012068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800206c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000160  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017ca  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000585  00000000  00000000  0002186c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00021df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00021fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a99  00000000  00000000  00022130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cf2  00000000  00000000  00024bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a52d  00000000  00000000  000268bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00030de8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f34  00000000  00000000  00030e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  00031d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001fa8 	.word	0x08001fa8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08001fa8 	.word	0x08001fa8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
#define SLAVE_ADDR 0x68

uint8_t rcv_buff[255];

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB9 --> SDA
 *
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f9b3 	bl	800064c <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f9ad 	bl	800064c <GPIO_Init>

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	60da      	str	r2, [r3, #12]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	609a      	str	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fc7a 	bl	8000c1c <I2C_Init>

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000194 	.word	0x20000194
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOB;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <GPIO_ButtonInit+0x54>)
 8000340:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f978 	bl	800064c <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <GPIO_ButtonInit+0x58>)
 800035e:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000360:	230c      	movs	r3, #12
 8000362:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000364:	2301      	movs	r3, #1
 8000366:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000368:	2302      	movs	r3, #2
 800036a:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800036c:	2301      	movs	r3, #1
 800036e:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000370:	2300      	movs	r3, #0
 8000372:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000374:	2101      	movs	r1, #1
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000378:	f000 f880 	bl	800047c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800037c:	463b      	mov	r3, r7
 800037e:	4618      	mov	r0, r3
 8000380:	f000 f964 	bl	800064c <GPIO_Init>

}
 8000384:	bf00      	nop
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40020400 	.word	0x40020400
 8000390:	40020c00 	.word	0x40020c00

08000394 <main>:

int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af02      	add	r7, sp, #8
	uint8_t commandcode;

	uint8_t len;

	GPIO_ButtonInit();
 800039a:	f7ff ffcd 	bl	8000338 <GPIO_ButtonInit>
	//i2c pin inits
	I2C1_GPIOInits();
 800039e:	f7ff ff8d 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80003a2:	f7ff ffad 	bl	8000300 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80003a6:	2101      	movs	r1, #1
 80003a8:	481a      	ldr	r0, [pc, #104]	; (8000414 <main+0x80>)
 80003aa:	f000 fb86 	bl	8000aba <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003ae:	bf00      	nop
 80003b0:	2100      	movs	r1, #0
 80003b2:	4819      	ldr	r0, [pc, #100]	; (8000418 <main+0x84>)
 80003b4:	f000 faec 	bl	8000990 <GPIO_ReadFromInputPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f8      	beq.n	80003b0 <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003be:	f7ff ff67 	bl	8000290 <delay>

		commandcode = 0x51;
 80003c2:	2351      	movs	r3, #81	; 0x51
 80003c4:	71fb      	strb	r3, [r7, #7]

		//understand using i2c transaction documetn
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003c6:	1df9      	adds	r1, r7, #7
 80003c8:	2301      	movs	r3, #1
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2368      	movs	r3, #104	; 0x68
 80003ce:	2201      	movs	r2, #1
 80003d0:	4812      	ldr	r0, [pc, #72]	; (800041c <main+0x88>)
 80003d2:	f000 fce8 	bl	8000da6 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003d6:	1db9      	adds	r1, r7, #6
 80003d8:	2301      	movs	r3, #1
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2368      	movs	r3, #104	; 0x68
 80003de:	2201      	movs	r2, #1
 80003e0:	480e      	ldr	r0, [pc, #56]	; (800041c <main+0x88>)
 80003e2:	f000 fd47 	bl	8000e74 <I2C_MasterReceiveData>

		commandcode = 0x52;
 80003e6:	2352      	movs	r3, #82	; 0x52
 80003e8:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003ea:	1df9      	adds	r1, r7, #7
 80003ec:	2301      	movs	r3, #1
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2368      	movs	r3, #104	; 0x68
 80003f2:	2201      	movs	r2, #1
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <main+0x88>)
 80003f6:	f000 fcd6 	bl	8000da6 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle, rcv_buff, len, SLAVE_ADDR, I2C_DISABLE_SR);
 80003fa:	79ba      	ldrb	r2, [r7, #6]
 80003fc:	2300      	movs	r3, #0
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2368      	movs	r3, #104	; 0x68
 8000402:	4907      	ldr	r1, [pc, #28]	; (8000420 <main+0x8c>)
 8000404:	4805      	ldr	r0, [pc, #20]	; (800041c <main+0x88>)
 8000406:	f000 fd35 	bl	8000e74 <I2C_MasterReceiveData>
		rcv_buff[len+1];

		printf("Data: %s",rcv_buff);
 800040a:	4905      	ldr	r1, [pc, #20]	; (8000420 <main+0x8c>)
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <main+0x90>)
 800040e:	f000 fe07 	bl	8001020 <iprintf>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000412:	e7cc      	b.n	80003ae <main+0x1a>
 8000414:	40005400 	.word	0x40005400
 8000418:	40020000 	.word	0x40020000
 800041c:	20000194 	.word	0x20000194
 8000420:	20000094 	.word	0x20000094
 8000424:	08001fc0 	.word	0x08001fc0

08000428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800042c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <LoopForever+0x6>)
  ldr r1, =_edata
 8000432:	490d      	ldr	r1, [pc, #52]	; (8000468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <LoopForever+0xe>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000438:	e002      	b.n	8000440 <LoopCopyDataInit>

0800043a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800043c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043e:	3304      	adds	r3, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000444:	d3f9      	bcc.n	800043a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000446:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000448:	4c0a      	ldr	r4, [pc, #40]	; (8000474 <LoopForever+0x16>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800044c:	e001      	b.n	8000452 <LoopFillZerobss>

0800044e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000450:	3204      	adds	r2, #4

08000452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000454:	d3fb      	bcc.n	800044e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000456:	f000 fdb7 	bl	8000fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045a:	f7ff ff9b 	bl	8000394 <main>

0800045e <LoopForever>:

LoopForever:
    b LoopForever
 800045e:	e7fe      	b.n	800045e <LoopForever>
  ldr   r0, =_estack
 8000460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000468:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800046c:	0800206c 	.word	0x0800206c
  ldr r2, =_sbss
 8000470:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000474:	200001d8 	.word	0x200001d8

08000478 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000478:	e7fe      	b.n	8000478 <ADC_IRQHandler>
	...

0800047c <GPIO_PeriClockControl>:
 * @Note			-  None
 *
 *
 *************************************** */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d162      	bne.n	8000554 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a64      	ldr	r2, [pc, #400]	; (8000624 <GPIO_PeriClockControl+0x1a8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000496:	4b64      	ldr	r3, [pc, #400]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a63      	ldr	r2, [pc, #396]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 80004a2:	e0b9      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a61      	ldr	r2, [pc, #388]	; (800062c <GPIO_PeriClockControl+0x1b0>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004ac:	4b5e      	ldr	r3, [pc, #376]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a5d      	ldr	r2, [pc, #372]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80004b2:	f043 0302 	orr.w	r3, r3, #2
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e0ae      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a5c      	ldr	r2, [pc, #368]	; (8000630 <GPIO_PeriClockControl+0x1b4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80004c2:	4b59      	ldr	r3, [pc, #356]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a58      	ldr	r2, [pc, #352]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80004c8:	f043 0304 	orr.w	r3, r3, #4
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	e0a3      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a58      	ldr	r2, [pc, #352]	; (8000634 <GPIO_PeriClockControl+0x1b8>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80004d8:	4b53      	ldr	r3, [pc, #332]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a52      	ldr	r2, [pc, #328]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e4:	e098      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a53      	ldr	r2, [pc, #332]	; (8000638 <GPIO_PeriClockControl+0x1bc>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004ee:	4b4e      	ldr	r3, [pc, #312]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a4d      	ldr	r2, [pc, #308]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fa:	e08d      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a4f      	ldr	r2, [pc, #316]	; (800063c <GPIO_PeriClockControl+0x1c0>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000504:	4b48      	ldr	r3, [pc, #288]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a47      	ldr	r2, [pc, #284]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	e082      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a4a      	ldr	r2, [pc, #296]	; (8000640 <GPIO_PeriClockControl+0x1c4>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800051a:	4b43      	ldr	r3, [pc, #268]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a42      	ldr	r2, [pc, #264]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000526:	e077      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a46      	ldr	r2, [pc, #280]	; (8000644 <GPIO_PeriClockControl+0x1c8>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d106      	bne.n	800053e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000530:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a3c      	ldr	r2, [pc, #240]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053c:	e06c      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a41      	ldr	r2, [pc, #260]	; (8000648 <GPIO_PeriClockControl+0x1cc>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d168      	bne.n	8000618 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000546:	4b38      	ldr	r3, [pc, #224]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a37      	ldr	r2, [pc, #220]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 800054c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000552:	e061      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a33      	ldr	r2, [pc, #204]	; (8000624 <GPIO_PeriClockControl+0x1a8>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d106      	bne.n	800056a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800055c:	4b32      	ldr	r3, [pc, #200]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a31      	ldr	r2, [pc, #196]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000562:	f023 0301 	bic.w	r3, r3, #1
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	e056      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a2f      	ldr	r2, [pc, #188]	; (800062c <GPIO_PeriClockControl+0x1b0>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a2c      	ldr	r2, [pc, #176]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000578:	f023 0302 	bic.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057e:	e04b      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <GPIO_PeriClockControl+0x1b4>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d106      	bne.n	8000596 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a26      	ldr	r2, [pc, #152]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 800058e:	f023 0304 	bic.w	r3, r3, #4
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	e040      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a26      	ldr	r2, [pc, #152]	; (8000634 <GPIO_PeriClockControl+0x1b8>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a21      	ldr	r2, [pc, #132]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005a4:	f023 0308 	bic.w	r3, r3, #8
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005aa:	e035      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a22      	ldr	r2, [pc, #136]	; (8000638 <GPIO_PeriClockControl+0x1bc>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005ba:	f023 0310 	bic.w	r3, r3, #16
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	e02a      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <GPIO_PeriClockControl+0x1c0>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005d0:	f023 0320 	bic.w	r3, r3, #32
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d6:	e01f      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a19      	ldr	r2, [pc, #100]	; (8000640 <GPIO_PeriClockControl+0x1c4>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d106      	bne.n	80005ee <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ec:	e014      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <GPIO_PeriClockControl+0x1c8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 80005fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000602:	e009      	b.n	8000618 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <GPIO_PeriClockControl+0x1cc>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d105      	bne.n	8000618 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a05      	ldr	r2, [pc, #20]	; (8000628 <GPIO_PeriClockControl+0x1ac>)
 8000612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40020000 	.word	0x40020000
 8000628:	40023800 	.word	0x40023800
 800062c:	40020400 	.word	0x40020400
 8000630:	40020800 	.word	0x40020800
 8000634:	40020c00 	.word	0x40020c00
 8000638:	40021000 	.word	0x40021000
 800063c:	40021400 	.word	0x40021400
 8000640:	40021800 	.word	0x40021800
 8000644:	40021c00 	.word	0x40021c00
 8000648:	40022000 	.word	0x40022000

0800064c <GPIO_Init>:

/*
 * 	Init and Deint of the peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff0c 	bl	800047c <GPIO_PeriClockControl>

	// Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	795b      	ldrb	r3, [r3, #5]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d81f      	bhi.n	80006ac <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800067c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // cleraing off the pin number before using it
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	4619      	mov	r1, r3
 800068a:	2303      	movs	r3, #3
 800068c:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	e0ca      	b.n	8000842 <GPIO_Init+0x1f6>

	}
	else
	{
		// this is the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	d117      	bne.n	80006e4 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b4:	4b4a      	ldr	r3, [pc, #296]	; (80007e0 <GPIO_Init+0x194>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7912      	ldrb	r2, [r2, #4]
 80006bc:	4611      	mov	r1, r2
 80006be:	2201      	movs	r2, #1
 80006c0:	408a      	lsls	r2, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	4a46      	ldr	r2, [pc, #280]	; (80007e0 <GPIO_Init+0x194>)
 80006c6:	430b      	orrs	r3, r1
 80006c8:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ca:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <GPIO_Init+0x194>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	7912      	ldrb	r2, [r2, #4]
 80006d2:	4611      	mov	r1, r2
 80006d4:	2201      	movs	r2, #1
 80006d6:	408a      	lsls	r2, r1
 80006d8:	43d2      	mvns	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	4a40      	ldr	r2, [pc, #256]	; (80007e0 <GPIO_Init+0x194>)
 80006de:	400b      	ands	r3, r1
 80006e0:	6093      	str	r3, [r2, #8]
 80006e2:	e035      	b.n	8000750 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	795b      	ldrb	r3, [r3, #5]
 80006e8:	2b05      	cmp	r3, #5
 80006ea:	d117      	bne.n	800071c <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ec:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <GPIO_Init+0x194>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	7912      	ldrb	r2, [r2, #4]
 80006f4:	4611      	mov	r1, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	408a      	lsls	r2, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a38      	ldr	r2, [pc, #224]	; (80007e0 <GPIO_Init+0x194>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000702:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <GPIO_Init+0x194>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	7912      	ldrb	r2, [r2, #4]
 800070a:	4611      	mov	r1, r2
 800070c:	2201      	movs	r2, #1
 800070e:	408a      	lsls	r2, r1
 8000710:	43d2      	mvns	r2, r2
 8000712:	4611      	mov	r1, r2
 8000714:	4a32      	ldr	r2, [pc, #200]	; (80007e0 <GPIO_Init+0x194>)
 8000716:	400b      	ands	r3, r1
 8000718:	60d3      	str	r3, [r2, #12]
 800071a:	e019      	b.n	8000750 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	2b06      	cmp	r3, #6
 8000722:	d115      	bne.n	8000750 <GPIO_Init+0x104>
		{
			//1. Configure bothh RTSR and FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000724:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <GPIO_Init+0x194>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	7912      	ldrb	r2, [r2, #4]
 800072c:	4611      	mov	r1, r2
 800072e:	2201      	movs	r2, #1
 8000730:	408a      	lsls	r2, r1
 8000732:	4611      	mov	r1, r2
 8000734:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <GPIO_Init+0x194>)
 8000736:	430b      	orrs	r3, r1
 8000738:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <GPIO_Init+0x194>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	7912      	ldrb	r2, [r2, #4]
 8000742:	4611      	mov	r1, r2
 8000744:	2201      	movs	r2, #1
 8000746:	408a      	lsls	r2, r1
 8000748:	4611      	mov	r1, r2
 800074a:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <GPIO_Init+0x194>)
 800074c:	430b      	orrs	r3, r1
 800074e:	6093      	str	r3, [r2, #8]

		}
		//2. COnfigure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	089b      	lsrs	r3, r3, #2
 8000756:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	f003 0303 	and.w	r3, r3, #3
 8000760:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIOA_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <GPIO_Init+0x198>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d04d      	beq.n	8000808 <GPIO_Init+0x1bc>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <GPIO_Init+0x19c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d032      	beq.n	80007dc <GPIO_Init+0x190>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <GPIO_Init+0x1a0>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d02b      	beq.n	80007d8 <GPIO_Init+0x18c>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a1a      	ldr	r2, [pc, #104]	; (80007f0 <GPIO_Init+0x1a4>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d024      	beq.n	80007d4 <GPIO_Init+0x188>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <GPIO_Init+0x1a8>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d01d      	beq.n	80007d0 <GPIO_Init+0x184>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <GPIO_Init+0x1ac>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d016      	beq.n	80007cc <GPIO_Init+0x180>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <GPIO_Init+0x1b0>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d00f      	beq.n	80007c8 <GPIO_Init+0x17c>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <GPIO_Init+0x1b4>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d008      	beq.n	80007c4 <GPIO_Init+0x178>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <GPIO_Init+0x1b8>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d101      	bne.n	80007c0 <GPIO_Init+0x174>
 80007bc:	2308      	movs	r3, #8
 80007be:	e024      	b.n	800080a <GPIO_Init+0x1be>
 80007c0:	2300      	movs	r3, #0
 80007c2:	e022      	b.n	800080a <GPIO_Init+0x1be>
 80007c4:	2307      	movs	r3, #7
 80007c6:	e020      	b.n	800080a <GPIO_Init+0x1be>
 80007c8:	2306      	movs	r3, #6
 80007ca:	e01e      	b.n	800080a <GPIO_Init+0x1be>
 80007cc:	2305      	movs	r3, #5
 80007ce:	e01c      	b.n	800080a <GPIO_Init+0x1be>
 80007d0:	2304      	movs	r3, #4
 80007d2:	e01a      	b.n	800080a <GPIO_Init+0x1be>
 80007d4:	2303      	movs	r3, #3
 80007d6:	e018      	b.n	800080a <GPIO_Init+0x1be>
 80007d8:	2302      	movs	r3, #2
 80007da:	e016      	b.n	800080a <GPIO_Init+0x1be>
 80007dc:	2301      	movs	r3, #1
 80007de:	e014      	b.n	800080a <GPIO_Init+0x1be>
 80007e0:	40013c00 	.word	0x40013c00
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40021400 	.word	0x40021400
 80007fc:	40021800 	.word	0x40021800
 8000800:	40021c00 	.word	0x40021c00
 8000804:	40022000 	.word	0x40022000
 8000808:	2300      	movs	r3, #0
 800080a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800080c:	4b5d      	ldr	r3, [pc, #372]	; (8000984 <GPIO_Init+0x338>)
 800080e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000810:	4a5c      	ldr	r2, [pc, #368]	; (8000984 <GPIO_Init+0x338>)
 8000812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000816:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 8000818:	7c7a      	ldrb	r2, [r7, #17]
 800081a:	7cbb      	ldrb	r3, [r7, #18]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	fa02 f103 	lsl.w	r1, r2, r3
 8000822:	4a59      	ldr	r2, [pc, #356]	; (8000988 <GPIO_Init+0x33c>)
 8000824:	7cfb      	ldrb	r3, [r7, #19]
 8000826:	3302      	adds	r3, #2
 8000828:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. ENable the Exti intrrupt delivery using IMR
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800082c:	4b57      	ldr	r3, [pc, #348]	; (800098c <GPIO_Init+0x340>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	7912      	ldrb	r2, [r2, #4]
 8000834:	4611      	mov	r1, r2
 8000836:	2201      	movs	r2, #1
 8000838:	408a      	lsls	r2, r1
 800083a:	4611      	mov	r1, r2
 800083c:	4a53      	ldr	r2, [pc, #332]	; (800098c <GPIO_Init+0x340>)
 800083e:	430b      	orrs	r3, r1
 8000840:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	799b      	ldrb	r3, [r3, #6]
 800084a:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000856:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	4619      	mov	r1, r3
 8000864:	2303      	movs	r3, #3
 8000866:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000868:	43db      	mvns	r3, r3
 800086a:	4619      	mov	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	400a      	ands	r2, r1
 8000872:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	6899      	ldr	r1, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	697a      	ldr	r2, [r7, #20]
 8000880:	430a      	orrs	r2, r1
 8000882:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

	// Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	79db      	ldrb	r3, [r3, #7]
 800088c:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000898:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	4619      	mov	r1, r3
 80008a6:	2303      	movs	r3, #3
 80008a8:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4619      	mov	r1, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	400a      	ands	r2, r1
 80008b4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68d9      	ldr	r1, [r3, #12]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	60da      	str	r2, [r3, #12]

	temp = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]

	//configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7a1b      	ldrb	r3, [r3, #8]
 80008ce:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80008da:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	4619      	mov	r1, r3
 80008e8:	2301      	movs	r3, #1
 80008ea:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80008ec:	43db      	mvns	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	400a      	ands	r2, r1
 80008f6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6859      	ldr	r1, [r3, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	430a      	orrs	r2, r1
 8000906:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	795b      	ldrb	r3, [r3, #5]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d132      	bne.n	800097a <GPIO_Init+0x32e>
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	791b      	ldrb	r3, [r3, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	3208      	adds	r2, #8
 8000930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	210f      	movs	r1, #15
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4011      	ands	r1, r2
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	3208      	adds	r2, #8
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	3208      	adds	r2, #8
 8000958:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7a5b      	ldrb	r3, [r3, #9]
 8000960:	4619      	mov	r1, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4311      	orrs	r1, r2
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	3208      	adds	r2, #8
 8000976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40013800 	.word	0x40013800
 800098c:	40013c00 	.word	0x40013c00

08000990 <GPIO_ReadFromInputPin>:
 * Data read and write
 *
 * return value will be either 0 or 1
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x0000001);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	fa22 f303 	lsr.w	r3, r2, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
	return value;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <I2C_GenerateStartCondition>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	601a      	str	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)			///send the slave address to the master
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr <<1;				//move tthe bit with 1 register
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &=~(1);				//slaveAddr is the Slave Adress and clear off the first bit address
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;			//store the slave address to the DR
 80009f2:	78fa      	ldrb	r2, [r7, #3]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	611a      	str	r2, [r3, #16]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)			///send the slave address to the master
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr <<1;				//move tthe bit with 1 register
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |=1;				//slaveAddr is the Slave Adress and clear off the first bit address
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;			//store the slave address to the DR
 8000a1c:	78fa      	ldrb	r2, [r7, #3]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	611a      	str	r2, [r3, #16]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	// check for device mode
	if(pI2CHandle-> pI2Cx->SR2 & (1 <<I2C_SR2_MSL))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d020      	beq.n	8000a84 <I2C_ClearADDRFlag+0x58>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState==I2C_BUSY_IN_RX)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d112      	bne.n	8000a72 <I2C_ClearADDRFlag+0x46>
		{
			if(pI2CHandle->RxSize ==1 )
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d11f      	bne.n	8000a94 <I2C_ClearADDRFlag+0x68>
			{
				// first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fa98 	bl	8000f90 <I2C_ManageAcking>

				//clear the ADDR flag(read SR1, read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	60fb      	str	r3, [r7, #12]
		//straight away clear the ADDR flag
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000a70:	e010      	b.n	8000a94 <I2C_ClearADDRFlag+0x68>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	60fb      	str	r3, [r7, #12]
}
 8000a82:	e007      	b.n	8000a94 <I2C_ClearADDRFlag+0x68>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	60fb      	str	r3, [r7, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <I2C_PeripheralControl>:


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ac6:	78fb      	ldrb	r3, [r7, #3]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d106      	bne.n	8000ada <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f043 0201 	orr.w	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000ad8:	e005      	b.n	8000ae6 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 0201 	bic.w	r2, r3, #1
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d11f      	bne.n	8000b42 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <I2C_PeriClockControl+0x5c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d106      	bne.n	8000b18 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <I2C_PeriClockControl+0x60>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <I2C_PeriClockControl+0x60>)
 8000b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 8000b16:	e014      	b.n	8000b42 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <I2C_PeriClockControl+0x64>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d106      	bne.n	8000b2e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <I2C_PeriClockControl+0x60>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <I2C_PeriClockControl+0x60>)
 8000b26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b2c:	e009      	b.n	8000b42 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <I2C_PeriClockControl+0x68>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d105      	bne.n	8000b42 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <I2C_PeriClockControl+0x60>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <I2C_PeriClockControl+0x60>)
 8000b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40005800 	.word	0x40005800
 8000b58:	40005c00 	.word	0x40005c00

08000b5c <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
	...

08000b6c <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc, temp,ahbp, apb1p;

	clksrc= ((RCC->CFGR>>2)&0x3);			//bring those 2 bits to the lsb position and mask
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <RCC_GetPCLK1Value+0x9c>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	727b      	strb	r3, [r7, #9]
	if(clksrc==0)
 8000b80:	7a7b      	ldrb	r3, [r7, #9]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk= 16000000;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <RCC_GetPCLK1Value+0xa0>)
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	e00b      	b.n	8000ba4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==1)
 8000b8c:	7a7b      	ldrb	r3, [r7, #9]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d102      	bne.n	8000b98 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk= 8000000;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <RCC_GetPCLK1Value+0xa4>)
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e005      	b.n	8000ba4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==2)
 8000b98:	7a7b      	ldrb	r3, [r7, #9]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d102      	bne.n	8000ba4 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk= RCC_GetPLLOutputClock();
 8000b9e:	f7ff ffdd 	bl	8000b5c <RCC_GetPLLOutputClock>
 8000ba2:	60f8      	str	r0, [r7, #12]
	}

	//for ahb1
	temp=((RCC->CFGR>>4)&0xF);
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <RCC_GetPCLK1Value+0x9c>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	091b      	lsrs	r3, r3, #4
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f003 030f 	and.w	r3, r3, #15
 8000bb0:	723b      	strb	r3, [r7, #8]

	if(temp<8)
 8000bb2:	7a3b      	ldrb	r3, [r7, #8]
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	d802      	bhi.n	8000bbe <RCC_GetPCLK1Value+0x52>
	{
		ahbp=1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	72fb      	strb	r3, [r7, #11]
 8000bbc:	e005      	b.n	8000bca <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		 ahbp=AHB_PreScalar[temp-8];
 8000bbe:	7a3b      	ldrb	r3, [r7, #8]
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <RCC_GetPCLK1Value+0xa8>)
 8000bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc8:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1
	temp=((RCC->CFGR>>10)&0x7);
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <RCC_GetPCLK1Value+0x9c>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	0a9b      	lsrs	r3, r3, #10
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	723b      	strb	r3, [r7, #8]

	if(temp<4)
 8000bd8:	7a3b      	ldrb	r3, [r7, #8]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d802      	bhi.n	8000be4 <RCC_GetPCLK1Value+0x78>
	{
		apb1p=1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	72bb      	strb	r3, [r7, #10]
 8000be2:	e004      	b.n	8000bee <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		 apb1p=APB1_PreScalar[temp-4];
 8000be4:	7a3b      	ldrb	r3, [r7, #8]
 8000be6:	3b04      	subs	r3, #4
 8000be8:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <RCC_GetPCLK1Value+0xac>)
 8000bea:	5cd3      	ldrb	r3, [r2, r3]
 8000bec:	72bb      	strb	r3, [r7, #10]
	}

	pclk1=(SystemClk/ahbp)/apb1p;
 8000bee:	7afb      	ldrb	r3, [r7, #11]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bf6:	7abb      	ldrb	r3, [r7, #10]
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	00f42400 	.word	0x00f42400
 8000c10:	007a1200 	.word	0x007a1200
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000010 	.word	0x20000010

08000c1c <I2C_Init>:
/*
 * 		@ I2C initialisation driver
 */

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

	//enable the clock for
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff5e 	bl	8000af0 <I2C_PeriClockControl>

	//configure the ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl<<10;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	029b      	lsls	r3, r3, #10
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR"
	tempreg = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 8000c4c:	f7ff ff8e 	bl	8000b6c <RCC_GetPCLK1Value>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <I2C_Init+0x158>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	0c9b      	lsrs	r3, r3, #18
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c6a:	605a      	str	r2, [r3, #4]

	//configure the FREQ field for OAR
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress<<1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);				//becasue datasheet says that
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	609a      	str	r2, [r3, #8]

	//CCR Calculations
	uint16_t ccr_value = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed<= I2C_SCL_SPEED_SM)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <I2C_Init+0x15c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d80f      	bhi.n	8000cba <I2C_Init+0x9e>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value()/(2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c9a:	f7ff ff67 	bl	8000b6c <RCC_GetPCLK1Value>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000cac:	897b      	ldrh	r3, [r7, #10]
 8000cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e030      	b.n	8000d1c <I2C_Init+0x100>
	}
	else
	{
		//fast mode
		tempreg |= (1<<15);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc0:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<pI2CHandle->I2C_Config.I2C_FMDutyCycle<<14);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	039b      	lsls	r3, r3, #14
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10b      	bne.n	8000cf6 <I2C_Init+0xda>
		{
			ccr_value = (RCC_GetPCLK1Value()/(3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000cde:	f7ff ff45 	bl	8000b6c <RCC_GetPCLK1Value>
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cf2:	817b      	strh	r3, [r7, #10]
 8000cf4:	e00c      	b.n	8000d10 <I2C_Init+0xf4>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value()/(25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000cf6:	f7ff ff39 	bl	8000b6c <RCC_GetPCLK1Value>
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	009a      	lsls	r2, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d0e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000d10:	897b      	ldrh	r3, [r7, #10]
 8000d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed<= I2C_SCL_SPEED_SM)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <I2C_Init+0x15c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d809      	bhi.n	8000d42 <I2C_Init+0x126>
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U)+1;
 8000d2e:	f7ff ff1d 	bl	8000b6c <RCC_GetPCLK1Value>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <I2C_Init+0x158>)
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	0c9b      	lsrs	r3, r3, #18
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	e00d      	b.n	8000d5e <I2C_Init+0x142>
	}
	else
	{
		//mod eis fast mode
		tempreg = ((RCC_GetPCLK1Value()*300)/1000000000U)+1;
 8000d42:	f7ff ff13 	bl	8000b6c <RCC_GetPCLK1Value>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d4c:	fb02 f303 	mul.w	r3, r2, r3
 8000d50:	0a5b      	lsrs	r3, r3, #9
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <I2C_Init+0x160>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	09db      	lsrs	r3, r3, #7
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d68:	621a      	str	r2, [r3, #32]
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	000186a0 	.word	0x000186a0
 8000d7c:	00044b83 	.word	0x00044b83

08000d80 <I2C_GetFlagStatus>:
{

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	4611      	mov	r1, r2
 8000db2:	461a      	mov	r2, r3
 8000db4:	460b      	mov	r3, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fdfa 	bl	80009ba <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completerd by checkin gthe SB flag in the SR1
	// note: until SB is cleared SCL will be stretched(pulled to Low)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000dc6:	bf00      	nop
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffd6 	bl	8000d80 <I2C_GetFlagStatus>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f6      	beq.n	8000dc8 <I2C_MasterSendData+0x22>

	//3. SEND THE ADDRESS FOO THE SLAVE WITH R/NW BIT SET TO THE W(0)(total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	79ba      	ldrb	r2, [r7, #6]
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fdf8 	bl	80009d8 <I2C_ExecuteAddressPhaseWrite>

	//4. COnfirm that the address phase is completed bby checking the Addr flag in thhe SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000de8:	bf00      	nop
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2102      	movs	r1, #2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ffc5 	bl	8000d80 <I2C_GetFlagStatus>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f6      	beq.n	8000dea <I2C_MasterSendData+0x44>

	//5. clear the ADDR flag according to its software sequence
	// Note: until ADDr is cleared SCL will be stretched(pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff fe15 	bl	8000a2c <I2C_ClearADDRFlag>

	//6. send the data until Len becomes 0
	while(Len>0)
 8000e02:	e014      	b.n	8000e2e <I2C_MasterSendData+0x88>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); 			//wait till TXE is Set
 8000e04:	bf00      	nop
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffb7 	bl	8000d80 <I2C_GetFlagStatus>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f6      	beq.n	8000e06 <I2C_MasterSendData+0x60>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
		Len--;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	71fb      	strb	r3, [r7, #7]
	while(Len>0)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1e7      	bne.n	8000e04 <I2C_MasterSendData+0x5e>
	}

	//7. When Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP Condition
	// not: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//when BTF =1 SCL will be stretched(pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000e34:	bf00      	nop
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff9f 	bl	8000d80 <I2C_GetFlagStatus>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f6      	beq.n	8000e36 <I2C_MasterSendData+0x90>

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000e48:	bf00      	nop
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff95 	bl	8000d80 <I2C_GetFlagStatus>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f6      	beq.n	8000e4a <I2C_MasterSendData+0xa4>

	//8. Generate STOP Condition and master need not to wait for the completion of stop condition.
	//note: Geenrating STOP, Automatically clear the BTF
	if(Sr==I2C_DISABLE_SR)
 8000e5c:	7e3b      	ldrb	r3, [r7, #24]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d104      	bne.n	8000e6c <I2C_MasterSendData+0xc6>
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe18 	bl	8000a9c <I2C_GenerateStopCondition>
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t  *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	4613      	mov	r3, r2
 8000e88:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fd93 	bl	80009ba <I2C_GenerateStartCondition>

	//2. confirm thatstart generaton is completed by checking the SB flag in the SR1
	//Note: until SB is cleared SCL will be stretched(pulled to low)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000e94:	bf00      	nop
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff6f 	bl	8000d80 <I2C_GetFlagStatus>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f6      	beq.n	8000e96 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1)(total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	79ba      	ldrb	r2, [r7, #6]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fda6 	bl	8000a02 <I2C_ExecuteAddressPhaseRead>

	//4. Wait until address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000eb6:	bf00      	nop
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff5e 	bl	8000d80 <I2C_GetFlagStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f6      	beq.n	8000eb8 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len==1)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d11d      	bne.n	8000f0c <I2C_MasterReceiveData+0x98>
	{
		// disable acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f85a 	bl	8000f90 <I2C_ManageAcking>

		//clear the addr flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f7ff fda5 	bl	8000a2c <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000ee2:	bf00      	nop
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff48 	bl	8000d80 <I2C_GetFlagStatus>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f6      	beq.n	8000ee4 <I2C_MasterReceiveData+0x70>

		//generate the stop condition
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fdce 	bl	8000a9c <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	701a      	strb	r2, [r3, #0]
	}

	//procedure to readfrom slave when Len>1
	if(Len>1)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d930      	bls.n	8000f74 <I2C_MasterReceiveData+0x100>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f7ff fd8a 	bl	8000a2c <I2C_ClearADDRFlag>

		//read the data unitl Len becomes zero
		for ( uint32_t i=Len;i>0;i--)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e027      	b.n	8000f6e <I2C_MasterReceiveData+0xfa>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000f1e:	bf00      	nop
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2140      	movs	r1, #64	; 0x40
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff2a 	bl	8000d80 <I2C_GetFlagStatus>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f6      	beq.n	8000f20 <I2C_MasterReceiveData+0xac>

			if(i==2)			//if last 2 bytes are remaining
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d10e      	bne.n	8000f56 <I2C_MasterReceiveData+0xe2>
			{
				//clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f826 	bl	8000f90 <I2C_ManageAcking>

				//generate STOP condition

				if(Sr==I2C_DISABLE_SR)
 8000f44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d104      	bne.n	8000f56 <I2C_MasterReceiveData+0xe2>
					{
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fda3 	bl	8000a9c <I2C_GenerateStopCondition>
					}

			}

			//read the data froom data register in to the buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i=Len;i>0;i--)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1d4      	bne.n	8000f1e <I2C_MasterReceiveData+0xaa>
		}
	}

	//re-enable Acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl==I2C_ACK_ENABLE)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d105      	bne.n	8000f88 <I2C_MasterReceiveData+0x114>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f804 	bl	8000f90 <I2C_ManageAcking>
	}

}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <I2C_ManageAcking>:
}



void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== I2C_ACK_ENABLE)
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d106      	bne.n	8000fb0 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
	else
	{
		//disable the ack
		pI2Cx->CR1 &=~(1<<I2C_CR1_ACK);
	}
}
 8000fae:	e005      	b.n	8000fbc <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &=~(1<<I2C_CR1_ACK);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
	...

08000fc8 <__libc_init_array>:
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	4d0d      	ldr	r5, [pc, #52]	; (8001000 <__libc_init_array+0x38>)
 8000fcc:	4c0d      	ldr	r4, [pc, #52]	; (8001004 <__libc_init_array+0x3c>)
 8000fce:	1b64      	subs	r4, r4, r5
 8000fd0:	10a4      	asrs	r4, r4, #2
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	42a6      	cmp	r6, r4
 8000fd6:	d109      	bne.n	8000fec <__libc_init_array+0x24>
 8000fd8:	4d0b      	ldr	r5, [pc, #44]	; (8001008 <__libc_init_array+0x40>)
 8000fda:	4c0c      	ldr	r4, [pc, #48]	; (800100c <__libc_init_array+0x44>)
 8000fdc:	f000 ffe4 	bl	8001fa8 <_init>
 8000fe0:	1b64      	subs	r4, r4, r5
 8000fe2:	10a4      	asrs	r4, r4, #2
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	42a6      	cmp	r6, r4
 8000fe8:	d105      	bne.n	8000ff6 <__libc_init_array+0x2e>
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff0:	4798      	blx	r3
 8000ff2:	3601      	adds	r6, #1
 8000ff4:	e7ee      	b.n	8000fd4 <__libc_init_array+0xc>
 8000ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffa:	4798      	blx	r3
 8000ffc:	3601      	adds	r6, #1
 8000ffe:	e7f2      	b.n	8000fe6 <__libc_init_array+0x1e>
 8001000:	08002064 	.word	0x08002064
 8001004:	08002064 	.word	0x08002064
 8001008:	08002064 	.word	0x08002064
 800100c:	08002068 	.word	0x08002068

08001010 <memset>:
 8001010:	4402      	add	r2, r0
 8001012:	4603      	mov	r3, r0
 8001014:	4293      	cmp	r3, r2
 8001016:	d100      	bne.n	800101a <memset+0xa>
 8001018:	4770      	bx	lr
 800101a:	f803 1b01 	strb.w	r1, [r3], #1
 800101e:	e7f9      	b.n	8001014 <memset+0x4>

08001020 <iprintf>:
 8001020:	b40f      	push	{r0, r1, r2, r3}
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <iprintf+0x2c>)
 8001024:	b513      	push	{r0, r1, r4, lr}
 8001026:	681c      	ldr	r4, [r3, #0]
 8001028:	b124      	cbz	r4, 8001034 <iprintf+0x14>
 800102a:	69a3      	ldr	r3, [r4, #24]
 800102c:	b913      	cbnz	r3, 8001034 <iprintf+0x14>
 800102e:	4620      	mov	r0, r4
 8001030:	f000 f866 	bl	8001100 <__sinit>
 8001034:	ab05      	add	r3, sp, #20
 8001036:	9a04      	ldr	r2, [sp, #16]
 8001038:	68a1      	ldr	r1, [r4, #8]
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	4620      	mov	r0, r4
 800103e:	f000 f9bb 	bl	80013b8 <_vfiprintf_r>
 8001042:	b002      	add	sp, #8
 8001044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001048:	b004      	add	sp, #16
 800104a:	4770      	bx	lr
 800104c:	20000014 	.word	0x20000014

08001050 <std>:
 8001050:	2300      	movs	r3, #0
 8001052:	b510      	push	{r4, lr}
 8001054:	4604      	mov	r4, r0
 8001056:	e9c0 3300 	strd	r3, r3, [r0]
 800105a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800105e:	6083      	str	r3, [r0, #8]
 8001060:	8181      	strh	r1, [r0, #12]
 8001062:	6643      	str	r3, [r0, #100]	; 0x64
 8001064:	81c2      	strh	r2, [r0, #14]
 8001066:	6183      	str	r3, [r0, #24]
 8001068:	4619      	mov	r1, r3
 800106a:	2208      	movs	r2, #8
 800106c:	305c      	adds	r0, #92	; 0x5c
 800106e:	f7ff ffcf 	bl	8001010 <memset>
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <std+0x38>)
 8001074:	6263      	str	r3, [r4, #36]	; 0x24
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <std+0x3c>)
 8001078:	62a3      	str	r3, [r4, #40]	; 0x28
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <std+0x40>)
 800107c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <std+0x44>)
 8001080:	6224      	str	r4, [r4, #32]
 8001082:	6323      	str	r3, [r4, #48]	; 0x30
 8001084:	bd10      	pop	{r4, pc}
 8001086:	bf00      	nop
 8001088:	08001961 	.word	0x08001961
 800108c:	08001983 	.word	0x08001983
 8001090:	080019bb 	.word	0x080019bb
 8001094:	080019df 	.word	0x080019df

08001098 <_cleanup_r>:
 8001098:	4901      	ldr	r1, [pc, #4]	; (80010a0 <_cleanup_r+0x8>)
 800109a:	f000 b8af 	b.w	80011fc <_fwalk_reent>
 800109e:	bf00      	nop
 80010a0:	08001cb1 	.word	0x08001cb1

080010a4 <__sfmoreglue>:
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	2268      	movs	r2, #104	; 0x68
 80010a8:	1e4d      	subs	r5, r1, #1
 80010aa:	4355      	muls	r5, r2
 80010ac:	460e      	mov	r6, r1
 80010ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80010b2:	f000 f8e5 	bl	8001280 <_malloc_r>
 80010b6:	4604      	mov	r4, r0
 80010b8:	b140      	cbz	r0, 80010cc <__sfmoreglue+0x28>
 80010ba:	2100      	movs	r1, #0
 80010bc:	e9c0 1600 	strd	r1, r6, [r0]
 80010c0:	300c      	adds	r0, #12
 80010c2:	60a0      	str	r0, [r4, #8]
 80010c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80010c8:	f7ff ffa2 	bl	8001010 <memset>
 80010cc:	4620      	mov	r0, r4
 80010ce:	bd70      	pop	{r4, r5, r6, pc}

080010d0 <__sfp_lock_acquire>:
 80010d0:	4801      	ldr	r0, [pc, #4]	; (80010d8 <__sfp_lock_acquire+0x8>)
 80010d2:	f000 b8b3 	b.w	800123c <__retarget_lock_acquire_recursive>
 80010d6:	bf00      	nop
 80010d8:	200001c5 	.word	0x200001c5

080010dc <__sfp_lock_release>:
 80010dc:	4801      	ldr	r0, [pc, #4]	; (80010e4 <__sfp_lock_release+0x8>)
 80010de:	f000 b8ae 	b.w	800123e <__retarget_lock_release_recursive>
 80010e2:	bf00      	nop
 80010e4:	200001c5 	.word	0x200001c5

080010e8 <__sinit_lock_acquire>:
 80010e8:	4801      	ldr	r0, [pc, #4]	; (80010f0 <__sinit_lock_acquire+0x8>)
 80010ea:	f000 b8a7 	b.w	800123c <__retarget_lock_acquire_recursive>
 80010ee:	bf00      	nop
 80010f0:	200001c6 	.word	0x200001c6

080010f4 <__sinit_lock_release>:
 80010f4:	4801      	ldr	r0, [pc, #4]	; (80010fc <__sinit_lock_release+0x8>)
 80010f6:	f000 b8a2 	b.w	800123e <__retarget_lock_release_recursive>
 80010fa:	bf00      	nop
 80010fc:	200001c6 	.word	0x200001c6

08001100 <__sinit>:
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	f7ff fff0 	bl	80010e8 <__sinit_lock_acquire>
 8001108:	69a3      	ldr	r3, [r4, #24]
 800110a:	b11b      	cbz	r3, 8001114 <__sinit+0x14>
 800110c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001110:	f7ff bff0 	b.w	80010f4 <__sinit_lock_release>
 8001114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001118:	6523      	str	r3, [r4, #80]	; 0x50
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <__sinit+0x68>)
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <__sinit+0x6c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	62a2      	str	r2, [r4, #40]	; 0x28
 8001122:	42a3      	cmp	r3, r4
 8001124:	bf04      	itt	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	61a3      	streq	r3, [r4, #24]
 800112a:	4620      	mov	r0, r4
 800112c:	f000 f820 	bl	8001170 <__sfp>
 8001130:	6060      	str	r0, [r4, #4]
 8001132:	4620      	mov	r0, r4
 8001134:	f000 f81c 	bl	8001170 <__sfp>
 8001138:	60a0      	str	r0, [r4, #8]
 800113a:	4620      	mov	r0, r4
 800113c:	f000 f818 	bl	8001170 <__sfp>
 8001140:	2200      	movs	r2, #0
 8001142:	60e0      	str	r0, [r4, #12]
 8001144:	2104      	movs	r1, #4
 8001146:	6860      	ldr	r0, [r4, #4]
 8001148:	f7ff ff82 	bl	8001050 <std>
 800114c:	68a0      	ldr	r0, [r4, #8]
 800114e:	2201      	movs	r2, #1
 8001150:	2109      	movs	r1, #9
 8001152:	f7ff ff7d 	bl	8001050 <std>
 8001156:	68e0      	ldr	r0, [r4, #12]
 8001158:	2202      	movs	r2, #2
 800115a:	2112      	movs	r1, #18
 800115c:	f7ff ff78 	bl	8001050 <std>
 8001160:	2301      	movs	r3, #1
 8001162:	61a3      	str	r3, [r4, #24]
 8001164:	e7d2      	b.n	800110c <__sinit+0xc>
 8001166:	bf00      	nop
 8001168:	08001fcc 	.word	0x08001fcc
 800116c:	08001099 	.word	0x08001099

08001170 <__sfp>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	4607      	mov	r7, r0
 8001174:	f7ff ffac 	bl	80010d0 <__sfp_lock_acquire>
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <__sfp+0x84>)
 800117a:	681e      	ldr	r6, [r3, #0]
 800117c:	69b3      	ldr	r3, [r6, #24]
 800117e:	b913      	cbnz	r3, 8001186 <__sfp+0x16>
 8001180:	4630      	mov	r0, r6
 8001182:	f7ff ffbd 	bl	8001100 <__sinit>
 8001186:	3648      	adds	r6, #72	; 0x48
 8001188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800118c:	3b01      	subs	r3, #1
 800118e:	d503      	bpl.n	8001198 <__sfp+0x28>
 8001190:	6833      	ldr	r3, [r6, #0]
 8001192:	b30b      	cbz	r3, 80011d8 <__sfp+0x68>
 8001194:	6836      	ldr	r6, [r6, #0]
 8001196:	e7f7      	b.n	8001188 <__sfp+0x18>
 8001198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800119c:	b9d5      	cbnz	r5, 80011d4 <__sfp+0x64>
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <__sfp+0x88>)
 80011a0:	60e3      	str	r3, [r4, #12]
 80011a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80011a6:	6665      	str	r5, [r4, #100]	; 0x64
 80011a8:	f000 f847 	bl	800123a <__retarget_lock_init_recursive>
 80011ac:	f7ff ff96 	bl	80010dc <__sfp_lock_release>
 80011b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80011b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80011b8:	6025      	str	r5, [r4, #0]
 80011ba:	61a5      	str	r5, [r4, #24]
 80011bc:	2208      	movs	r2, #8
 80011be:	4629      	mov	r1, r5
 80011c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80011c4:	f7ff ff24 	bl	8001010 <memset>
 80011c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80011cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80011d0:	4620      	mov	r0, r4
 80011d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d4:	3468      	adds	r4, #104	; 0x68
 80011d6:	e7d9      	b.n	800118c <__sfp+0x1c>
 80011d8:	2104      	movs	r1, #4
 80011da:	4638      	mov	r0, r7
 80011dc:	f7ff ff62 	bl	80010a4 <__sfmoreglue>
 80011e0:	4604      	mov	r4, r0
 80011e2:	6030      	str	r0, [r6, #0]
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d1d5      	bne.n	8001194 <__sfp+0x24>
 80011e8:	f7ff ff78 	bl	80010dc <__sfp_lock_release>
 80011ec:	230c      	movs	r3, #12
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	e7ee      	b.n	80011d0 <__sfp+0x60>
 80011f2:	bf00      	nop
 80011f4:	08001fcc 	.word	0x08001fcc
 80011f8:	ffff0001 	.word	0xffff0001

080011fc <_fwalk_reent>:
 80011fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001200:	4606      	mov	r6, r0
 8001202:	4688      	mov	r8, r1
 8001204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001208:	2700      	movs	r7, #0
 800120a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800120e:	f1b9 0901 	subs.w	r9, r9, #1
 8001212:	d505      	bpl.n	8001220 <_fwalk_reent+0x24>
 8001214:	6824      	ldr	r4, [r4, #0]
 8001216:	2c00      	cmp	r4, #0
 8001218:	d1f7      	bne.n	800120a <_fwalk_reent+0xe>
 800121a:	4638      	mov	r0, r7
 800121c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001220:	89ab      	ldrh	r3, [r5, #12]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d907      	bls.n	8001236 <_fwalk_reent+0x3a>
 8001226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800122a:	3301      	adds	r3, #1
 800122c:	d003      	beq.n	8001236 <_fwalk_reent+0x3a>
 800122e:	4629      	mov	r1, r5
 8001230:	4630      	mov	r0, r6
 8001232:	47c0      	blx	r8
 8001234:	4307      	orrs	r7, r0
 8001236:	3568      	adds	r5, #104	; 0x68
 8001238:	e7e9      	b.n	800120e <_fwalk_reent+0x12>

0800123a <__retarget_lock_init_recursive>:
 800123a:	4770      	bx	lr

0800123c <__retarget_lock_acquire_recursive>:
 800123c:	4770      	bx	lr

0800123e <__retarget_lock_release_recursive>:
 800123e:	4770      	bx	lr

08001240 <sbrk_aligned>:
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	4e0e      	ldr	r6, [pc, #56]	; (800127c <sbrk_aligned+0x3c>)
 8001244:	460c      	mov	r4, r1
 8001246:	6831      	ldr	r1, [r6, #0]
 8001248:	4605      	mov	r5, r0
 800124a:	b911      	cbnz	r1, 8001252 <sbrk_aligned+0x12>
 800124c:	f000 fb78 	bl	8001940 <_sbrk_r>
 8001250:	6030      	str	r0, [r6, #0]
 8001252:	4621      	mov	r1, r4
 8001254:	4628      	mov	r0, r5
 8001256:	f000 fb73 	bl	8001940 <_sbrk_r>
 800125a:	1c43      	adds	r3, r0, #1
 800125c:	d00a      	beq.n	8001274 <sbrk_aligned+0x34>
 800125e:	1cc4      	adds	r4, r0, #3
 8001260:	f024 0403 	bic.w	r4, r4, #3
 8001264:	42a0      	cmp	r0, r4
 8001266:	d007      	beq.n	8001278 <sbrk_aligned+0x38>
 8001268:	1a21      	subs	r1, r4, r0
 800126a:	4628      	mov	r0, r5
 800126c:	f000 fb68 	bl	8001940 <_sbrk_r>
 8001270:	3001      	adds	r0, #1
 8001272:	d101      	bne.n	8001278 <sbrk_aligned+0x38>
 8001274:	f04f 34ff 	mov.w	r4, #4294967295
 8001278:	4620      	mov	r0, r4
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	200001cc 	.word	0x200001cc

08001280 <_malloc_r>:
 8001280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	1ccd      	adds	r5, r1, #3
 8001286:	f025 0503 	bic.w	r5, r5, #3
 800128a:	3508      	adds	r5, #8
 800128c:	2d0c      	cmp	r5, #12
 800128e:	bf38      	it	cc
 8001290:	250c      	movcc	r5, #12
 8001292:	2d00      	cmp	r5, #0
 8001294:	4607      	mov	r7, r0
 8001296:	db01      	blt.n	800129c <_malloc_r+0x1c>
 8001298:	42a9      	cmp	r1, r5
 800129a:	d905      	bls.n	80012a8 <_malloc_r+0x28>
 800129c:	230c      	movs	r3, #12
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	2600      	movs	r6, #0
 80012a2:	4630      	mov	r0, r6
 80012a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a8:	4e2e      	ldr	r6, [pc, #184]	; (8001364 <_malloc_r+0xe4>)
 80012aa:	f000 fdb5 	bl	8001e18 <__malloc_lock>
 80012ae:	6833      	ldr	r3, [r6, #0]
 80012b0:	461c      	mov	r4, r3
 80012b2:	bb34      	cbnz	r4, 8001302 <_malloc_r+0x82>
 80012b4:	4629      	mov	r1, r5
 80012b6:	4638      	mov	r0, r7
 80012b8:	f7ff ffc2 	bl	8001240 <sbrk_aligned>
 80012bc:	1c43      	adds	r3, r0, #1
 80012be:	4604      	mov	r4, r0
 80012c0:	d14d      	bne.n	800135e <_malloc_r+0xde>
 80012c2:	6834      	ldr	r4, [r6, #0]
 80012c4:	4626      	mov	r6, r4
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	d140      	bne.n	800134c <_malloc_r+0xcc>
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	4631      	mov	r1, r6
 80012ce:	4638      	mov	r0, r7
 80012d0:	eb04 0803 	add.w	r8, r4, r3
 80012d4:	f000 fb34 	bl	8001940 <_sbrk_r>
 80012d8:	4580      	cmp	r8, r0
 80012da:	d13a      	bne.n	8001352 <_malloc_r+0xd2>
 80012dc:	6821      	ldr	r1, [r4, #0]
 80012de:	3503      	adds	r5, #3
 80012e0:	1a6d      	subs	r5, r5, r1
 80012e2:	f025 0503 	bic.w	r5, r5, #3
 80012e6:	3508      	adds	r5, #8
 80012e8:	2d0c      	cmp	r5, #12
 80012ea:	bf38      	it	cc
 80012ec:	250c      	movcc	r5, #12
 80012ee:	4629      	mov	r1, r5
 80012f0:	4638      	mov	r0, r7
 80012f2:	f7ff ffa5 	bl	8001240 <sbrk_aligned>
 80012f6:	3001      	adds	r0, #1
 80012f8:	d02b      	beq.n	8001352 <_malloc_r+0xd2>
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	442b      	add	r3, r5
 80012fe:	6023      	str	r3, [r4, #0]
 8001300:	e00e      	b.n	8001320 <_malloc_r+0xa0>
 8001302:	6822      	ldr	r2, [r4, #0]
 8001304:	1b52      	subs	r2, r2, r5
 8001306:	d41e      	bmi.n	8001346 <_malloc_r+0xc6>
 8001308:	2a0b      	cmp	r2, #11
 800130a:	d916      	bls.n	800133a <_malloc_r+0xba>
 800130c:	1961      	adds	r1, r4, r5
 800130e:	42a3      	cmp	r3, r4
 8001310:	6025      	str	r5, [r4, #0]
 8001312:	bf18      	it	ne
 8001314:	6059      	strne	r1, [r3, #4]
 8001316:	6863      	ldr	r3, [r4, #4]
 8001318:	bf08      	it	eq
 800131a:	6031      	streq	r1, [r6, #0]
 800131c:	5162      	str	r2, [r4, r5]
 800131e:	604b      	str	r3, [r1, #4]
 8001320:	4638      	mov	r0, r7
 8001322:	f104 060b 	add.w	r6, r4, #11
 8001326:	f000 fd7d 	bl	8001e24 <__malloc_unlock>
 800132a:	f026 0607 	bic.w	r6, r6, #7
 800132e:	1d23      	adds	r3, r4, #4
 8001330:	1af2      	subs	r2, r6, r3
 8001332:	d0b6      	beq.n	80012a2 <_malloc_r+0x22>
 8001334:	1b9b      	subs	r3, r3, r6
 8001336:	50a3      	str	r3, [r4, r2]
 8001338:	e7b3      	b.n	80012a2 <_malloc_r+0x22>
 800133a:	6862      	ldr	r2, [r4, #4]
 800133c:	42a3      	cmp	r3, r4
 800133e:	bf0c      	ite	eq
 8001340:	6032      	streq	r2, [r6, #0]
 8001342:	605a      	strne	r2, [r3, #4]
 8001344:	e7ec      	b.n	8001320 <_malloc_r+0xa0>
 8001346:	4623      	mov	r3, r4
 8001348:	6864      	ldr	r4, [r4, #4]
 800134a:	e7b2      	b.n	80012b2 <_malloc_r+0x32>
 800134c:	4634      	mov	r4, r6
 800134e:	6876      	ldr	r6, [r6, #4]
 8001350:	e7b9      	b.n	80012c6 <_malloc_r+0x46>
 8001352:	230c      	movs	r3, #12
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4638      	mov	r0, r7
 8001358:	f000 fd64 	bl	8001e24 <__malloc_unlock>
 800135c:	e7a1      	b.n	80012a2 <_malloc_r+0x22>
 800135e:	6025      	str	r5, [r4, #0]
 8001360:	e7de      	b.n	8001320 <_malloc_r+0xa0>
 8001362:	bf00      	nop
 8001364:	200001c8 	.word	0x200001c8

08001368 <__sfputc_r>:
 8001368:	6893      	ldr	r3, [r2, #8]
 800136a:	3b01      	subs	r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	b410      	push	{r4}
 8001370:	6093      	str	r3, [r2, #8]
 8001372:	da07      	bge.n	8001384 <__sfputc_r+0x1c>
 8001374:	6994      	ldr	r4, [r2, #24]
 8001376:	42a3      	cmp	r3, r4
 8001378:	db01      	blt.n	800137e <__sfputc_r+0x16>
 800137a:	290a      	cmp	r1, #10
 800137c:	d102      	bne.n	8001384 <__sfputc_r+0x1c>
 800137e:	bc10      	pop	{r4}
 8001380:	f000 bb32 	b.w	80019e8 <__swbuf_r>
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	1c58      	adds	r0, r3, #1
 8001388:	6010      	str	r0, [r2, #0]
 800138a:	7019      	strb	r1, [r3, #0]
 800138c:	4608      	mov	r0, r1
 800138e:	bc10      	pop	{r4}
 8001390:	4770      	bx	lr

08001392 <__sfputs_r>:
 8001392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001394:	4606      	mov	r6, r0
 8001396:	460f      	mov	r7, r1
 8001398:	4614      	mov	r4, r2
 800139a:	18d5      	adds	r5, r2, r3
 800139c:	42ac      	cmp	r4, r5
 800139e:	d101      	bne.n	80013a4 <__sfputs_r+0x12>
 80013a0:	2000      	movs	r0, #0
 80013a2:	e007      	b.n	80013b4 <__sfputs_r+0x22>
 80013a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013a8:	463a      	mov	r2, r7
 80013aa:	4630      	mov	r0, r6
 80013ac:	f7ff ffdc 	bl	8001368 <__sfputc_r>
 80013b0:	1c43      	adds	r3, r0, #1
 80013b2:	d1f3      	bne.n	800139c <__sfputs_r+0xa>
 80013b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013b8 <_vfiprintf_r>:
 80013b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013bc:	460d      	mov	r5, r1
 80013be:	b09d      	sub	sp, #116	; 0x74
 80013c0:	4614      	mov	r4, r2
 80013c2:	4698      	mov	r8, r3
 80013c4:	4606      	mov	r6, r0
 80013c6:	b118      	cbz	r0, 80013d0 <_vfiprintf_r+0x18>
 80013c8:	6983      	ldr	r3, [r0, #24]
 80013ca:	b90b      	cbnz	r3, 80013d0 <_vfiprintf_r+0x18>
 80013cc:	f7ff fe98 	bl	8001100 <__sinit>
 80013d0:	4b89      	ldr	r3, [pc, #548]	; (80015f8 <_vfiprintf_r+0x240>)
 80013d2:	429d      	cmp	r5, r3
 80013d4:	d11b      	bne.n	800140e <_vfiprintf_r+0x56>
 80013d6:	6875      	ldr	r5, [r6, #4]
 80013d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80013da:	07d9      	lsls	r1, r3, #31
 80013dc:	d405      	bmi.n	80013ea <_vfiprintf_r+0x32>
 80013de:	89ab      	ldrh	r3, [r5, #12]
 80013e0:	059a      	lsls	r2, r3, #22
 80013e2:	d402      	bmi.n	80013ea <_vfiprintf_r+0x32>
 80013e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80013e6:	f7ff ff29 	bl	800123c <__retarget_lock_acquire_recursive>
 80013ea:	89ab      	ldrh	r3, [r5, #12]
 80013ec:	071b      	lsls	r3, r3, #28
 80013ee:	d501      	bpl.n	80013f4 <_vfiprintf_r+0x3c>
 80013f0:	692b      	ldr	r3, [r5, #16]
 80013f2:	b9eb      	cbnz	r3, 8001430 <_vfiprintf_r+0x78>
 80013f4:	4629      	mov	r1, r5
 80013f6:	4630      	mov	r0, r6
 80013f8:	f000 fb5a 	bl	8001ab0 <__swsetup_r>
 80013fc:	b1c0      	cbz	r0, 8001430 <_vfiprintf_r+0x78>
 80013fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001400:	07dc      	lsls	r4, r3, #31
 8001402:	d50e      	bpl.n	8001422 <_vfiprintf_r+0x6a>
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	b01d      	add	sp, #116	; 0x74
 800140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800140e:	4b7b      	ldr	r3, [pc, #492]	; (80015fc <_vfiprintf_r+0x244>)
 8001410:	429d      	cmp	r5, r3
 8001412:	d101      	bne.n	8001418 <_vfiprintf_r+0x60>
 8001414:	68b5      	ldr	r5, [r6, #8]
 8001416:	e7df      	b.n	80013d8 <_vfiprintf_r+0x20>
 8001418:	4b79      	ldr	r3, [pc, #484]	; (8001600 <_vfiprintf_r+0x248>)
 800141a:	429d      	cmp	r5, r3
 800141c:	bf08      	it	eq
 800141e:	68f5      	ldreq	r5, [r6, #12]
 8001420:	e7da      	b.n	80013d8 <_vfiprintf_r+0x20>
 8001422:	89ab      	ldrh	r3, [r5, #12]
 8001424:	0598      	lsls	r0, r3, #22
 8001426:	d4ed      	bmi.n	8001404 <_vfiprintf_r+0x4c>
 8001428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800142a:	f7ff ff08 	bl	800123e <__retarget_lock_release_recursive>
 800142e:	e7e9      	b.n	8001404 <_vfiprintf_r+0x4c>
 8001430:	2300      	movs	r3, #0
 8001432:	9309      	str	r3, [sp, #36]	; 0x24
 8001434:	2320      	movs	r3, #32
 8001436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800143a:	f8cd 800c 	str.w	r8, [sp, #12]
 800143e:	2330      	movs	r3, #48	; 0x30
 8001440:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001604 <_vfiprintf_r+0x24c>
 8001444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001448:	f04f 0901 	mov.w	r9, #1
 800144c:	4623      	mov	r3, r4
 800144e:	469a      	mov	sl, r3
 8001450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001454:	b10a      	cbz	r2, 800145a <_vfiprintf_r+0xa2>
 8001456:	2a25      	cmp	r2, #37	; 0x25
 8001458:	d1f9      	bne.n	800144e <_vfiprintf_r+0x96>
 800145a:	ebba 0b04 	subs.w	fp, sl, r4
 800145e:	d00b      	beq.n	8001478 <_vfiprintf_r+0xc0>
 8001460:	465b      	mov	r3, fp
 8001462:	4622      	mov	r2, r4
 8001464:	4629      	mov	r1, r5
 8001466:	4630      	mov	r0, r6
 8001468:	f7ff ff93 	bl	8001392 <__sfputs_r>
 800146c:	3001      	adds	r0, #1
 800146e:	f000 80aa 	beq.w	80015c6 <_vfiprintf_r+0x20e>
 8001472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001474:	445a      	add	r2, fp
 8001476:	9209      	str	r2, [sp, #36]	; 0x24
 8001478:	f89a 3000 	ldrb.w	r3, [sl]
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80a2 	beq.w	80015c6 <_vfiprintf_r+0x20e>
 8001482:	2300      	movs	r3, #0
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800148c:	f10a 0a01 	add.w	sl, sl, #1
 8001490:	9304      	str	r3, [sp, #16]
 8001492:	9307      	str	r3, [sp, #28]
 8001494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001498:	931a      	str	r3, [sp, #104]	; 0x68
 800149a:	4654      	mov	r4, sl
 800149c:	2205      	movs	r2, #5
 800149e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014a2:	4858      	ldr	r0, [pc, #352]	; (8001604 <_vfiprintf_r+0x24c>)
 80014a4:	f7fe fea4 	bl	80001f0 <memchr>
 80014a8:	9a04      	ldr	r2, [sp, #16]
 80014aa:	b9d8      	cbnz	r0, 80014e4 <_vfiprintf_r+0x12c>
 80014ac:	06d1      	lsls	r1, r2, #27
 80014ae:	bf44      	itt	mi
 80014b0:	2320      	movmi	r3, #32
 80014b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014b6:	0713      	lsls	r3, r2, #28
 80014b8:	bf44      	itt	mi
 80014ba:	232b      	movmi	r3, #43	; 0x2b
 80014bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014c0:	f89a 3000 	ldrb.w	r3, [sl]
 80014c4:	2b2a      	cmp	r3, #42	; 0x2a
 80014c6:	d015      	beq.n	80014f4 <_vfiprintf_r+0x13c>
 80014c8:	9a07      	ldr	r2, [sp, #28]
 80014ca:	4654      	mov	r4, sl
 80014cc:	2000      	movs	r0, #0
 80014ce:	f04f 0c0a 	mov.w	ip, #10
 80014d2:	4621      	mov	r1, r4
 80014d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014d8:	3b30      	subs	r3, #48	; 0x30
 80014da:	2b09      	cmp	r3, #9
 80014dc:	d94e      	bls.n	800157c <_vfiprintf_r+0x1c4>
 80014de:	b1b0      	cbz	r0, 800150e <_vfiprintf_r+0x156>
 80014e0:	9207      	str	r2, [sp, #28]
 80014e2:	e014      	b.n	800150e <_vfiprintf_r+0x156>
 80014e4:	eba0 0308 	sub.w	r3, r0, r8
 80014e8:	fa09 f303 	lsl.w	r3, r9, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	9304      	str	r3, [sp, #16]
 80014f0:	46a2      	mov	sl, r4
 80014f2:	e7d2      	b.n	800149a <_vfiprintf_r+0xe2>
 80014f4:	9b03      	ldr	r3, [sp, #12]
 80014f6:	1d19      	adds	r1, r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	9103      	str	r1, [sp, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bfbb      	ittet	lt
 8001500:	425b      	neglt	r3, r3
 8001502:	f042 0202 	orrlt.w	r2, r2, #2
 8001506:	9307      	strge	r3, [sp, #28]
 8001508:	9307      	strlt	r3, [sp, #28]
 800150a:	bfb8      	it	lt
 800150c:	9204      	strlt	r2, [sp, #16]
 800150e:	7823      	ldrb	r3, [r4, #0]
 8001510:	2b2e      	cmp	r3, #46	; 0x2e
 8001512:	d10c      	bne.n	800152e <_vfiprintf_r+0x176>
 8001514:	7863      	ldrb	r3, [r4, #1]
 8001516:	2b2a      	cmp	r3, #42	; 0x2a
 8001518:	d135      	bne.n	8001586 <_vfiprintf_r+0x1ce>
 800151a:	9b03      	ldr	r3, [sp, #12]
 800151c:	1d1a      	adds	r2, r3, #4
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	9203      	str	r2, [sp, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	bfb8      	it	lt
 8001526:	f04f 33ff 	movlt.w	r3, #4294967295
 800152a:	3402      	adds	r4, #2
 800152c:	9305      	str	r3, [sp, #20]
 800152e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001608 <_vfiprintf_r+0x250>
 8001532:	7821      	ldrb	r1, [r4, #0]
 8001534:	2203      	movs	r2, #3
 8001536:	4650      	mov	r0, sl
 8001538:	f7fe fe5a 	bl	80001f0 <memchr>
 800153c:	b140      	cbz	r0, 8001550 <_vfiprintf_r+0x198>
 800153e:	2340      	movs	r3, #64	; 0x40
 8001540:	eba0 000a 	sub.w	r0, r0, sl
 8001544:	fa03 f000 	lsl.w	r0, r3, r0
 8001548:	9b04      	ldr	r3, [sp, #16]
 800154a:	4303      	orrs	r3, r0
 800154c:	3401      	adds	r4, #1
 800154e:	9304      	str	r3, [sp, #16]
 8001550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001554:	482d      	ldr	r0, [pc, #180]	; (800160c <_vfiprintf_r+0x254>)
 8001556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800155a:	2206      	movs	r2, #6
 800155c:	f7fe fe48 	bl	80001f0 <memchr>
 8001560:	2800      	cmp	r0, #0
 8001562:	d03f      	beq.n	80015e4 <_vfiprintf_r+0x22c>
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <_vfiprintf_r+0x258>)
 8001566:	bb1b      	cbnz	r3, 80015b0 <_vfiprintf_r+0x1f8>
 8001568:	9b03      	ldr	r3, [sp, #12]
 800156a:	3307      	adds	r3, #7
 800156c:	f023 0307 	bic.w	r3, r3, #7
 8001570:	3308      	adds	r3, #8
 8001572:	9303      	str	r3, [sp, #12]
 8001574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001576:	443b      	add	r3, r7
 8001578:	9309      	str	r3, [sp, #36]	; 0x24
 800157a:	e767      	b.n	800144c <_vfiprintf_r+0x94>
 800157c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001580:	460c      	mov	r4, r1
 8001582:	2001      	movs	r0, #1
 8001584:	e7a5      	b.n	80014d2 <_vfiprintf_r+0x11a>
 8001586:	2300      	movs	r3, #0
 8001588:	3401      	adds	r4, #1
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 0c0a 	mov.w	ip, #10
 8001592:	4620      	mov	r0, r4
 8001594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001598:	3a30      	subs	r2, #48	; 0x30
 800159a:	2a09      	cmp	r2, #9
 800159c:	d903      	bls.n	80015a6 <_vfiprintf_r+0x1ee>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0c5      	beq.n	800152e <_vfiprintf_r+0x176>
 80015a2:	9105      	str	r1, [sp, #20]
 80015a4:	e7c3      	b.n	800152e <_vfiprintf_r+0x176>
 80015a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80015aa:	4604      	mov	r4, r0
 80015ac:	2301      	movs	r3, #1
 80015ae:	e7f0      	b.n	8001592 <_vfiprintf_r+0x1da>
 80015b0:	ab03      	add	r3, sp, #12
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	462a      	mov	r2, r5
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <_vfiprintf_r+0x25c>)
 80015b8:	a904      	add	r1, sp, #16
 80015ba:	4630      	mov	r0, r6
 80015bc:	f3af 8000 	nop.w
 80015c0:	4607      	mov	r7, r0
 80015c2:	1c78      	adds	r0, r7, #1
 80015c4:	d1d6      	bne.n	8001574 <_vfiprintf_r+0x1bc>
 80015c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80015c8:	07d9      	lsls	r1, r3, #31
 80015ca:	d405      	bmi.n	80015d8 <_vfiprintf_r+0x220>
 80015cc:	89ab      	ldrh	r3, [r5, #12]
 80015ce:	059a      	lsls	r2, r3, #22
 80015d0:	d402      	bmi.n	80015d8 <_vfiprintf_r+0x220>
 80015d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015d4:	f7ff fe33 	bl	800123e <__retarget_lock_release_recursive>
 80015d8:	89ab      	ldrh	r3, [r5, #12]
 80015da:	065b      	lsls	r3, r3, #25
 80015dc:	f53f af12 	bmi.w	8001404 <_vfiprintf_r+0x4c>
 80015e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015e2:	e711      	b.n	8001408 <_vfiprintf_r+0x50>
 80015e4:	ab03      	add	r3, sp, #12
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	462a      	mov	r2, r5
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <_vfiprintf_r+0x25c>)
 80015ec:	a904      	add	r1, sp, #16
 80015ee:	4630      	mov	r0, r6
 80015f0:	f000 f880 	bl	80016f4 <_printf_i>
 80015f4:	e7e4      	b.n	80015c0 <_vfiprintf_r+0x208>
 80015f6:	bf00      	nop
 80015f8:	08001ff0 	.word	0x08001ff0
 80015fc:	08002010 	.word	0x08002010
 8001600:	08001fd0 	.word	0x08001fd0
 8001604:	08002030 	.word	0x08002030
 8001608:	08002036 	.word	0x08002036
 800160c:	0800203a 	.word	0x0800203a
 8001610:	00000000 	.word	0x00000000
 8001614:	08001393 	.word	0x08001393

08001618 <_printf_common>:
 8001618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800161c:	4616      	mov	r6, r2
 800161e:	4699      	mov	r9, r3
 8001620:	688a      	ldr	r2, [r1, #8]
 8001622:	690b      	ldr	r3, [r1, #16]
 8001624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001628:	4293      	cmp	r3, r2
 800162a:	bfb8      	it	lt
 800162c:	4613      	movlt	r3, r2
 800162e:	6033      	str	r3, [r6, #0]
 8001630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001634:	4607      	mov	r7, r0
 8001636:	460c      	mov	r4, r1
 8001638:	b10a      	cbz	r2, 800163e <_printf_common+0x26>
 800163a:	3301      	adds	r3, #1
 800163c:	6033      	str	r3, [r6, #0]
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	0699      	lsls	r1, r3, #26
 8001642:	bf42      	ittt	mi
 8001644:	6833      	ldrmi	r3, [r6, #0]
 8001646:	3302      	addmi	r3, #2
 8001648:	6033      	strmi	r3, [r6, #0]
 800164a:	6825      	ldr	r5, [r4, #0]
 800164c:	f015 0506 	ands.w	r5, r5, #6
 8001650:	d106      	bne.n	8001660 <_printf_common+0x48>
 8001652:	f104 0a19 	add.w	sl, r4, #25
 8001656:	68e3      	ldr	r3, [r4, #12]
 8001658:	6832      	ldr	r2, [r6, #0]
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	42ab      	cmp	r3, r5
 800165e:	dc26      	bgt.n	80016ae <_printf_common+0x96>
 8001660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001664:	1e13      	subs	r3, r2, #0
 8001666:	6822      	ldr	r2, [r4, #0]
 8001668:	bf18      	it	ne
 800166a:	2301      	movne	r3, #1
 800166c:	0692      	lsls	r2, r2, #26
 800166e:	d42b      	bmi.n	80016c8 <_printf_common+0xb0>
 8001670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001674:	4649      	mov	r1, r9
 8001676:	4638      	mov	r0, r7
 8001678:	47c0      	blx	r8
 800167a:	3001      	adds	r0, #1
 800167c:	d01e      	beq.n	80016bc <_printf_common+0xa4>
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	68e5      	ldr	r5, [r4, #12]
 8001682:	6832      	ldr	r2, [r6, #0]
 8001684:	f003 0306 	and.w	r3, r3, #6
 8001688:	2b04      	cmp	r3, #4
 800168a:	bf08      	it	eq
 800168c:	1aad      	subeq	r5, r5, r2
 800168e:	68a3      	ldr	r3, [r4, #8]
 8001690:	6922      	ldr	r2, [r4, #16]
 8001692:	bf0c      	ite	eq
 8001694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001698:	2500      	movne	r5, #0
 800169a:	4293      	cmp	r3, r2
 800169c:	bfc4      	itt	gt
 800169e:	1a9b      	subgt	r3, r3, r2
 80016a0:	18ed      	addgt	r5, r5, r3
 80016a2:	2600      	movs	r6, #0
 80016a4:	341a      	adds	r4, #26
 80016a6:	42b5      	cmp	r5, r6
 80016a8:	d11a      	bne.n	80016e0 <_printf_common+0xc8>
 80016aa:	2000      	movs	r0, #0
 80016ac:	e008      	b.n	80016c0 <_printf_common+0xa8>
 80016ae:	2301      	movs	r3, #1
 80016b0:	4652      	mov	r2, sl
 80016b2:	4649      	mov	r1, r9
 80016b4:	4638      	mov	r0, r7
 80016b6:	47c0      	blx	r8
 80016b8:	3001      	adds	r0, #1
 80016ba:	d103      	bne.n	80016c4 <_printf_common+0xac>
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016c4:	3501      	adds	r5, #1
 80016c6:	e7c6      	b.n	8001656 <_printf_common+0x3e>
 80016c8:	18e1      	adds	r1, r4, r3
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	2030      	movs	r0, #48	; 0x30
 80016ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016d2:	4422      	add	r2, r4
 80016d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016dc:	3302      	adds	r3, #2
 80016de:	e7c7      	b.n	8001670 <_printf_common+0x58>
 80016e0:	2301      	movs	r3, #1
 80016e2:	4622      	mov	r2, r4
 80016e4:	4649      	mov	r1, r9
 80016e6:	4638      	mov	r0, r7
 80016e8:	47c0      	blx	r8
 80016ea:	3001      	adds	r0, #1
 80016ec:	d0e6      	beq.n	80016bc <_printf_common+0xa4>
 80016ee:	3601      	adds	r6, #1
 80016f0:	e7d9      	b.n	80016a6 <_printf_common+0x8e>
	...

080016f4 <_printf_i>:
 80016f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016f8:	7e0f      	ldrb	r7, [r1, #24]
 80016fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80016fc:	2f78      	cmp	r7, #120	; 0x78
 80016fe:	4691      	mov	r9, r2
 8001700:	4680      	mov	r8, r0
 8001702:	460c      	mov	r4, r1
 8001704:	469a      	mov	sl, r3
 8001706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800170a:	d807      	bhi.n	800171c <_printf_i+0x28>
 800170c:	2f62      	cmp	r7, #98	; 0x62
 800170e:	d80a      	bhi.n	8001726 <_printf_i+0x32>
 8001710:	2f00      	cmp	r7, #0
 8001712:	f000 80d8 	beq.w	80018c6 <_printf_i+0x1d2>
 8001716:	2f58      	cmp	r7, #88	; 0x58
 8001718:	f000 80a3 	beq.w	8001862 <_printf_i+0x16e>
 800171c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001724:	e03a      	b.n	800179c <_printf_i+0xa8>
 8001726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800172a:	2b15      	cmp	r3, #21
 800172c:	d8f6      	bhi.n	800171c <_printf_i+0x28>
 800172e:	a101      	add	r1, pc, #4	; (adr r1, 8001734 <_printf_i+0x40>)
 8001730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001734:	0800178d 	.word	0x0800178d
 8001738:	080017a1 	.word	0x080017a1
 800173c:	0800171d 	.word	0x0800171d
 8001740:	0800171d 	.word	0x0800171d
 8001744:	0800171d 	.word	0x0800171d
 8001748:	0800171d 	.word	0x0800171d
 800174c:	080017a1 	.word	0x080017a1
 8001750:	0800171d 	.word	0x0800171d
 8001754:	0800171d 	.word	0x0800171d
 8001758:	0800171d 	.word	0x0800171d
 800175c:	0800171d 	.word	0x0800171d
 8001760:	080018ad 	.word	0x080018ad
 8001764:	080017d1 	.word	0x080017d1
 8001768:	0800188f 	.word	0x0800188f
 800176c:	0800171d 	.word	0x0800171d
 8001770:	0800171d 	.word	0x0800171d
 8001774:	080018cf 	.word	0x080018cf
 8001778:	0800171d 	.word	0x0800171d
 800177c:	080017d1 	.word	0x080017d1
 8001780:	0800171d 	.word	0x0800171d
 8001784:	0800171d 	.word	0x0800171d
 8001788:	08001897 	.word	0x08001897
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	1d1a      	adds	r2, r3, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	602a      	str	r2, [r5, #0]
 8001794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800179c:	2301      	movs	r3, #1
 800179e:	e0a3      	b.n	80018e8 <_printf_i+0x1f4>
 80017a0:	6820      	ldr	r0, [r4, #0]
 80017a2:	6829      	ldr	r1, [r5, #0]
 80017a4:	0606      	lsls	r6, r0, #24
 80017a6:	f101 0304 	add.w	r3, r1, #4
 80017aa:	d50a      	bpl.n	80017c2 <_printf_i+0xce>
 80017ac:	680e      	ldr	r6, [r1, #0]
 80017ae:	602b      	str	r3, [r5, #0]
 80017b0:	2e00      	cmp	r6, #0
 80017b2:	da03      	bge.n	80017bc <_printf_i+0xc8>
 80017b4:	232d      	movs	r3, #45	; 0x2d
 80017b6:	4276      	negs	r6, r6
 80017b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017bc:	485e      	ldr	r0, [pc, #376]	; (8001938 <_printf_i+0x244>)
 80017be:	230a      	movs	r3, #10
 80017c0:	e019      	b.n	80017f6 <_printf_i+0x102>
 80017c2:	680e      	ldr	r6, [r1, #0]
 80017c4:	602b      	str	r3, [r5, #0]
 80017c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80017ca:	bf18      	it	ne
 80017cc:	b236      	sxthne	r6, r6
 80017ce:	e7ef      	b.n	80017b0 <_printf_i+0xbc>
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	6820      	ldr	r0, [r4, #0]
 80017d4:	1d19      	adds	r1, r3, #4
 80017d6:	6029      	str	r1, [r5, #0]
 80017d8:	0601      	lsls	r1, r0, #24
 80017da:	d501      	bpl.n	80017e0 <_printf_i+0xec>
 80017dc:	681e      	ldr	r6, [r3, #0]
 80017de:	e002      	b.n	80017e6 <_printf_i+0xf2>
 80017e0:	0646      	lsls	r6, r0, #25
 80017e2:	d5fb      	bpl.n	80017dc <_printf_i+0xe8>
 80017e4:	881e      	ldrh	r6, [r3, #0]
 80017e6:	4854      	ldr	r0, [pc, #336]	; (8001938 <_printf_i+0x244>)
 80017e8:	2f6f      	cmp	r7, #111	; 0x6f
 80017ea:	bf0c      	ite	eq
 80017ec:	2308      	moveq	r3, #8
 80017ee:	230a      	movne	r3, #10
 80017f0:	2100      	movs	r1, #0
 80017f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017f6:	6865      	ldr	r5, [r4, #4]
 80017f8:	60a5      	str	r5, [r4, #8]
 80017fa:	2d00      	cmp	r5, #0
 80017fc:	bfa2      	ittt	ge
 80017fe:	6821      	ldrge	r1, [r4, #0]
 8001800:	f021 0104 	bicge.w	r1, r1, #4
 8001804:	6021      	strge	r1, [r4, #0]
 8001806:	b90e      	cbnz	r6, 800180c <_printf_i+0x118>
 8001808:	2d00      	cmp	r5, #0
 800180a:	d04d      	beq.n	80018a8 <_printf_i+0x1b4>
 800180c:	4615      	mov	r5, r2
 800180e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001812:	fb03 6711 	mls	r7, r3, r1, r6
 8001816:	5dc7      	ldrb	r7, [r0, r7]
 8001818:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800181c:	4637      	mov	r7, r6
 800181e:	42bb      	cmp	r3, r7
 8001820:	460e      	mov	r6, r1
 8001822:	d9f4      	bls.n	800180e <_printf_i+0x11a>
 8001824:	2b08      	cmp	r3, #8
 8001826:	d10b      	bne.n	8001840 <_printf_i+0x14c>
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	07de      	lsls	r6, r3, #31
 800182c:	d508      	bpl.n	8001840 <_printf_i+0x14c>
 800182e:	6923      	ldr	r3, [r4, #16]
 8001830:	6861      	ldr	r1, [r4, #4]
 8001832:	4299      	cmp	r1, r3
 8001834:	bfde      	ittt	le
 8001836:	2330      	movle	r3, #48	; 0x30
 8001838:	f805 3c01 	strble.w	r3, [r5, #-1]
 800183c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001840:	1b52      	subs	r2, r2, r5
 8001842:	6122      	str	r2, [r4, #16]
 8001844:	f8cd a000 	str.w	sl, [sp]
 8001848:	464b      	mov	r3, r9
 800184a:	aa03      	add	r2, sp, #12
 800184c:	4621      	mov	r1, r4
 800184e:	4640      	mov	r0, r8
 8001850:	f7ff fee2 	bl	8001618 <_printf_common>
 8001854:	3001      	adds	r0, #1
 8001856:	d14c      	bne.n	80018f2 <_printf_i+0x1fe>
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	b004      	add	sp, #16
 800185e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001862:	4835      	ldr	r0, [pc, #212]	; (8001938 <_printf_i+0x244>)
 8001864:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001868:	6829      	ldr	r1, [r5, #0]
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001870:	6029      	str	r1, [r5, #0]
 8001872:	061d      	lsls	r5, r3, #24
 8001874:	d514      	bpl.n	80018a0 <_printf_i+0x1ac>
 8001876:	07df      	lsls	r7, r3, #31
 8001878:	bf44      	itt	mi
 800187a:	f043 0320 	orrmi.w	r3, r3, #32
 800187e:	6023      	strmi	r3, [r4, #0]
 8001880:	b91e      	cbnz	r6, 800188a <_printf_i+0x196>
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	f023 0320 	bic.w	r3, r3, #32
 8001888:	6023      	str	r3, [r4, #0]
 800188a:	2310      	movs	r3, #16
 800188c:	e7b0      	b.n	80017f0 <_printf_i+0xfc>
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	2378      	movs	r3, #120	; 0x78
 8001898:	4828      	ldr	r0, [pc, #160]	; (800193c <_printf_i+0x248>)
 800189a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800189e:	e7e3      	b.n	8001868 <_printf_i+0x174>
 80018a0:	0659      	lsls	r1, r3, #25
 80018a2:	bf48      	it	mi
 80018a4:	b2b6      	uxthmi	r6, r6
 80018a6:	e7e6      	b.n	8001876 <_printf_i+0x182>
 80018a8:	4615      	mov	r5, r2
 80018aa:	e7bb      	b.n	8001824 <_printf_i+0x130>
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	6826      	ldr	r6, [r4, #0]
 80018b0:	6961      	ldr	r1, [r4, #20]
 80018b2:	1d18      	adds	r0, r3, #4
 80018b4:	6028      	str	r0, [r5, #0]
 80018b6:	0635      	lsls	r5, r6, #24
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	d501      	bpl.n	80018c0 <_printf_i+0x1cc>
 80018bc:	6019      	str	r1, [r3, #0]
 80018be:	e002      	b.n	80018c6 <_printf_i+0x1d2>
 80018c0:	0670      	lsls	r0, r6, #25
 80018c2:	d5fb      	bpl.n	80018bc <_printf_i+0x1c8>
 80018c4:	8019      	strh	r1, [r3, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	6123      	str	r3, [r4, #16]
 80018ca:	4615      	mov	r5, r2
 80018cc:	e7ba      	b.n	8001844 <_printf_i+0x150>
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	1d1a      	adds	r2, r3, #4
 80018d2:	602a      	str	r2, [r5, #0]
 80018d4:	681d      	ldr	r5, [r3, #0]
 80018d6:	6862      	ldr	r2, [r4, #4]
 80018d8:	2100      	movs	r1, #0
 80018da:	4628      	mov	r0, r5
 80018dc:	f7fe fc88 	bl	80001f0 <memchr>
 80018e0:	b108      	cbz	r0, 80018e6 <_printf_i+0x1f2>
 80018e2:	1b40      	subs	r0, r0, r5
 80018e4:	6060      	str	r0, [r4, #4]
 80018e6:	6863      	ldr	r3, [r4, #4]
 80018e8:	6123      	str	r3, [r4, #16]
 80018ea:	2300      	movs	r3, #0
 80018ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018f0:	e7a8      	b.n	8001844 <_printf_i+0x150>
 80018f2:	6923      	ldr	r3, [r4, #16]
 80018f4:	462a      	mov	r2, r5
 80018f6:	4649      	mov	r1, r9
 80018f8:	4640      	mov	r0, r8
 80018fa:	47d0      	blx	sl
 80018fc:	3001      	adds	r0, #1
 80018fe:	d0ab      	beq.n	8001858 <_printf_i+0x164>
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	079b      	lsls	r3, r3, #30
 8001904:	d413      	bmi.n	800192e <_printf_i+0x23a>
 8001906:	68e0      	ldr	r0, [r4, #12]
 8001908:	9b03      	ldr	r3, [sp, #12]
 800190a:	4298      	cmp	r0, r3
 800190c:	bfb8      	it	lt
 800190e:	4618      	movlt	r0, r3
 8001910:	e7a4      	b.n	800185c <_printf_i+0x168>
 8001912:	2301      	movs	r3, #1
 8001914:	4632      	mov	r2, r6
 8001916:	4649      	mov	r1, r9
 8001918:	4640      	mov	r0, r8
 800191a:	47d0      	blx	sl
 800191c:	3001      	adds	r0, #1
 800191e:	d09b      	beq.n	8001858 <_printf_i+0x164>
 8001920:	3501      	adds	r5, #1
 8001922:	68e3      	ldr	r3, [r4, #12]
 8001924:	9903      	ldr	r1, [sp, #12]
 8001926:	1a5b      	subs	r3, r3, r1
 8001928:	42ab      	cmp	r3, r5
 800192a:	dcf2      	bgt.n	8001912 <_printf_i+0x21e>
 800192c:	e7eb      	b.n	8001906 <_printf_i+0x212>
 800192e:	2500      	movs	r5, #0
 8001930:	f104 0619 	add.w	r6, r4, #25
 8001934:	e7f5      	b.n	8001922 <_printf_i+0x22e>
 8001936:	bf00      	nop
 8001938:	08002041 	.word	0x08002041
 800193c:	08002052 	.word	0x08002052

08001940 <_sbrk_r>:
 8001940:	b538      	push	{r3, r4, r5, lr}
 8001942:	4d06      	ldr	r5, [pc, #24]	; (800195c <_sbrk_r+0x1c>)
 8001944:	2300      	movs	r3, #0
 8001946:	4604      	mov	r4, r0
 8001948:	4608      	mov	r0, r1
 800194a:	602b      	str	r3, [r5, #0]
 800194c:	f000 fb16 	bl	8001f7c <_sbrk>
 8001950:	1c43      	adds	r3, r0, #1
 8001952:	d102      	bne.n	800195a <_sbrk_r+0x1a>
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	b103      	cbz	r3, 800195a <_sbrk_r+0x1a>
 8001958:	6023      	str	r3, [r4, #0]
 800195a:	bd38      	pop	{r3, r4, r5, pc}
 800195c:	200001d0 	.word	0x200001d0

08001960 <__sread>:
 8001960:	b510      	push	{r4, lr}
 8001962:	460c      	mov	r4, r1
 8001964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001968:	f000 faac 	bl	8001ec4 <_read_r>
 800196c:	2800      	cmp	r0, #0
 800196e:	bfab      	itete	ge
 8001970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001972:	89a3      	ldrhlt	r3, [r4, #12]
 8001974:	181b      	addge	r3, r3, r0
 8001976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800197a:	bfac      	ite	ge
 800197c:	6563      	strge	r3, [r4, #84]	; 0x54
 800197e:	81a3      	strhlt	r3, [r4, #12]
 8001980:	bd10      	pop	{r4, pc}

08001982 <__swrite>:
 8001982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001986:	461f      	mov	r7, r3
 8001988:	898b      	ldrh	r3, [r1, #12]
 800198a:	05db      	lsls	r3, r3, #23
 800198c:	4605      	mov	r5, r0
 800198e:	460c      	mov	r4, r1
 8001990:	4616      	mov	r6, r2
 8001992:	d505      	bpl.n	80019a0 <__swrite+0x1e>
 8001994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001998:	2302      	movs	r3, #2
 800199a:	2200      	movs	r2, #0
 800199c:	f000 f9c4 	bl	8001d28 <_lseek_r>
 80019a0:	89a3      	ldrh	r3, [r4, #12]
 80019a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019aa:	81a3      	strh	r3, [r4, #12]
 80019ac:	4632      	mov	r2, r6
 80019ae:	463b      	mov	r3, r7
 80019b0:	4628      	mov	r0, r5
 80019b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019b6:	f000 b869 	b.w	8001a8c <_write_r>

080019ba <__sseek>:
 80019ba:	b510      	push	{r4, lr}
 80019bc:	460c      	mov	r4, r1
 80019be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c2:	f000 f9b1 	bl	8001d28 <_lseek_r>
 80019c6:	1c43      	adds	r3, r0, #1
 80019c8:	89a3      	ldrh	r3, [r4, #12]
 80019ca:	bf15      	itete	ne
 80019cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80019ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80019d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80019d6:	81a3      	strheq	r3, [r4, #12]
 80019d8:	bf18      	it	ne
 80019da:	81a3      	strhne	r3, [r4, #12]
 80019dc:	bd10      	pop	{r4, pc}

080019de <__sclose>:
 80019de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e2:	f000 b8d3 	b.w	8001b8c <_close_r>
	...

080019e8 <__swbuf_r>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	460e      	mov	r6, r1
 80019ec:	4614      	mov	r4, r2
 80019ee:	4605      	mov	r5, r0
 80019f0:	b118      	cbz	r0, 80019fa <__swbuf_r+0x12>
 80019f2:	6983      	ldr	r3, [r0, #24]
 80019f4:	b90b      	cbnz	r3, 80019fa <__swbuf_r+0x12>
 80019f6:	f7ff fb83 	bl	8001100 <__sinit>
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <__swbuf_r+0x98>)
 80019fc:	429c      	cmp	r4, r3
 80019fe:	d12b      	bne.n	8001a58 <__swbuf_r+0x70>
 8001a00:	686c      	ldr	r4, [r5, #4]
 8001a02:	69a3      	ldr	r3, [r4, #24]
 8001a04:	60a3      	str	r3, [r4, #8]
 8001a06:	89a3      	ldrh	r3, [r4, #12]
 8001a08:	071a      	lsls	r2, r3, #28
 8001a0a:	d52f      	bpl.n	8001a6c <__swbuf_r+0x84>
 8001a0c:	6923      	ldr	r3, [r4, #16]
 8001a0e:	b36b      	cbz	r3, 8001a6c <__swbuf_r+0x84>
 8001a10:	6923      	ldr	r3, [r4, #16]
 8001a12:	6820      	ldr	r0, [r4, #0]
 8001a14:	1ac0      	subs	r0, r0, r3
 8001a16:	6963      	ldr	r3, [r4, #20]
 8001a18:	b2f6      	uxtb	r6, r6
 8001a1a:	4283      	cmp	r3, r0
 8001a1c:	4637      	mov	r7, r6
 8001a1e:	dc04      	bgt.n	8001a2a <__swbuf_r+0x42>
 8001a20:	4621      	mov	r1, r4
 8001a22:	4628      	mov	r0, r5
 8001a24:	f000 f944 	bl	8001cb0 <_fflush_r>
 8001a28:	bb30      	cbnz	r0, 8001a78 <__swbuf_r+0x90>
 8001a2a:	68a3      	ldr	r3, [r4, #8]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	60a3      	str	r3, [r4, #8]
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	6022      	str	r2, [r4, #0]
 8001a36:	701e      	strb	r6, [r3, #0]
 8001a38:	6963      	ldr	r3, [r4, #20]
 8001a3a:	3001      	adds	r0, #1
 8001a3c:	4283      	cmp	r3, r0
 8001a3e:	d004      	beq.n	8001a4a <__swbuf_r+0x62>
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	07db      	lsls	r3, r3, #31
 8001a44:	d506      	bpl.n	8001a54 <__swbuf_r+0x6c>
 8001a46:	2e0a      	cmp	r6, #10
 8001a48:	d104      	bne.n	8001a54 <__swbuf_r+0x6c>
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f000 f92f 	bl	8001cb0 <_fflush_r>
 8001a52:	b988      	cbnz	r0, 8001a78 <__swbuf_r+0x90>
 8001a54:	4638      	mov	r0, r7
 8001a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <__swbuf_r+0x9c>)
 8001a5a:	429c      	cmp	r4, r3
 8001a5c:	d101      	bne.n	8001a62 <__swbuf_r+0x7a>
 8001a5e:	68ac      	ldr	r4, [r5, #8]
 8001a60:	e7cf      	b.n	8001a02 <__swbuf_r+0x1a>
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <__swbuf_r+0xa0>)
 8001a64:	429c      	cmp	r4, r3
 8001a66:	bf08      	it	eq
 8001a68:	68ec      	ldreq	r4, [r5, #12]
 8001a6a:	e7ca      	b.n	8001a02 <__swbuf_r+0x1a>
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f000 f81e 	bl	8001ab0 <__swsetup_r>
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d0cb      	beq.n	8001a10 <__swbuf_r+0x28>
 8001a78:	f04f 37ff 	mov.w	r7, #4294967295
 8001a7c:	e7ea      	b.n	8001a54 <__swbuf_r+0x6c>
 8001a7e:	bf00      	nop
 8001a80:	08001ff0 	.word	0x08001ff0
 8001a84:	08002010 	.word	0x08002010
 8001a88:	08001fd0 	.word	0x08001fd0

08001a8c <_write_r>:
 8001a8c:	b538      	push	{r3, r4, r5, lr}
 8001a8e:	4d07      	ldr	r5, [pc, #28]	; (8001aac <_write_r+0x20>)
 8001a90:	4604      	mov	r4, r0
 8001a92:	4608      	mov	r0, r1
 8001a94:	4611      	mov	r1, r2
 8001a96:	2200      	movs	r2, #0
 8001a98:	602a      	str	r2, [r5, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f000 fa7c 	bl	8001f98 <_write>
 8001aa0:	1c43      	adds	r3, r0, #1
 8001aa2:	d102      	bne.n	8001aaa <_write_r+0x1e>
 8001aa4:	682b      	ldr	r3, [r5, #0]
 8001aa6:	b103      	cbz	r3, 8001aaa <_write_r+0x1e>
 8001aa8:	6023      	str	r3, [r4, #0]
 8001aaa:	bd38      	pop	{r3, r4, r5, pc}
 8001aac:	200001d0 	.word	0x200001d0

08001ab0 <__swsetup_r>:
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <__swsetup_r+0xcc>)
 8001ab2:	b570      	push	{r4, r5, r6, lr}
 8001ab4:	681d      	ldr	r5, [r3, #0]
 8001ab6:	4606      	mov	r6, r0
 8001ab8:	460c      	mov	r4, r1
 8001aba:	b125      	cbz	r5, 8001ac6 <__swsetup_r+0x16>
 8001abc:	69ab      	ldr	r3, [r5, #24]
 8001abe:	b913      	cbnz	r3, 8001ac6 <__swsetup_r+0x16>
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f7ff fb1d 	bl	8001100 <__sinit>
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <__swsetup_r+0xd0>)
 8001ac8:	429c      	cmp	r4, r3
 8001aca:	d10f      	bne.n	8001aec <__swsetup_r+0x3c>
 8001acc:	686c      	ldr	r4, [r5, #4]
 8001ace:	89a3      	ldrh	r3, [r4, #12]
 8001ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ad4:	0719      	lsls	r1, r3, #28
 8001ad6:	d42c      	bmi.n	8001b32 <__swsetup_r+0x82>
 8001ad8:	06dd      	lsls	r5, r3, #27
 8001ada:	d411      	bmi.n	8001b00 <__swsetup_r+0x50>
 8001adc:	2309      	movs	r3, #9
 8001ade:	6033      	str	r3, [r6, #0]
 8001ae0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ae4:	81a3      	strh	r3, [r4, #12]
 8001ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aea:	e03e      	b.n	8001b6a <__swsetup_r+0xba>
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <__swsetup_r+0xd4>)
 8001aee:	429c      	cmp	r4, r3
 8001af0:	d101      	bne.n	8001af6 <__swsetup_r+0x46>
 8001af2:	68ac      	ldr	r4, [r5, #8]
 8001af4:	e7eb      	b.n	8001ace <__swsetup_r+0x1e>
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <__swsetup_r+0xd8>)
 8001af8:	429c      	cmp	r4, r3
 8001afa:	bf08      	it	eq
 8001afc:	68ec      	ldreq	r4, [r5, #12]
 8001afe:	e7e6      	b.n	8001ace <__swsetup_r+0x1e>
 8001b00:	0758      	lsls	r0, r3, #29
 8001b02:	d512      	bpl.n	8001b2a <__swsetup_r+0x7a>
 8001b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b06:	b141      	cbz	r1, 8001b1a <__swsetup_r+0x6a>
 8001b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b0c:	4299      	cmp	r1, r3
 8001b0e:	d002      	beq.n	8001b16 <__swsetup_r+0x66>
 8001b10:	4630      	mov	r0, r6
 8001b12:	f000 f98d 	bl	8001e30 <_free_r>
 8001b16:	2300      	movs	r3, #0
 8001b18:	6363      	str	r3, [r4, #52]	; 0x34
 8001b1a:	89a3      	ldrh	r3, [r4, #12]
 8001b1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b20:	81a3      	strh	r3, [r4, #12]
 8001b22:	2300      	movs	r3, #0
 8001b24:	6063      	str	r3, [r4, #4]
 8001b26:	6923      	ldr	r3, [r4, #16]
 8001b28:	6023      	str	r3, [r4, #0]
 8001b2a:	89a3      	ldrh	r3, [r4, #12]
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	81a3      	strh	r3, [r4, #12]
 8001b32:	6923      	ldr	r3, [r4, #16]
 8001b34:	b94b      	cbnz	r3, 8001b4a <__swsetup_r+0x9a>
 8001b36:	89a3      	ldrh	r3, [r4, #12]
 8001b38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b40:	d003      	beq.n	8001b4a <__swsetup_r+0x9a>
 8001b42:	4621      	mov	r1, r4
 8001b44:	4630      	mov	r0, r6
 8001b46:	f000 f927 	bl	8001d98 <__smakebuf_r>
 8001b4a:	89a0      	ldrh	r0, [r4, #12]
 8001b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b50:	f010 0301 	ands.w	r3, r0, #1
 8001b54:	d00a      	beq.n	8001b6c <__swsetup_r+0xbc>
 8001b56:	2300      	movs	r3, #0
 8001b58:	60a3      	str	r3, [r4, #8]
 8001b5a:	6963      	ldr	r3, [r4, #20]
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	61a3      	str	r3, [r4, #24]
 8001b60:	6923      	ldr	r3, [r4, #16]
 8001b62:	b943      	cbnz	r3, 8001b76 <__swsetup_r+0xc6>
 8001b64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b68:	d1ba      	bne.n	8001ae0 <__swsetup_r+0x30>
 8001b6a:	bd70      	pop	{r4, r5, r6, pc}
 8001b6c:	0781      	lsls	r1, r0, #30
 8001b6e:	bf58      	it	pl
 8001b70:	6963      	ldrpl	r3, [r4, #20]
 8001b72:	60a3      	str	r3, [r4, #8]
 8001b74:	e7f4      	b.n	8001b60 <__swsetup_r+0xb0>
 8001b76:	2000      	movs	r0, #0
 8001b78:	e7f7      	b.n	8001b6a <__swsetup_r+0xba>
 8001b7a:	bf00      	nop
 8001b7c:	20000014 	.word	0x20000014
 8001b80:	08001ff0 	.word	0x08001ff0
 8001b84:	08002010 	.word	0x08002010
 8001b88:	08001fd0 	.word	0x08001fd0

08001b8c <_close_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4d06      	ldr	r5, [pc, #24]	; (8001ba8 <_close_r+0x1c>)
 8001b90:	2300      	movs	r3, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	602b      	str	r3, [r5, #0]
 8001b98:	f000 f9c8 	bl	8001f2c <_close>
 8001b9c:	1c43      	adds	r3, r0, #1
 8001b9e:	d102      	bne.n	8001ba6 <_close_r+0x1a>
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	b103      	cbz	r3, 8001ba6 <_close_r+0x1a>
 8001ba4:	6023      	str	r3, [r4, #0]
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
 8001ba8:	200001d0 	.word	0x200001d0

08001bac <__sflush_r>:
 8001bac:	898a      	ldrh	r2, [r1, #12]
 8001bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb0:	4605      	mov	r5, r0
 8001bb2:	0710      	lsls	r0, r2, #28
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	d457      	bmi.n	8001c68 <__sflush_r+0xbc>
 8001bb8:	684b      	ldr	r3, [r1, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	dc04      	bgt.n	8001bc8 <__sflush_r+0x1c>
 8001bbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dc01      	bgt.n	8001bc8 <__sflush_r+0x1c>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	d0fa      	beq.n	8001bc4 <__sflush_r+0x18>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bd4:	682f      	ldr	r7, [r5, #0]
 8001bd6:	602b      	str	r3, [r5, #0]
 8001bd8:	d032      	beq.n	8001c40 <__sflush_r+0x94>
 8001bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bdc:	89a3      	ldrh	r3, [r4, #12]
 8001bde:	075a      	lsls	r2, r3, #29
 8001be0:	d505      	bpl.n	8001bee <__sflush_r+0x42>
 8001be2:	6863      	ldr	r3, [r4, #4]
 8001be4:	1ac0      	subs	r0, r0, r3
 8001be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001be8:	b10b      	cbz	r3, 8001bee <__sflush_r+0x42>
 8001bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bec:	1ac0      	subs	r0, r0, r3
 8001bee:	2300      	movs	r3, #0
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bf4:	6a21      	ldr	r1, [r4, #32]
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	47b0      	blx	r6
 8001bfa:	1c43      	adds	r3, r0, #1
 8001bfc:	89a3      	ldrh	r3, [r4, #12]
 8001bfe:	d106      	bne.n	8001c0e <__sflush_r+0x62>
 8001c00:	6829      	ldr	r1, [r5, #0]
 8001c02:	291d      	cmp	r1, #29
 8001c04:	d82c      	bhi.n	8001c60 <__sflush_r+0xb4>
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <__sflush_r+0x100>)
 8001c08:	40ca      	lsrs	r2, r1
 8001c0a:	07d6      	lsls	r6, r2, #31
 8001c0c:	d528      	bpl.n	8001c60 <__sflush_r+0xb4>
 8001c0e:	2200      	movs	r2, #0
 8001c10:	6062      	str	r2, [r4, #4]
 8001c12:	04d9      	lsls	r1, r3, #19
 8001c14:	6922      	ldr	r2, [r4, #16]
 8001c16:	6022      	str	r2, [r4, #0]
 8001c18:	d504      	bpl.n	8001c24 <__sflush_r+0x78>
 8001c1a:	1c42      	adds	r2, r0, #1
 8001c1c:	d101      	bne.n	8001c22 <__sflush_r+0x76>
 8001c1e:	682b      	ldr	r3, [r5, #0]
 8001c20:	b903      	cbnz	r3, 8001c24 <__sflush_r+0x78>
 8001c22:	6560      	str	r0, [r4, #84]	; 0x54
 8001c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c26:	602f      	str	r7, [r5, #0]
 8001c28:	2900      	cmp	r1, #0
 8001c2a:	d0cb      	beq.n	8001bc4 <__sflush_r+0x18>
 8001c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c30:	4299      	cmp	r1, r3
 8001c32:	d002      	beq.n	8001c3a <__sflush_r+0x8e>
 8001c34:	4628      	mov	r0, r5
 8001c36:	f000 f8fb 	bl	8001e30 <_free_r>
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	6360      	str	r0, [r4, #52]	; 0x34
 8001c3e:	e7c2      	b.n	8001bc6 <__sflush_r+0x1a>
 8001c40:	6a21      	ldr	r1, [r4, #32]
 8001c42:	2301      	movs	r3, #1
 8001c44:	4628      	mov	r0, r5
 8001c46:	47b0      	blx	r6
 8001c48:	1c41      	adds	r1, r0, #1
 8001c4a:	d1c7      	bne.n	8001bdc <__sflush_r+0x30>
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0c4      	beq.n	8001bdc <__sflush_r+0x30>
 8001c52:	2b1d      	cmp	r3, #29
 8001c54:	d001      	beq.n	8001c5a <__sflush_r+0xae>
 8001c56:	2b16      	cmp	r3, #22
 8001c58:	d101      	bne.n	8001c5e <__sflush_r+0xb2>
 8001c5a:	602f      	str	r7, [r5, #0]
 8001c5c:	e7b2      	b.n	8001bc4 <__sflush_r+0x18>
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c64:	81a3      	strh	r3, [r4, #12]
 8001c66:	e7ae      	b.n	8001bc6 <__sflush_r+0x1a>
 8001c68:	690f      	ldr	r7, [r1, #16]
 8001c6a:	2f00      	cmp	r7, #0
 8001c6c:	d0aa      	beq.n	8001bc4 <__sflush_r+0x18>
 8001c6e:	0793      	lsls	r3, r2, #30
 8001c70:	680e      	ldr	r6, [r1, #0]
 8001c72:	bf08      	it	eq
 8001c74:	694b      	ldreq	r3, [r1, #20]
 8001c76:	600f      	str	r7, [r1, #0]
 8001c78:	bf18      	it	ne
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	1bf6      	subs	r6, r6, r7
 8001c7e:	608b      	str	r3, [r1, #8]
 8001c80:	2e00      	cmp	r6, #0
 8001c82:	dd9f      	ble.n	8001bc4 <__sflush_r+0x18>
 8001c84:	6a21      	ldr	r1, [r4, #32]
 8001c86:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001c8a:	4633      	mov	r3, r6
 8001c8c:	463a      	mov	r2, r7
 8001c8e:	4628      	mov	r0, r5
 8001c90:	47e0      	blx	ip
 8001c92:	2800      	cmp	r0, #0
 8001c94:	dc06      	bgt.n	8001ca4 <__sflush_r+0xf8>
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c9c:	81a3      	strh	r3, [r4, #12]
 8001c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca2:	e790      	b.n	8001bc6 <__sflush_r+0x1a>
 8001ca4:	4407      	add	r7, r0
 8001ca6:	1a36      	subs	r6, r6, r0
 8001ca8:	e7ea      	b.n	8001c80 <__sflush_r+0xd4>
 8001caa:	bf00      	nop
 8001cac:	20400001 	.word	0x20400001

08001cb0 <_fflush_r>:
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	690b      	ldr	r3, [r1, #16]
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	b913      	cbnz	r3, 8001cc0 <_fflush_r+0x10>
 8001cba:	2500      	movs	r5, #0
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	bd38      	pop	{r3, r4, r5, pc}
 8001cc0:	b118      	cbz	r0, 8001cca <_fflush_r+0x1a>
 8001cc2:	6983      	ldr	r3, [r0, #24]
 8001cc4:	b90b      	cbnz	r3, 8001cca <_fflush_r+0x1a>
 8001cc6:	f7ff fa1b 	bl	8001100 <__sinit>
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <_fflush_r+0x6c>)
 8001ccc:	429c      	cmp	r4, r3
 8001cce:	d11b      	bne.n	8001d08 <_fflush_r+0x58>
 8001cd0:	686c      	ldr	r4, [r5, #4]
 8001cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0ef      	beq.n	8001cba <_fflush_r+0xa>
 8001cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001cdc:	07d0      	lsls	r0, r2, #31
 8001cde:	d404      	bmi.n	8001cea <_fflush_r+0x3a>
 8001ce0:	0599      	lsls	r1, r3, #22
 8001ce2:	d402      	bmi.n	8001cea <_fflush_r+0x3a>
 8001ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ce6:	f7ff faa9 	bl	800123c <__retarget_lock_acquire_recursive>
 8001cea:	4628      	mov	r0, r5
 8001cec:	4621      	mov	r1, r4
 8001cee:	f7ff ff5d 	bl	8001bac <__sflush_r>
 8001cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cf4:	07da      	lsls	r2, r3, #31
 8001cf6:	4605      	mov	r5, r0
 8001cf8:	d4e0      	bmi.n	8001cbc <_fflush_r+0xc>
 8001cfa:	89a3      	ldrh	r3, [r4, #12]
 8001cfc:	059b      	lsls	r3, r3, #22
 8001cfe:	d4dd      	bmi.n	8001cbc <_fflush_r+0xc>
 8001d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d02:	f7ff fa9c 	bl	800123e <__retarget_lock_release_recursive>
 8001d06:	e7d9      	b.n	8001cbc <_fflush_r+0xc>
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <_fflush_r+0x70>)
 8001d0a:	429c      	cmp	r4, r3
 8001d0c:	d101      	bne.n	8001d12 <_fflush_r+0x62>
 8001d0e:	68ac      	ldr	r4, [r5, #8]
 8001d10:	e7df      	b.n	8001cd2 <_fflush_r+0x22>
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <_fflush_r+0x74>)
 8001d14:	429c      	cmp	r4, r3
 8001d16:	bf08      	it	eq
 8001d18:	68ec      	ldreq	r4, [r5, #12]
 8001d1a:	e7da      	b.n	8001cd2 <_fflush_r+0x22>
 8001d1c:	08001ff0 	.word	0x08001ff0
 8001d20:	08002010 	.word	0x08002010
 8001d24:	08001fd0 	.word	0x08001fd0

08001d28 <_lseek_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	4d07      	ldr	r5, [pc, #28]	; (8001d48 <_lseek_r+0x20>)
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	4608      	mov	r0, r1
 8001d30:	4611      	mov	r1, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	602a      	str	r2, [r5, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	f000 f910 	bl	8001f5c <_lseek>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d102      	bne.n	8001d46 <_lseek_r+0x1e>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	b103      	cbz	r3, 8001d46 <_lseek_r+0x1e>
 8001d44:	6023      	str	r3, [r4, #0]
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	200001d0 	.word	0x200001d0

08001d4c <__swhatbuf_r>:
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	460e      	mov	r6, r1
 8001d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d54:	2900      	cmp	r1, #0
 8001d56:	b096      	sub	sp, #88	; 0x58
 8001d58:	4614      	mov	r4, r2
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	da08      	bge.n	8001d70 <__swhatbuf_r+0x24>
 8001d5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	602a      	str	r2, [r5, #0]
 8001d66:	061a      	lsls	r2, r3, #24
 8001d68:	d410      	bmi.n	8001d8c <__swhatbuf_r+0x40>
 8001d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6e:	e00e      	b.n	8001d8e <__swhatbuf_r+0x42>
 8001d70:	466a      	mov	r2, sp
 8001d72:	f000 f8b9 	bl	8001ee8 <_fstat_r>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	dbf1      	blt.n	8001d5e <__swhatbuf_r+0x12>
 8001d7a:	9a01      	ldr	r2, [sp, #4]
 8001d7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d84:	425a      	negs	r2, r3
 8001d86:	415a      	adcs	r2, r3
 8001d88:	602a      	str	r2, [r5, #0]
 8001d8a:	e7ee      	b.n	8001d6a <__swhatbuf_r+0x1e>
 8001d8c:	2340      	movs	r3, #64	; 0x40
 8001d8e:	2000      	movs	r0, #0
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	b016      	add	sp, #88	; 0x58
 8001d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d98 <__smakebuf_r>:
 8001d98:	898b      	ldrh	r3, [r1, #12]
 8001d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d9c:	079d      	lsls	r5, r3, #30
 8001d9e:	4606      	mov	r6, r0
 8001da0:	460c      	mov	r4, r1
 8001da2:	d507      	bpl.n	8001db4 <__smakebuf_r+0x1c>
 8001da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001da8:	6023      	str	r3, [r4, #0]
 8001daa:	6123      	str	r3, [r4, #16]
 8001dac:	2301      	movs	r3, #1
 8001dae:	6163      	str	r3, [r4, #20]
 8001db0:	b002      	add	sp, #8
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	ab01      	add	r3, sp, #4
 8001db6:	466a      	mov	r2, sp
 8001db8:	f7ff ffc8 	bl	8001d4c <__swhatbuf_r>
 8001dbc:	9900      	ldr	r1, [sp, #0]
 8001dbe:	4605      	mov	r5, r0
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f7ff fa5d 	bl	8001280 <_malloc_r>
 8001dc6:	b948      	cbnz	r0, 8001ddc <__smakebuf_r+0x44>
 8001dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dcc:	059a      	lsls	r2, r3, #22
 8001dce:	d4ef      	bmi.n	8001db0 <__smakebuf_r+0x18>
 8001dd0:	f023 0303 	bic.w	r3, r3, #3
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	81a3      	strh	r3, [r4, #12]
 8001dda:	e7e3      	b.n	8001da4 <__smakebuf_r+0xc>
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <__smakebuf_r+0x7c>)
 8001dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8001de0:	89a3      	ldrh	r3, [r4, #12]
 8001de2:	6020      	str	r0, [r4, #0]
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	81a3      	strh	r3, [r4, #12]
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	6163      	str	r3, [r4, #20]
 8001dee:	9b01      	ldr	r3, [sp, #4]
 8001df0:	6120      	str	r0, [r4, #16]
 8001df2:	b15b      	cbz	r3, 8001e0c <__smakebuf_r+0x74>
 8001df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f000 f887 	bl	8001f0c <_isatty_r>
 8001dfe:	b128      	cbz	r0, 8001e0c <__smakebuf_r+0x74>
 8001e00:	89a3      	ldrh	r3, [r4, #12]
 8001e02:	f023 0303 	bic.w	r3, r3, #3
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	81a3      	strh	r3, [r4, #12]
 8001e0c:	89a0      	ldrh	r0, [r4, #12]
 8001e0e:	4305      	orrs	r5, r0
 8001e10:	81a5      	strh	r5, [r4, #12]
 8001e12:	e7cd      	b.n	8001db0 <__smakebuf_r+0x18>
 8001e14:	08001099 	.word	0x08001099

08001e18 <__malloc_lock>:
 8001e18:	4801      	ldr	r0, [pc, #4]	; (8001e20 <__malloc_lock+0x8>)
 8001e1a:	f7ff ba0f 	b.w	800123c <__retarget_lock_acquire_recursive>
 8001e1e:	bf00      	nop
 8001e20:	200001c4 	.word	0x200001c4

08001e24 <__malloc_unlock>:
 8001e24:	4801      	ldr	r0, [pc, #4]	; (8001e2c <__malloc_unlock+0x8>)
 8001e26:	f7ff ba0a 	b.w	800123e <__retarget_lock_release_recursive>
 8001e2a:	bf00      	nop
 8001e2c:	200001c4 	.word	0x200001c4

08001e30 <_free_r>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4605      	mov	r5, r0
 8001e34:	2900      	cmp	r1, #0
 8001e36:	d041      	beq.n	8001ebc <_free_r+0x8c>
 8001e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e3c:	1f0c      	subs	r4, r1, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bfb8      	it	lt
 8001e42:	18e4      	addlt	r4, r4, r3
 8001e44:	f7ff ffe8 	bl	8001e18 <__malloc_lock>
 8001e48:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <_free_r+0x90>)
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	b933      	cbnz	r3, 8001e5c <_free_r+0x2c>
 8001e4e:	6063      	str	r3, [r4, #4]
 8001e50:	6014      	str	r4, [r2, #0]
 8001e52:	4628      	mov	r0, r5
 8001e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e58:	f7ff bfe4 	b.w	8001e24 <__malloc_unlock>
 8001e5c:	42a3      	cmp	r3, r4
 8001e5e:	d908      	bls.n	8001e72 <_free_r+0x42>
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	1821      	adds	r1, r4, r0
 8001e64:	428b      	cmp	r3, r1
 8001e66:	bf01      	itttt	eq
 8001e68:	6819      	ldreq	r1, [r3, #0]
 8001e6a:	685b      	ldreq	r3, [r3, #4]
 8001e6c:	1809      	addeq	r1, r1, r0
 8001e6e:	6021      	streq	r1, [r4, #0]
 8001e70:	e7ed      	b.n	8001e4e <_free_r+0x1e>
 8001e72:	461a      	mov	r2, r3
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	b10b      	cbz	r3, 8001e7c <_free_r+0x4c>
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	d9fa      	bls.n	8001e72 <_free_r+0x42>
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	1850      	adds	r0, r2, r1
 8001e80:	42a0      	cmp	r0, r4
 8001e82:	d10b      	bne.n	8001e9c <_free_r+0x6c>
 8001e84:	6820      	ldr	r0, [r4, #0]
 8001e86:	4401      	add	r1, r0
 8001e88:	1850      	adds	r0, r2, r1
 8001e8a:	4283      	cmp	r3, r0
 8001e8c:	6011      	str	r1, [r2, #0]
 8001e8e:	d1e0      	bne.n	8001e52 <_free_r+0x22>
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	6053      	str	r3, [r2, #4]
 8001e96:	4401      	add	r1, r0
 8001e98:	6011      	str	r1, [r2, #0]
 8001e9a:	e7da      	b.n	8001e52 <_free_r+0x22>
 8001e9c:	d902      	bls.n	8001ea4 <_free_r+0x74>
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	602b      	str	r3, [r5, #0]
 8001ea2:	e7d6      	b.n	8001e52 <_free_r+0x22>
 8001ea4:	6820      	ldr	r0, [r4, #0]
 8001ea6:	1821      	adds	r1, r4, r0
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	bf04      	itt	eq
 8001eac:	6819      	ldreq	r1, [r3, #0]
 8001eae:	685b      	ldreq	r3, [r3, #4]
 8001eb0:	6063      	str	r3, [r4, #4]
 8001eb2:	bf04      	itt	eq
 8001eb4:	1809      	addeq	r1, r1, r0
 8001eb6:	6021      	streq	r1, [r4, #0]
 8001eb8:	6054      	str	r4, [r2, #4]
 8001eba:	e7ca      	b.n	8001e52 <_free_r+0x22>
 8001ebc:	bd38      	pop	{r3, r4, r5, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200001c8 	.word	0x200001c8

08001ec4 <_read_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4d07      	ldr	r5, [pc, #28]	; (8001ee4 <_read_r+0x20>)
 8001ec8:	4604      	mov	r4, r0
 8001eca:	4608      	mov	r0, r1
 8001ecc:	4611      	mov	r1, r2
 8001ece:	2200      	movs	r2, #0
 8001ed0:	602a      	str	r2, [r5, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f000 f84a 	bl	8001f6c <_read>
 8001ed8:	1c43      	adds	r3, r0, #1
 8001eda:	d102      	bne.n	8001ee2 <_read_r+0x1e>
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	b103      	cbz	r3, 8001ee2 <_read_r+0x1e>
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	200001d0 	.word	0x200001d0

08001ee8 <_fstat_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4d07      	ldr	r5, [pc, #28]	; (8001f08 <_fstat_r+0x20>)
 8001eec:	2300      	movs	r3, #0
 8001eee:	4604      	mov	r4, r0
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	602b      	str	r3, [r5, #0]
 8001ef6:	f000 f821 	bl	8001f3c <_fstat>
 8001efa:	1c43      	adds	r3, r0, #1
 8001efc:	d102      	bne.n	8001f04 <_fstat_r+0x1c>
 8001efe:	682b      	ldr	r3, [r5, #0]
 8001f00:	b103      	cbz	r3, 8001f04 <_fstat_r+0x1c>
 8001f02:	6023      	str	r3, [r4, #0]
 8001f04:	bd38      	pop	{r3, r4, r5, pc}
 8001f06:	bf00      	nop
 8001f08:	200001d0 	.word	0x200001d0

08001f0c <_isatty_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4d06      	ldr	r5, [pc, #24]	; (8001f28 <_isatty_r+0x1c>)
 8001f10:	2300      	movs	r3, #0
 8001f12:	4604      	mov	r4, r0
 8001f14:	4608      	mov	r0, r1
 8001f16:	602b      	str	r3, [r5, #0]
 8001f18:	f000 f818 	bl	8001f4c <_isatty>
 8001f1c:	1c43      	adds	r3, r0, #1
 8001f1e:	d102      	bne.n	8001f26 <_isatty_r+0x1a>
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	b103      	cbz	r3, 8001f26 <_isatty_r+0x1a>
 8001f24:	6023      	str	r3, [r4, #0]
 8001f26:	bd38      	pop	{r3, r4, r5, pc}
 8001f28:	200001d0 	.word	0x200001d0

08001f2c <_close>:
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <_close+0xc>)
 8001f2e:	2258      	movs	r2, #88	; 0x58
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f04f 30ff 	mov.w	r0, #4294967295
 8001f36:	4770      	bx	lr
 8001f38:	200001d0 	.word	0x200001d0

08001f3c <_fstat>:
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <_fstat+0xc>)
 8001f3e:	2258      	movs	r2, #88	; 0x58
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f04f 30ff 	mov.w	r0, #4294967295
 8001f46:	4770      	bx	lr
 8001f48:	200001d0 	.word	0x200001d0

08001f4c <_isatty>:
 8001f4c:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <_isatty+0xc>)
 8001f4e:	2258      	movs	r2, #88	; 0x58
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	2000      	movs	r0, #0
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	200001d0 	.word	0x200001d0

08001f5c <_lseek>:
 8001f5c:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <_lseek+0xc>)
 8001f5e:	2258      	movs	r2, #88	; 0x58
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	f04f 30ff 	mov.w	r0, #4294967295
 8001f66:	4770      	bx	lr
 8001f68:	200001d0 	.word	0x200001d0

08001f6c <_read>:
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <_read+0xc>)
 8001f6e:	2258      	movs	r2, #88	; 0x58
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	f04f 30ff 	mov.w	r0, #4294967295
 8001f76:	4770      	bx	lr
 8001f78:	200001d0 	.word	0x200001d0

08001f7c <_sbrk>:
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <_sbrk+0x14>)
 8001f7e:	6811      	ldr	r1, [r2, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	b909      	cbnz	r1, 8001f88 <_sbrk+0xc>
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <_sbrk+0x18>)
 8001f86:	6011      	str	r1, [r2, #0]
 8001f88:	6810      	ldr	r0, [r2, #0]
 8001f8a:	4403      	add	r3, r0
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4770      	bx	lr
 8001f90:	200001d4 	.word	0x200001d4
 8001f94:	200001d8 	.word	0x200001d8

08001f98 <_write>:
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <_write+0xc>)
 8001f9a:	2258      	movs	r2, #88	; 0x58
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	4770      	bx	lr
 8001fa4:	200001d0 	.word	0x200001d0

08001fa8 <_init>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr

08001fb4 <_fini>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr
