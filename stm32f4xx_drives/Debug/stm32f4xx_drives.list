
stm32f4xx_drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b70  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d18  08000d18  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d18  08000d18  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000d18  08000d18  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d18  08000d18  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d18  08000d18  00010d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          00000030  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  00020034  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000130f  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000048f  00000000  00000000  0002136d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00021800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000118  00000000  00000000  00021950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a0f  00000000  00000000  00021a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001878  00000000  00000000  00024477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a2b1  00000000  00000000  00025cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002ffa0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000488  00000000  00000000  0002fff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000034 	.word	0x20000034
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d00 	.word	0x08000d00

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000038 	.word	0x20000038
 80001e4:	08000d00 	.word	0x08000d00

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <I2C1_GPIOInits>:
 * PB9 --> SDA
 *
 */

void I2C1_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <I2C1_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000206:	2301      	movs	r3, #1
 8000208:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800020a:	2301      	movs	r3, #1
 800020c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800020e:	2304      	movs	r3, #4
 8000210:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000216:	2306      	movs	r3, #6
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f989 	bl	8000534 <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000222:	2309      	movs	r3, #9
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f983 	bl	8000534 <GPIO_Init>

}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <I2C1_Inits+0x2c>)
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <I2C1_Inits+0x30>)
 8000244:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <I2C1_Inits+0x2c>)
 8000248:	2201      	movs	r2, #1
 800024a:	60da      	str	r2, [r3, #12]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <I2C1_Inits+0x2c>)
 800024e:	2261      	movs	r2, #97	; 0x61
 8000250:	609a      	str	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <I2C1_Inits+0x2c>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <I2C1_Inits+0x2c>)
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <I2C1_Inits+0x34>)
 800025c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <I2C1_Inits+0x2c>)
 8000260:	f000 fbfe 	bl	8000a60 <I2C_Init>

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000050 	.word	0x20000050
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOB;
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <GPIO_ButtonInit+0x54>)
 800027c:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800027e:	2300      	movs	r3, #0
 8000280:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000282:	2300      	movs	r3, #0
 8000284:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800028a:	2300      	movs	r3, #0
 800028c:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 800028e:	f107 030c 	add.w	r3, r7, #12
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f94e 	bl	8000534 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <GPIO_ButtonInit+0x58>)
 800029a:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800029c:	230c      	movs	r3, #12
 800029e:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002a0:	2301      	movs	r3, #1
 80002a2:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a4:	2302      	movs	r3, #2
 80002a6:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002a8:	2301      	movs	r3, #1
 80002aa:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ac:	2300      	movs	r3, #0
 80002ae:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <GPIO_ButtonInit+0x58>)
 80002b4:	f000 f856 	bl	8000364 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f93a 	bl	8000534 <GPIO_Init>

}
 80002c0:	bf00      	nop
 80002c2:	3718      	adds	r7, #24
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40020400 	.word	0x40020400
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <main>:

int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 80002d4:	f7ff ffce 	bl	8000274 <GPIO_ButtonInit>
	//i2c pin inits
	I2C1_GPIOInits();
 80002d8:	f7ff ff8e 	bl	80001f8 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002dc:	f7ff ffae 	bl	800023c <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	4808      	ldr	r0, [pc, #32]	; (8000304 <main+0x34>)
 80002e4:	f000 fb0a 	bl	80008fc <I2C_PeripheralControl>

	//send some data to the slave
	I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data), SLAVE_ADDR);
 80002e8:	4807      	ldr	r0, [pc, #28]	; (8000308 <main+0x38>)
 80002ea:	f7ff ff7d 	bl	80001e8 <strlen>
 80002ee:	4603      	mov	r3, r0
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	2368      	movs	r3, #104	; 0x68
 80002f4:	4904      	ldr	r1, [pc, #16]	; (8000308 <main+0x38>)
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <main+0x3c>)
 80002f8:	f000 fc77 	bl	8000bea <I2C_MasterSendData>
 80002fc:	2300      	movs	r3, #0
}
 80002fe:	4618      	mov	r0, r3
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40005400 	.word	0x40005400
 8000308:	20000000 	.word	0x20000000
 800030c:	20000050 	.word	0x20000050

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 fcbb 	bl	8000cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffc5 	bl	80002d0 <main>

08000346 <LoopForever>:

LoopForever:
    b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000354:	08000d20 	.word	0x08000d20
  ldr r2, =_sbss
 8000358:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800035c:	20000064 	.word	0x20000064

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <GPIO_PeriClockControl>:
 * @Note			-  None
 *
 *
 *************************************** */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d162      	bne.n	800043c <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a64      	ldr	r2, [pc, #400]	; (800050c <GPIO_PeriClockControl+0x1a8>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800037e:	4b64      	ldr	r3, [pc, #400]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a63      	ldr	r2, [pc, #396]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 800038a:	e0b9      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a61      	ldr	r2, [pc, #388]	; (8000514 <GPIO_PeriClockControl+0x1b0>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000394:	4b5e      	ldr	r3, [pc, #376]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a5d      	ldr	r2, [pc, #372]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e0ae      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a5c      	ldr	r2, [pc, #368]	; (8000518 <GPIO_PeriClockControl+0x1b4>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003aa:	4b59      	ldr	r3, [pc, #356]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a58      	ldr	r2, [pc, #352]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e0a3      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a58      	ldr	r2, [pc, #352]	; (800051c <GPIO_PeriClockControl+0x1b8>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003c0:	4b53      	ldr	r3, [pc, #332]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a52      	ldr	r2, [pc, #328]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e098      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a53      	ldr	r2, [pc, #332]	; (8000520 <GPIO_PeriClockControl+0x1bc>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003d6:	4b4e      	ldr	r3, [pc, #312]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a4d      	ldr	r2, [pc, #308]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e08d      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a4f      	ldr	r2, [pc, #316]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003ec:	4b48      	ldr	r3, [pc, #288]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a47      	ldr	r2, [pc, #284]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e082      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a4a      	ldr	r2, [pc, #296]	; (8000528 <GPIO_PeriClockControl+0x1c4>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000402:	4b43      	ldr	r3, [pc, #268]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a42      	ldr	r2, [pc, #264]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e077      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a46      	ldr	r2, [pc, #280]	; (800052c <GPIO_PeriClockControl+0x1c8>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000418:	4b3d      	ldr	r3, [pc, #244]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a3c      	ldr	r2, [pc, #240]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 800041e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	e06c      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a41      	ldr	r2, [pc, #260]	; (8000530 <GPIO_PeriClockControl+0x1cc>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d168      	bne.n	8000500 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a37      	ldr	r2, [pc, #220]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000438:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043a:	e061      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a33      	ldr	r2, [pc, #204]	; (800050c <GPIO_PeriClockControl+0x1a8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000444:	4b32      	ldr	r3, [pc, #200]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a31      	ldr	r2, [pc, #196]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 800044a:	f023 0301 	bic.w	r3, r3, #1
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000450:	e056      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <GPIO_PeriClockControl+0x1b0>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a2c      	ldr	r2, [pc, #176]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000460:	f023 0302 	bic.w	r3, r3, #2
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000466:	e04b      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a2b      	ldr	r2, [pc, #172]	; (8000518 <GPIO_PeriClockControl+0x1b4>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000470:	4b27      	ldr	r3, [pc, #156]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a26      	ldr	r2, [pc, #152]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000476:	f023 0304 	bic.w	r3, r3, #4
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e040      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a26      	ldr	r2, [pc, #152]	; (800051c <GPIO_PeriClockControl+0x1b8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a21      	ldr	r2, [pc, #132]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 800048c:	f023 0308 	bic.w	r3, r3, #8
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	e035      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a22      	ldr	r2, [pc, #136]	; (8000520 <GPIO_PeriClockControl+0x1bc>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004a2:	f023 0310 	bic.w	r3, r3, #16
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	e02a      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a16      	ldr	r2, [pc, #88]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004b8:	f023 0320 	bic.w	r3, r3, #32
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e01f      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a19      	ldr	r2, [pc, #100]	; (8000528 <GPIO_PeriClockControl+0x1c4>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a10      	ldr	r2, [pc, #64]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	e014      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a14      	ldr	r2, [pc, #80]	; (800052c <GPIO_PeriClockControl+0x1c8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ea:	e009      	b.n	8000500 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <GPIO_PeriClockControl+0x1cc>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d105      	bne.n	8000500 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <GPIO_PeriClockControl+0x1ac>)
 80004fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40020000 	.word	0x40020000
 8000510:	40023800 	.word	0x40023800
 8000514:	40020400 	.word	0x40020400
 8000518:	40020800 	.word	0x40020800
 800051c:	40020c00 	.word	0x40020c00
 8000520:	40021000 	.word	0x40021000
 8000524:	40021400 	.word	0x40021400
 8000528:	40021800 	.word	0x40021800
 800052c:	40021c00 	.word	0x40021c00
 8000530:	40022000 	.word	0x40022000

08000534 <GPIO_Init>:

/*
 * 	Init and Deint of the peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ff0c 	bl	8000364 <GPIO_PeriClockControl>

	// Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	2b03      	cmp	r3, #3
 8000552:	d81f      	bhi.n	8000594 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000564:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // cleraing off the pin number before using it
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	4619      	mov	r1, r3
 8000572:	2303      	movs	r3, #3
 8000574:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 8000576:	43db      	mvns	r3, r3
 8000578:	4619      	mov	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	400a      	ands	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6819      	ldr	r1, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	430a      	orrs	r2, r1
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	e0ca      	b.n	800072a <GPIO_Init+0x1f6>

	}
	else
	{
		// this is the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	795b      	ldrb	r3, [r3, #5]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d117      	bne.n	80005cc <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059c:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <GPIO_Init+0x194>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a46      	ldr	r2, [pc, #280]	; (80006c8 <GPIO_Init+0x194>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b2:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <GPIO_Init+0x194>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a40      	ldr	r2, [pc, #256]	; (80006c8 <GPIO_Init+0x194>)
 80005c6:	400b      	ands	r3, r1
 80005c8:	6093      	str	r3, [r2, #8]
 80005ca:	e035      	b.n	8000638 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	d117      	bne.n	8000604 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d4:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <GPIO_Init+0x194>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <GPIO_Init+0x194>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ea:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <GPIO_Init+0x194>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	43d2      	mvns	r2, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <GPIO_Init+0x194>)
 80005fe:	400b      	ands	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
 8000602:	e019      	b.n	8000638 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b06      	cmp	r3, #6
 800060a:	d115      	bne.n	8000638 <GPIO_Init+0x104>
		{
			//1. Configure bothh RTSR and FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <GPIO_Init+0x194>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	4611      	mov	r1, r2
 800061c:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <GPIO_Init+0x194>)
 800061e:	430b      	orrs	r3, r1
 8000620:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <GPIO_Init+0x194>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	7912      	ldrb	r2, [r2, #4]
 800062a:	4611      	mov	r1, r2
 800062c:	2201      	movs	r2, #1
 800062e:	408a      	lsls	r2, r1
 8000630:	4611      	mov	r1, r2
 8000632:	4a25      	ldr	r2, [pc, #148]	; (80006c8 <GPIO_Init+0x194>)
 8000634:	430b      	orrs	r3, r1
 8000636:	6093      	str	r3, [r2, #8]

		}
		//2. COnfigure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	f003 0303 	and.w	r3, r3, #3
 8000648:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIOA_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <GPIO_Init+0x198>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d04d      	beq.n	80006f0 <GPIO_Init+0x1bc>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <GPIO_Init+0x19c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d032      	beq.n	80006c4 <GPIO_Init+0x190>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <GPIO_Init+0x1a0>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d02b      	beq.n	80006c0 <GPIO_Init+0x18c>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <GPIO_Init+0x1a4>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d024      	beq.n	80006bc <GPIO_Init+0x188>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a19      	ldr	r2, [pc, #100]	; (80006dc <GPIO_Init+0x1a8>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d01d      	beq.n	80006b8 <GPIO_Init+0x184>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <GPIO_Init+0x1ac>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d016      	beq.n	80006b4 <GPIO_Init+0x180>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <GPIO_Init+0x1b0>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d00f      	beq.n	80006b0 <GPIO_Init+0x17c>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <GPIO_Init+0x1b4>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d008      	beq.n	80006ac <GPIO_Init+0x178>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <GPIO_Init+0x1b8>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d101      	bne.n	80006a8 <GPIO_Init+0x174>
 80006a4:	2308      	movs	r3, #8
 80006a6:	e024      	b.n	80006f2 <GPIO_Init+0x1be>
 80006a8:	2300      	movs	r3, #0
 80006aa:	e022      	b.n	80006f2 <GPIO_Init+0x1be>
 80006ac:	2307      	movs	r3, #7
 80006ae:	e020      	b.n	80006f2 <GPIO_Init+0x1be>
 80006b0:	2306      	movs	r3, #6
 80006b2:	e01e      	b.n	80006f2 <GPIO_Init+0x1be>
 80006b4:	2305      	movs	r3, #5
 80006b6:	e01c      	b.n	80006f2 <GPIO_Init+0x1be>
 80006b8:	2304      	movs	r3, #4
 80006ba:	e01a      	b.n	80006f2 <GPIO_Init+0x1be>
 80006bc:	2303      	movs	r3, #3
 80006be:	e018      	b.n	80006f2 <GPIO_Init+0x1be>
 80006c0:	2302      	movs	r3, #2
 80006c2:	e016      	b.n	80006f2 <GPIO_Init+0x1be>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e014      	b.n	80006f2 <GPIO_Init+0x1be>
 80006c8:	40013c00 	.word	0x40013c00
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40021400 	.word	0x40021400
 80006e4:	40021800 	.word	0x40021800
 80006e8:	40021c00 	.word	0x40021c00
 80006ec:	40022000 	.word	0x40022000
 80006f0:	2300      	movs	r3, #0
 80006f2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006f4:	4b5d      	ldr	r3, [pc, #372]	; (800086c <GPIO_Init+0x338>)
 80006f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f8:	4a5c      	ldr	r2, [pc, #368]	; (800086c <GPIO_Init+0x338>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 8000700:	7c7a      	ldrb	r2, [r7, #17]
 8000702:	7cbb      	ldrb	r3, [r7, #18]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	fa02 f103 	lsl.w	r1, r2, r3
 800070a:	4a59      	ldr	r2, [pc, #356]	; (8000870 <GPIO_Init+0x33c>)
 800070c:	7cfb      	ldrb	r3, [r7, #19]
 800070e:	3302      	adds	r3, #2
 8000710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. ENable the Exti intrrupt delivery using IMR
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000714:	4b57      	ldr	r3, [pc, #348]	; (8000874 <GPIO_Init+0x340>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7912      	ldrb	r2, [r2, #4]
 800071c:	4611      	mov	r1, r2
 800071e:	2201      	movs	r2, #1
 8000720:	408a      	lsls	r2, r1
 8000722:	4611      	mov	r1, r2
 8000724:	4a53      	ldr	r2, [pc, #332]	; (8000874 <GPIO_Init+0x340>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	799b      	ldrb	r3, [r3, #6]
 8000732:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800073e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	4619      	mov	r1, r3
 800074c:	2303      	movs	r3, #3
 800074e:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000750:	43db      	mvns	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	400a      	ands	r2, r1
 800075a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6899      	ldr	r1, [r3, #8]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	430a      	orrs	r2, r1
 800076a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

	// Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	79db      	ldrb	r3, [r3, #7]
 8000774:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000780:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	4619      	mov	r1, r3
 800078e:	2303      	movs	r3, #3
 8000790:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 8000792:	43db      	mvns	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	400a      	ands	r2, r1
 800079c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68d9      	ldr	r1, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	430a      	orrs	r2, r1
 80007ac:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

	//configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	7a1b      	ldrb	r3, [r3, #8]
 80007b6:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80007c2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	4619      	mov	r1, r3
 80007d0:	2301      	movs	r3, #1
 80007d2:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80007d4:	43db      	mvns	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	400a      	ands	r2, r1
 80007de:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6859      	ldr	r1, [r3, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	795b      	ldrb	r3, [r3, #5]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d132      	bne.n	8000862 <GPIO_Init+0x32e>
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	08db      	lsrs	r3, r3, #3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	3208      	adds	r2, #8
 8000818:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	210f      	movs	r1, #15
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4011      	ands	r1, r2
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	3208      	adds	r2, #8
 8000834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	3208      	adds	r2, #8
 8000840:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a5b      	ldrb	r3, [r3, #9]
 8000848:	4619      	mov	r1, r3
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4311      	orrs	r1, r2
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	3208      	adds	r2, #8
 800085e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40013800 	.word	0x40013800
 8000874:	40013c00 	.word	0x40013c00

08000878 <I2C_GenerateStartCondition>:
uint16_t AHB_PreScalar[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScalar[4] = { 2,4,8,16};


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)			///send the slave address to the master
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr <<1;				//move tthe bit with 1 register
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &=~(1);				//slaveAddr is the Slave Adress and clear off the first bit address
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	f023 0301 	bic.w	r3, r3, #1
 80008ae:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;			//store the slave address to the DR
 80008b0:	78fa      	ldrb	r2, [r7, #3]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	611a      	str	r2, [r3, #16]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx ->SR1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx ->SR2;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <I2C_PeripheralControl>:


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d106      	bne.n	800091c <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f043 0201 	orr.w	r2, r3, #1
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 800091a:	e005      	b.n	8000928 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f023 0201 	bic.w	r2, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
	...

08000934 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d11f      	bne.n	8000986 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a11      	ldr	r2, [pc, #68]	; (8000990 <I2C_PeriClockControl+0x5c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <I2C_PeriClockControl+0x60>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <I2C_PeriClockControl+0x60>)
 8000954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 800095a:	e014      	b.n	8000986 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <I2C_PeriClockControl+0x64>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <I2C_PeriClockControl+0x60>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <I2C_PeriClockControl+0x60>)
 800096a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000970:	e009      	b.n	8000986 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a09      	ldr	r2, [pc, #36]	; (800099c <I2C_PeriClockControl+0x68>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d105      	bne.n	8000986 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <I2C_PeriClockControl+0x60>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <I2C_PeriClockControl+0x60>)
 8000980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40005400 	.word	0x40005400
 8000994:	40023800 	.word	0x40023800
 8000998:	40005800 	.word	0x40005800
 800099c:	40005c00 	.word	0x40005c00

080009a0 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

	return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
	...

080009b0 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc, temp,ahbp, apb1p;

	clksrc= ((RCC->CFGR>>2)&0x3);			//bring those 2 bits to the lsb position and mask
 80009b6:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <RCC_GetPCLK1Value+0x9c>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	727b      	strb	r3, [r7, #9]
	if(clksrc==0)
 80009c4:	7a7b      	ldrb	r3, [r7, #9]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d102      	bne.n	80009d0 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk= 16000000;
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <RCC_GetPCLK1Value+0xa0>)
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e00b      	b.n	80009e8 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==1)
 80009d0:	7a7b      	ldrb	r3, [r7, #9]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d102      	bne.n	80009dc <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk= 8000000;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <RCC_GetPCLK1Value+0xa4>)
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e005      	b.n	80009e8 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==2)
 80009dc:	7a7b      	ldrb	r3, [r7, #9]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d102      	bne.n	80009e8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk= RCC_GetPLLOutputClock();
 80009e2:	f7ff ffdd 	bl	80009a0 <RCC_GetPLLOutputClock>
 80009e6:	60f8      	str	r0, [r7, #12]
	}

	//for ahb1
	temp=((RCC->CFGR>>4)&0xF);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <RCC_GetPCLK1Value+0x9c>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	091b      	lsrs	r3, r3, #4
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f003 030f 	and.w	r3, r3, #15
 80009f4:	723b      	strb	r3, [r7, #8]

	if(temp<8)
 80009f6:	7a3b      	ldrb	r3, [r7, #8]
 80009f8:	2b07      	cmp	r3, #7
 80009fa:	d802      	bhi.n	8000a02 <RCC_GetPCLK1Value+0x52>
	{
		ahbp=1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	72fb      	strb	r3, [r7, #11]
 8000a00:	e005      	b.n	8000a0e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		 ahbp=AHB_PreScalar[temp-8];
 8000a02:	7a3b      	ldrb	r3, [r7, #8]
 8000a04:	3b08      	subs	r3, #8
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <RCC_GetPCLK1Value+0xa8>)
 8000a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a0c:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1
	temp=((RCC->CFGR>>10)&0x7);
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <RCC_GetPCLK1Value+0x9c>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	0a9b      	lsrs	r3, r3, #10
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	723b      	strb	r3, [r7, #8]

	if(temp<4)
 8000a1c:	7a3b      	ldrb	r3, [r7, #8]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d802      	bhi.n	8000a28 <RCC_GetPCLK1Value+0x78>
	{
		apb1p=1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	72bb      	strb	r3, [r7, #10]
 8000a26:	e004      	b.n	8000a32 <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		 apb1p=APB1_PreScalar[temp-4];
 8000a28:	7a3b      	ldrb	r3, [r7, #8]
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <RCC_GetPCLK1Value+0xac>)
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	72bb      	strb	r3, [r7, #10]
	}

	pclk1=(SystemClk/ahbp)/apb1p;
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a3a:	7abb      	ldrb	r3, [r7, #10]
 8000a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a40:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000a42:	687b      	ldr	r3, [r7, #4]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	00f42400 	.word	0x00f42400
 8000a54:	007a1200 	.word	0x007a1200
 8000a58:	20000020 	.word	0x20000020
 8000a5c:	20000030 	.word	0x20000030

08000a60 <I2C_Init>:
/*
 * 		@ I2C initialisation driver
 */

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]

	//enable the clock for
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff5e 	bl	8000934 <I2C_PeriClockControl>

	//configure the ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl<<10;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	029b      	lsls	r3, r3, #10
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR"
	tempreg = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 8000a90:	f7ff ff8e 	bl	80009b0 <RCC_GetPCLK1Value>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a48      	ldr	r2, [pc, #288]	; (8000bb8 <I2C_Init+0x158>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	0c9b      	lsrs	r3, r3, #18
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000aae:	605a      	str	r2, [r3, #4]

	//configure the FREQ field for OAR
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress<<1;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);				//becasue datasheet says that
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	609a      	str	r2, [r3, #8]

	//CCR Calculations
	uint16_t ccr_value = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed<= I2C_SCL_SPEED_SM)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	4a38      	ldr	r2, [pc, #224]	; (8000bbc <I2C_Init+0x15c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d80f      	bhi.n	8000afe <I2C_Init+0x9e>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value()/(2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000ade:	f7ff ff67 	bl	80009b0 <RCC_GetPCLK1Value>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000af0:	897b      	ldrh	r3, [r7, #10]
 8000af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e030      	b.n	8000b60 <I2C_Init+0x100>
	}
	else
	{
		//fast mode
		tempreg |= (1<<15);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b04:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<pI2CHandle->I2C_Config.I2C_FMDutyCycle<<14);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	039b      	lsls	r3, r3, #14
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10b      	bne.n	8000b3a <I2C_Init+0xda>
		{
			ccr_value = (RCC_GetPCLK1Value()/(3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b22:	f7ff ff45 	bl	80009b0 <RCC_GetPCLK1Value>
 8000b26:	4601      	mov	r1, r0
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b36:	817b      	strh	r3, [r7, #10]
 8000b38:	e00c      	b.n	8000b54 <I2C_Init+0xf4>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value()/(25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b3a:	f7ff ff39 	bl	80009b0 <RCC_GetPCLK1Value>
 8000b3e:	4601      	mov	r1, r0
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	009a      	lsls	r2, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b52:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000b54:	897b      	ldrh	r3, [r7, #10]
 8000b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed<= I2C_SCL_SPEED_SM)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <I2C_Init+0x15c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d809      	bhi.n	8000b86 <I2C_Init+0x126>
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U)+1;
 8000b72:	f7ff ff1d 	bl	80009b0 <RCC_GetPCLK1Value>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <I2C_Init+0x158>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	0c9b      	lsrs	r3, r3, #18
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e00d      	b.n	8000ba2 <I2C_Init+0x142>
	}
	else
	{
		//mod eis fast mode
		tempreg = ((RCC_GetPCLK1Value()*300)/1000000000U)+1;
 8000b86:	f7ff ff13 	bl	80009b0 <RCC_GetPCLK1Value>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	0a5b      	lsrs	r3, r3, #9
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <I2C_Init+0x160>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	09db      	lsrs	r3, r3, #7
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bac:	621a      	str	r2, [r3, #32]
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	000186a0 	.word	0x000186a0
 8000bc0:	00044b83 	.word	0x00044b83

08000bc4 <I2C_GetFlagStatus>:
{

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	695a      	ldr	r2, [r3, #20]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe37 	bl	8000878 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completerd by checkin gthe SB flag in the SR1
	// note: until SB is cleared SCL will be stretched(pulled to Low)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000c0a:	bf00      	nop
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2101      	movs	r1, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffd6 	bl	8000bc4 <I2C_GetFlagStatus>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f6      	beq.n	8000c0c <I2C_MasterSendData+0x22>

	//3. SEND THE ADDRESS FOO THE SLAVE WITH R/NW BIT SET TO THE W(0)(total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	79ba      	ldrb	r2, [r7, #6]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fe35 	bl	8000896 <I2C_ExecuteAddressPhase>

	//4. COnfirm that the address phase is completed bby checking the Addr flag in thhe SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000c2c:	bf00      	nop
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2102      	movs	r1, #2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffc5 	bl	8000bc4 <I2C_GetFlagStatus>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f6      	beq.n	8000c2e <I2C_MasterSendData+0x44>

	//5. clear the ADDR flag according to its software sequence
	// Note: until ADDr is cleared SCL will be stretched(pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe3b 	bl	80008c0 <I2C_ClearADDRFlag>

	//6. send the data until Len becomes 0
	while(Len>0)
 8000c4a:	e014      	b.n	8000c76 <I2C_MasterSendData+0x8c>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); 			//wait till TXE is Set
 8000c4c:	bf00      	nop
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffb5 	bl	8000bc4 <I2C_GetFlagStatus>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f6      	beq.n	8000c4e <I2C_MasterSendData+0x64>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
		Len--;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]
	while(Len>0)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1e7      	bne.n	8000c4c <I2C_MasterSendData+0x62>
	}

	//7. When Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP Condition
	// not: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//when BTF =1 SCL will be stretched(pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000c7c:	bf00      	nop
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff9d 	bl	8000bc4 <I2C_GetFlagStatus>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f6      	beq.n	8000c7e <I2C_MasterSendData+0x94>

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000c90:	bf00      	nop
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2104      	movs	r1, #4
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff93 	bl	8000bc4 <I2C_GetFlagStatus>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f6      	beq.n	8000c92 <I2C_MasterSendData+0xa8>

	//8. Generate STOP Condition and master need not to wait for the completion of stop condition.
	//note: Geenrating STOP, Automatically clear the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe18 	bl	80008de <I2C_GenerateStopCondition>

}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <__libc_init_array>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	4d0d      	ldr	r5, [pc, #52]	; (8000cf0 <__libc_init_array+0x38>)
 8000cbc:	4c0d      	ldr	r4, [pc, #52]	; (8000cf4 <__libc_init_array+0x3c>)
 8000cbe:	1b64      	subs	r4, r4, r5
 8000cc0:	10a4      	asrs	r4, r4, #2
 8000cc2:	2600      	movs	r6, #0
 8000cc4:	42a6      	cmp	r6, r4
 8000cc6:	d109      	bne.n	8000cdc <__libc_init_array+0x24>
 8000cc8:	4d0b      	ldr	r5, [pc, #44]	; (8000cf8 <__libc_init_array+0x40>)
 8000cca:	4c0c      	ldr	r4, [pc, #48]	; (8000cfc <__libc_init_array+0x44>)
 8000ccc:	f000 f818 	bl	8000d00 <_init>
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	10a4      	asrs	r4, r4, #2
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	42a6      	cmp	r6, r4
 8000cd8:	d105      	bne.n	8000ce6 <__libc_init_array+0x2e>
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce0:	4798      	blx	r3
 8000ce2:	3601      	adds	r6, #1
 8000ce4:	e7ee      	b.n	8000cc4 <__libc_init_array+0xc>
 8000ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cea:	4798      	blx	r3
 8000cec:	3601      	adds	r6, #1
 8000cee:	e7f2      	b.n	8000cd6 <__libc_init_array+0x1e>
 8000cf0:	08000d18 	.word	0x08000d18
 8000cf4:	08000d18 	.word	0x08000d18
 8000cf8:	08000d18 	.word	0x08000d18
 8000cfc:	08000d1c 	.word	0x08000d1c

08000d00 <_init>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr

08000d0c <_fini>:
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	bf00      	nop
 8000d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d12:	bc08      	pop	{r3}
 8000d14:	469e      	mov	lr, r3
 8000d16:	4770      	bx	lr
