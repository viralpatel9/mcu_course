
stm32f4xx_drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080020e8  080020e8  000120e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002254  08002254  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002254  08002254  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002254  08002254  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002254  08002254  00012254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002258  08002258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800225c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001768  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000503  00000000  00000000  000217f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  00021ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027f1  00000000  00000000  00022008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bbc  00000000  00000000  000247f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009f03  00000000  00000000  000263b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f18  00000000  00000000  00030308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  00031220  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  000312bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080020d0 	.word	0x080020d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080020d0 	.word	0x080020d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
//arduino led

#define LED_PIN  9

void delay(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <delay+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	0003d08f 	.word	0x0003d08f

080002cc <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002d2:	4b14      	ldr	r3, [pc, #80]	; (8000324 <SPI2_GPIOInits+0x58>)
 80002d4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002d6:	2302      	movs	r3, #2
 80002d8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002da:	2305      	movs	r3, #5
 80002dc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002de:	2300      	movs	r3, #0
 80002e0:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002e6:	2302      	movs	r3, #2
 80002e8:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ea:	230d      	movs	r3, #13
 80002ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fb87 	bl	8000a04 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002f6:	230f      	movs	r3, #15
 80002f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fb81 	bl	8000a04 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000302:	230e      	movs	r3, #14
 8000304:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fb7b 	bl	8000a04 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800030e:	230c      	movs	r3, #12
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fb75 	bl	8000a04 <GPIO_Init>


}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020400 	.word	0x40020400

08000328 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <SPI2_Inits+0x34>)
 8000330:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000332:	2301      	movs	r3, #1
 8000334:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000336:	2301      	movs	r3, #1
 8000338:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 800033a:	2304      	movs	r3, #4
 800033c:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800033e:	2300      	movs	r3, #0
 8000340:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000342:	2300      	movs	r3, #0
 8000344:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000346:	2300      	movs	r3, #0
 8000348:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 800034a:	463b      	mov	r3, r7
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fd47 	bl	8000de0 <SPI_Init>
}
 8000352:	bf00      	nop
 8000354:	3720      	adds	r7, #32
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40003800 	.word	0x40003800

08000360 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <GPIO_ButtonInit+0x54>)
 8000368:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800036a:	2300      	movs	r3, #0
 800036c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800036e:	2300      	movs	r3, #0
 8000370:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000372:	2302      	movs	r3, #2
 8000374:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000376:	2300      	movs	r3, #0
 8000378:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fb40 	bl	8000a04 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <GPIO_ButtonInit+0x58>)
 8000386:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000388:	230c      	movs	r3, #12
 800038a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800038c:	2301      	movs	r3, #1
 800038e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000390:	2302      	movs	r3, #2
 8000392:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000394:	2301      	movs	r3, #1
 8000396:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000398:	2300      	movs	r3, #0
 800039a:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 800039c:	2101      	movs	r1, #1
 800039e:	4806      	ldr	r0, [pc, #24]	; (80003b8 <GPIO_ButtonInit+0x58>)
 80003a0:	f000 fa48 	bl	8000834 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80003a4:	463b      	mov	r3, r7
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fb2c 	bl	8000a04 <GPIO_Init>

}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40020000 	.word	0x40020000
 80003b8:	40020c00 	.word	0x40020c00

080003bc <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2bf5      	cmp	r3, #245	; 0xf5
 80003ca:	d101      	bne.n	80003d0 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 80003cc:	2301      	movs	r3, #1
 80003ce:	e000      	b.n	80003d2 <SPI_VerifyResponse+0x16>
	}

	return 0;
 80003d0:	2300      	movs	r3, #0
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <main>:

int main(void)
{
 80003dc:	b5b0      	push	{r4, r5, r7, lr}
 80003de:	b08e      	sub	sp, #56	; 0x38
 80003e0:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 80003e2:	23ff      	movs	r3, #255	; 0xff
 80003e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t dummy_read;

	//initialise_monitor_handles();

	printf("Application is running\n");
 80003e8:	48b1      	ldr	r0, [pc, #708]	; (80006b0 <main+0x2d4>)
 80003ea:	f000 febd 	bl	8001168 <puts>

	GPIO_ButtonInit();
 80003ee:	f7ff ffb7 	bl	8000360 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80003f2:	f7ff ff6b 	bl	80002cc <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80003f6:	f7ff ff97 	bl	8000328 <SPI2_Inits>

	printf("SPI Init. done\n");
 80003fa:	48ae      	ldr	r0, [pc, #696]	; (80006b4 <main+0x2d8>)
 80003fc:	f000 feb4 	bl	8001168 <puts>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	48ad      	ldr	r0, [pc, #692]	; (80006b8 <main+0x2dc>)
 8000404:	f000 fde3 	bl	8000fce <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000408:	bf00      	nop
 800040a:	2100      	movs	r1, #0
 800040c:	48ab      	ldr	r0, [pc, #684]	; (80006bc <main+0x2e0>)
 800040e:	f000 fc9b 	bl	8000d48 <GPIO_ReadFromInputPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f8      	beq.n	800040a <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000418:	f7ff ff42 	bl	80002a0 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800041c:	2101      	movs	r1, #1
 800041e:	48a6      	ldr	r0, [pc, #664]	; (80006b8 <main+0x2dc>)
 8000420:	f000 fdba 	bl	8000f98 <SPI_PeripheralControl>

	    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000424:	2350      	movs	r3, #80	; 0x50
 8000426:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800042a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	48a1      	ldr	r0, [pc, #644]	; (80006b8 <main+0x2dc>)
 8000434:	f000 fd42 	bl	8000ebc <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000438:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	489d      	ldr	r0, [pc, #628]	; (80006b8 <main+0x2dc>)
 8000442:	f000 fd72 	bl	8000f2a <SPI_ReceiveData>


		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000446:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	489a      	ldr	r0, [pc, #616]	; (80006b8 <main+0x2dc>)
 8000450:	f000 fd34 	bl	8000ebc <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	4896      	ldr	r0, [pc, #600]	; (80006b8 <main+0x2dc>)
 800045e:	f000 fd64 	bl	8000f2a <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000462:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffa8 	bl	80003bc <SPI_VerifyResponse>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d016      	beq.n	80004a0 <main+0xc4>
		{
			args[0] = LED_PIN;
 8000472:	2309      	movs	r3, #9
 8000474:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = LED_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			//send arguments
			SPI_SendData(SPI2,args,2);
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	2202      	movs	r2, #2
 8000484:	4619      	mov	r1, r3
 8000486:	488c      	ldr	r0, [pc, #560]	; (80006b8 <main+0x2dc>)
 8000488:	f000 fd18 	bl	8000ebc <SPI_SendData>
			// dummy read
			SPI_ReceiveData(SPI2,args,2);
 800048c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000490:	2202      	movs	r2, #2
 8000492:	4619      	mov	r1, r3
 8000494:	4888      	ldr	r0, [pc, #544]	; (80006b8 <main+0x2dc>)
 8000496:	f000 fd48 	bl	8000f2a <SPI_ReceiveData>
			printf("COMMAND_LED_CTRL Executed\n");
 800049a:	4889      	ldr	r0, [pc, #548]	; (80006c0 <main+0x2e4>)
 800049c:	f000 fe64 	bl	8001168 <puts>


		//2. CMD_SENOSR_READ   <analog pin number(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80004a0:	bf00      	nop
 80004a2:	2100      	movs	r1, #0
 80004a4:	4885      	ldr	r0, [pc, #532]	; (80006bc <main+0x2e0>)
 80004a6:	f000 fc4f 	bl	8000d48 <GPIO_ReadFromInputPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f8      	beq.n	80004a2 <main+0xc6>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80004b0:	f7ff fef6 	bl	80002a0 <delay>

		commandcode = COMMAND_SENSOR_READ;
 80004b4:	2351      	movs	r3, #81	; 0x51
 80004b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 80004ba:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	487d      	ldr	r0, [pc, #500]	; (80006b8 <main+0x2dc>)
 80004c4:	f000 fcfa 	bl	8000ebc <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80004c8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	4879      	ldr	r0, [pc, #484]	; (80006b8 <main+0x2dc>)
 80004d2:	f000 fd2a 	bl	8000f2a <SPI_ReceiveData>


		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 80004d6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	4876      	ldr	r0, [pc, #472]	; (80006b8 <main+0x2dc>)
 80004e0:	f000 fcec 	bl	8000ebc <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 80004e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	4872      	ldr	r0, [pc, #456]	; (80006b8 <main+0x2dc>)
 80004ee:	f000 fd1c 	bl	8000f2a <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 80004f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff60 	bl	80003bc <SPI_VerifyResponse>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d024      	beq.n	800054c <main+0x170>
		{
			args[0] = ANALOG_PIN0;
 8000502:	2300      	movs	r3, #0
 8000504:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	4869      	ldr	r0, [pc, #420]	; (80006b8 <main+0x2dc>)
 8000512:	f000 fcd3 	bl	8000ebc <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000516:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800051a:	2201      	movs	r2, #1
 800051c:	4619      	mov	r1, r3
 800051e:	4866      	ldr	r0, [pc, #408]	; (80006b8 <main+0x2dc>)
 8000520:	f000 fd03 	bl	8000f2a <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000524:	f7ff febc 	bl	80002a0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000528:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	4861      	ldr	r0, [pc, #388]	; (80006b8 <main+0x2dc>)
 8000532:	f000 fcc3 	bl	8000ebc <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 8000536:	1cfb      	adds	r3, r7, #3
 8000538:	2201      	movs	r2, #1
 800053a:	4619      	mov	r1, r3
 800053c:	485e      	ldr	r0, [pc, #376]	; (80006b8 <main+0x2dc>)
 800053e:	f000 fcf4 	bl	8000f2a <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analog_read);
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	4619      	mov	r1, r3
 8000546:	485f      	ldr	r0, [pc, #380]	; (80006c4 <main+0x2e8>)
 8000548:	f000 fd88 	bl	800105c <iprintf>
		}

		//3.  CMD_LED_READ 	 <pin no(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800054c:	bf00      	nop
 800054e:	2100      	movs	r1, #0
 8000550:	485a      	ldr	r0, [pc, #360]	; (80006bc <main+0x2e0>)
 8000552:	f000 fbf9 	bl	8000d48 <GPIO_ReadFromInputPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f8      	beq.n	800054e <main+0x172>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800055c:	f7ff fea0 	bl	80002a0 <delay>

		commandcode = COMMAND_LED_READ;
 8000560:	2352      	movs	r3, #82	; 0x52
 8000562:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000566:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	4852      	ldr	r0, [pc, #328]	; (80006b8 <main+0x2dc>)
 8000570:	f000 fca4 	bl	8000ebc <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000574:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000578:	2201      	movs	r2, #1
 800057a:	4619      	mov	r1, r3
 800057c:	484e      	ldr	r0, [pc, #312]	; (80006b8 <main+0x2dc>)
 800057e:	f000 fcd4 	bl	8000f2a <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000582:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000586:	2201      	movs	r2, #1
 8000588:	4619      	mov	r1, r3
 800058a:	484b      	ldr	r0, [pc, #300]	; (80006b8 <main+0x2dc>)
 800058c:	f000 fc96 	bl	8000ebc <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000594:	2201      	movs	r2, #1
 8000596:	4619      	mov	r1, r3
 8000598:	4847      	ldr	r0, [pc, #284]	; (80006b8 <main+0x2dc>)
 800059a:	f000 fcc6 	bl	8000f2a <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 800059e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff0a 	bl	80003bc <SPI_VerifyResponse>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d024      	beq.n	80005f8 <main+0x21c>
		{
			args[0] = LED_PIN;
 80005ae:	2309      	movs	r3, #9
 80005b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 80005b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	483e      	ldr	r0, [pc, #248]	; (80006b8 <main+0x2dc>)
 80005be:	f000 fc7d 	bl	8000ebc <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 80005c2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	483b      	ldr	r0, [pc, #236]	; (80006b8 <main+0x2dc>)
 80005cc:	f000 fcad 	bl	8000f2a <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 80005d0:	f7ff fe66 	bl	80002a0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 80005d4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80005d8:	2201      	movs	r2, #1
 80005da:	4619      	mov	r1, r3
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <main+0x2dc>)
 80005de:	f000 fc6d 	bl	8000ebc <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2,&led_status,1);
 80005e2:	1cbb      	adds	r3, r7, #2
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	4833      	ldr	r0, [pc, #204]	; (80006b8 <main+0x2dc>)
 80005ea:	f000 fc9e 	bl	8000f2a <SPI_ReceiveData>
			printf("COMMAND_READ_LED %d\n",led_status);
 80005ee:	78bb      	ldrb	r3, [r7, #2]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4835      	ldr	r0, [pc, #212]	; (80006c8 <main+0x2ec>)
 80005f4:	f000 fd32 	bl	800105c <iprintf>
		}

		//4. CMD_PRINT 		<len(2)>  <message(len) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80005f8:	bf00      	nop
 80005fa:	2100      	movs	r1, #0
 80005fc:	482f      	ldr	r0, [pc, #188]	; (80006bc <main+0x2e0>)
 80005fe:	f000 fba3 	bl	8000d48 <GPIO_ReadFromInputPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f8      	beq.n	80005fa <main+0x21e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000608:	f7ff fe4a 	bl	80002a0 <delay>

		commandcode = COMMAND_PRINT;
 800060c:	2353      	movs	r3, #83	; 0x53
 800060e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000612:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000616:	2201      	movs	r2, #1
 8000618:	4619      	mov	r1, r3
 800061a:	4827      	ldr	r0, [pc, #156]	; (80006b8 <main+0x2dc>)
 800061c:	f000 fc4e 	bl	8000ebc <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000620:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	4823      	ldr	r0, [pc, #140]	; (80006b8 <main+0x2dc>)
 800062a:	f000 fc7e 	bl	8000f2a <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800062e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x2dc>)
 8000638:	f000 fc40 	bl	8000ebc <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 800063c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	481c      	ldr	r0, [pc, #112]	; (80006b8 <main+0x2dc>)
 8000646:	f000 fc70 	bl	8000f2a <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <main+0x2f0>)
 800064c:	f107 0410 	add.w	r4, r7, #16
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0003 	ldmia.w	r5, {r0, r1}
 800065a:	6020      	str	r0, [r4, #0]
 800065c:	3404      	adds	r4, #4
 800065e:	8021      	strh	r1, [r4, #0]
 8000660:	3402      	adds	r4, #2
 8000662:	0c0b      	lsrs	r3, r1, #16
 8000664:	7023      	strb	r3, [r4, #0]
		if( SPI_VerifyResponse(ackbyte))
 8000666:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fea6 	bl	80003bc <SPI_VerifyResponse>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d048      	beq.n	8000708 <main+0x32c>
		{
			args[0] = strlen((char*)message);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdb8 	bl	80001f0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 8000688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <main+0x2dc>)
 8000692:	f000 fc13 	bl	8000ebc <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000696:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <main+0x2dc>)
 80006a0:	f000 fc43 	bl	8000f2a <SPI_ReceiveData>

			delay();
 80006a4:	f7ff fdfc 	bl	80002a0 <delay>

			//send message
			for(int i = 0 ; i < args[0] ; i++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
 80006ac:	e023      	b.n	80006f6 <main+0x31a>
 80006ae:	bf00      	nop
 80006b0:	080020e8 	.word	0x080020e8
 80006b4:	08002100 	.word	0x08002100
 80006b8:	40003800 	.word	0x40003800
 80006bc:	40020000 	.word	0x40020000
 80006c0:	08002110 	.word	0x08002110
 80006c4:	0800212c 	.word	0x0800212c
 80006c8:	08002144 	.word	0x08002144
 80006cc:	080021a4 	.word	0x080021a4
				SPI_SendData(SPI2,&message[i],1);
 80006d0:	f107 0210 	add.w	r2, r7, #16
 80006d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d6:	4413      	add	r3, r2
 80006d8:	2201      	movs	r2, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	483b      	ldr	r0, [pc, #236]	; (80007cc <main+0x3f0>)
 80006de:	f000 fbed 	bl	8000ebc <SPI_SendData>
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80006e2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	4838      	ldr	r0, [pc, #224]	; (80007cc <main+0x3f0>)
 80006ec:	f000 fc1d 	bl	8000f2a <SPI_ReceiveData>
			for(int i = 0 ; i < args[0] ; i++){
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	3301      	adds	r3, #1
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
 80006f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006fa:	461a      	mov	r2, r3
 80006fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fe:	4293      	cmp	r3, r2
 8000700:	dbe6      	blt.n	80006d0 <main+0x2f4>
			}

			printf("COMMAND_PRINT Executed \n");
 8000702:	4833      	ldr	r0, [pc, #204]	; (80007d0 <main+0x3f4>)
 8000704:	f000 fd30 	bl	8001168 <puts>

		}

		//5. CMD_ID_READ
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000708:	bf00      	nop
 800070a:	2100      	movs	r1, #0
 800070c:	4831      	ldr	r0, [pc, #196]	; (80007d4 <main+0x3f8>)
 800070e:	f000 fb1b 	bl	8000d48 <GPIO_ReadFromInputPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f8      	beq.n	800070a <main+0x32e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000718:	f7ff fdc2 	bl	80002a0 <delay>

		commandcode = COMMAND_ID_READ;
 800071c:	2354      	movs	r3, #84	; 0x54
 800071e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000722:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000726:	2201      	movs	r2, #1
 8000728:	4619      	mov	r1, r3
 800072a:	4828      	ldr	r0, [pc, #160]	; (80007cc <main+0x3f0>)
 800072c:	f000 fbc6 	bl	8000ebc <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000730:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000734:	2201      	movs	r2, #1
 8000736:	4619      	mov	r1, r3
 8000738:	4824      	ldr	r0, [pc, #144]	; (80007cc <main+0x3f0>)
 800073a:	f000 fbf6 	bl	8000f2a <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800073e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000742:	2201      	movs	r2, #1
 8000744:	4619      	mov	r1, r3
 8000746:	4821      	ldr	r0, [pc, #132]	; (80007cc <main+0x3f0>)
 8000748:	f000 fbb8 	bl	8000ebc <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 800074c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	481d      	ldr	r0, [pc, #116]	; (80007cc <main+0x3f0>)
 8000756:	f000 fbe8 	bl	8000f2a <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 800075a:	2300      	movs	r3, #0
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
		if( SPI_VerifyResponse(ackbyte))
 800075e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fe2a 	bl	80003bc <SPI_VerifyResponse>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d01e      	beq.n	80007ac <main+0x3d0>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
 8000772:	e011      	b.n	8000798 <main+0x3bc>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000774:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <main+0x3f0>)
 800077e:	f000 fb9d 	bl	8000ebc <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 8000782:	1d3a      	adds	r2, r7, #4
 8000784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000786:	4413      	add	r3, r2
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <main+0x3f0>)
 800078e:	f000 fbcc 	bl	8000f2a <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 8000792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000794:	3301      	adds	r3, #1
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
 8000798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079a:	2b09      	cmp	r3, #9
 800079c:	d9ea      	bls.n	8000774 <main+0x398>
			}

			id[10] = '\0';
 800079e:	2300      	movs	r3, #0
 80007a0:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <main+0x3fc>)
 80007a8:	f000 fc58 	bl	800105c <iprintf>

		}

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80007ac:	bf00      	nop
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <main+0x3f0>)
 80007b2:	f000 fb70 	bl	8000e96 <SPI_GetFlagStatus>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f8      	bne.n	80007ae <main+0x3d2>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80007bc:	2100      	movs	r1, #0
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <main+0x3f0>)
 80007c0:	f000 fbea 	bl	8000f98 <SPI_PeripheralControl>

		printf("SPI Communication Closed\n");
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <main+0x400>)
 80007c6:	f000 fccf 	bl	8001168 <puts>
	{
 80007ca:	e61d      	b.n	8000408 <main+0x2c>
 80007cc:	40003800 	.word	0x40003800
 80007d0:	0800215c 	.word	0x0800215c
 80007d4:	40020000 	.word	0x40020000
 80007d8:	08002174 	.word	0x08002174
 80007dc:	08002188 	.word	0x08002188

080007e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800080e:	f000 fbf9 	bl	8001004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fde3 	bl	80003dc <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   r0, =_estack
 8000818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000824:	0800225c 	.word	0x0800225c
  ldr r2, =_sbss
 8000828:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800082c:	20000094 	.word	0x20000094

08000830 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC_IRQHandler>
	...

08000834 <GPIO_PeriClockControl>:
 * @Note			-  None
 *
 *
 *************************************** */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d162      	bne.n	800090c <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a64      	ldr	r2, [pc, #400]	; (80009dc <GPIO_PeriClockControl+0x1a8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800084e:	4b64      	ldr	r3, [pc, #400]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a63      	ldr	r2, [pc, #396]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 800085a:	e0b9      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a61      	ldr	r2, [pc, #388]	; (80009e4 <GPIO_PeriClockControl+0x1b0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d106      	bne.n	8000872 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000864:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a5d      	ldr	r2, [pc, #372]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000870:	e0ae      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a5c      	ldr	r2, [pc, #368]	; (80009e8 <GPIO_PeriClockControl+0x1b4>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800087a:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a58      	ldr	r2, [pc, #352]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000886:	e0a3      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a58      	ldr	r2, [pc, #352]	; (80009ec <GPIO_PeriClockControl+0x1b8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000890:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a52      	ldr	r2, [pc, #328]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089c:	e098      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a53      	ldr	r2, [pc, #332]	; (80009f0 <GPIO_PeriClockControl+0x1bc>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80008a6:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a4d      	ldr	r2, [pc, #308]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b2:	e08d      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <GPIO_PeriClockControl+0x1c0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d106      	bne.n	80008ca <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80008bc:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a47      	ldr	r2, [pc, #284]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c8:	e082      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a4a      	ldr	r2, [pc, #296]	; (80009f8 <GPIO_PeriClockControl+0x1c4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80008d2:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008de:	e077      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a46      	ldr	r2, [pc, #280]	; (80009fc <GPIO_PeriClockControl+0x1c8>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a3c      	ldr	r2, [pc, #240]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f4:	e06c      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a41      	ldr	r2, [pc, #260]	; (8000a00 <GPIO_PeriClockControl+0x1cc>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d168      	bne.n	80009d0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090a:	e061      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <GPIO_PeriClockControl+0x1a8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d106      	bne.n	8000922 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 800091a:	f023 0301 	bic.w	r3, r3, #1
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000920:	e056      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <GPIO_PeriClockControl+0x1b0>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000930:	f023 0302 	bic.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000936:	e04b      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <GPIO_PeriClockControl+0x1b4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000940:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000946:	f023 0304 	bic.w	r3, r3, #4
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800094c:	e040      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <GPIO_PeriClockControl+0x1b8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 800095c:	f023 0308 	bic.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000962:	e035      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <GPIO_PeriClockControl+0x1bc>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d106      	bne.n	800097a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000972:	f023 0310 	bic.w	r3, r3, #16
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000978:	e02a      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <GPIO_PeriClockControl+0x1c0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 8000988:	f023 0320 	bic.w	r3, r3, #32
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800098e:	e01f      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <GPIO_PeriClockControl+0x1c4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d106      	bne.n	80009a6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 800099e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a4:	e014      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <GPIO_PeriClockControl+0x1c8>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d106      	bne.n	80009bc <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80009b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ba:	e009      	b.n	80009d0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <GPIO_PeriClockControl+0x1cc>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d105      	bne.n	80009d0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <GPIO_PeriClockControl+0x1ac>)
 80009ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40021400 	.word	0x40021400
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40021c00 	.word	0x40021c00
 8000a00:	40022000 	.word	0x40022000

08000a04 <GPIO_Init>:

/*
 * 	Init and Deint of the peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff0c 	bl	8000834 <GPIO_PeriClockControl>

	// Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d81f      	bhi.n	8000a64 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	795b      	ldrb	r3, [r3, #5]
 8000a28:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000a34:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // cleraing off the pin number before using it
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	4619      	mov	r1, r3
 8000a42:	2303      	movs	r3, #3
 8000a44:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 8000a46:	43db      	mvns	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	400a      	ands	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6819      	ldr	r1, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	e0ca      	b.n	8000bfa <GPIO_Init+0x1f6>

	}
	else
	{
		// this is the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	795b      	ldrb	r3, [r3, #5]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d117      	bne.n	8000a9c <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6c:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <GPIO_Init+0x194>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	7912      	ldrb	r2, [r2, #4]
 8000a74:	4611      	mov	r1, r2
 8000a76:	2201      	movs	r2, #1
 8000a78:	408a      	lsls	r2, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4a46      	ldr	r2, [pc, #280]	; (8000b98 <GPIO_Init+0x194>)
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <GPIO_Init+0x194>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	7912      	ldrb	r2, [r2, #4]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	408a      	lsls	r2, r1
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	4611      	mov	r1, r2
 8000a94:	4a40      	ldr	r2, [pc, #256]	; (8000b98 <GPIO_Init+0x194>)
 8000a96:	400b      	ands	r3, r1
 8000a98:	6093      	str	r3, [r2, #8]
 8000a9a:	e035      	b.n	8000b08 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	795b      	ldrb	r3, [r3, #5]
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	d117      	bne.n	8000ad4 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <GPIO_Init+0x194>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	7912      	ldrb	r2, [r2, #4]
 8000aac:	4611      	mov	r1, r2
 8000aae:	2201      	movs	r2, #1
 8000ab0:	408a      	lsls	r2, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4a38      	ldr	r2, [pc, #224]	; (8000b98 <GPIO_Init+0x194>)
 8000ab6:	430b      	orrs	r3, r1
 8000ab8:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <GPIO_Init+0x194>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	7912      	ldrb	r2, [r2, #4]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	408a      	lsls	r2, r1
 8000ac8:	43d2      	mvns	r2, r2
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a32      	ldr	r2, [pc, #200]	; (8000b98 <GPIO_Init+0x194>)
 8000ace:	400b      	ands	r3, r1
 8000ad0:	60d3      	str	r3, [r2, #12]
 8000ad2:	e019      	b.n	8000b08 <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	795b      	ldrb	r3, [r3, #5]
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	d115      	bne.n	8000b08 <GPIO_Init+0x104>
		{
			//1. Configure bothh RTSR and FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000adc:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <GPIO_Init+0x194>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	7912      	ldrb	r2, [r2, #4]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	408a      	lsls	r2, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	4a2a      	ldr	r2, [pc, #168]	; (8000b98 <GPIO_Init+0x194>)
 8000aee:	430b      	orrs	r3, r1
 8000af0:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <GPIO_Init+0x194>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	7912      	ldrb	r2, [r2, #4]
 8000afa:	4611      	mov	r1, r2
 8000afc:	2201      	movs	r2, #1
 8000afe:	408a      	lsls	r2, r1
 8000b00:	4611      	mov	r1, r2
 8000b02:	4a25      	ldr	r2, [pc, #148]	; (8000b98 <GPIO_Init+0x194>)
 8000b04:	430b      	orrs	r3, r1
 8000b06:	6093      	str	r3, [r2, #8]

		}
		//2. COnfigure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	791b      	ldrb	r3, [r3, #4]
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	791b      	ldrb	r3, [r3, #4]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIOA_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <GPIO_Init+0x198>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d04d      	beq.n	8000bc0 <GPIO_Init+0x1bc>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <GPIO_Init+0x19c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d032      	beq.n	8000b94 <GPIO_Init+0x190>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <GPIO_Init+0x1a0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d02b      	beq.n	8000b90 <GPIO_Init+0x18c>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <GPIO_Init+0x1a4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d024      	beq.n	8000b8c <GPIO_Init+0x188>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a19      	ldr	r2, [pc, #100]	; (8000bac <GPIO_Init+0x1a8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d01d      	beq.n	8000b88 <GPIO_Init+0x184>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <GPIO_Init+0x1ac>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d016      	beq.n	8000b84 <GPIO_Init+0x180>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <GPIO_Init+0x1b0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d00f      	beq.n	8000b80 <GPIO_Init+0x17c>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <GPIO_Init+0x1b4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d008      	beq.n	8000b7c <GPIO_Init+0x178>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <GPIO_Init+0x1b8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <GPIO_Init+0x174>
 8000b74:	2308      	movs	r3, #8
 8000b76:	e024      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e022      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	e020      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b80:	2306      	movs	r3, #6
 8000b82:	e01e      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b84:	2305      	movs	r3, #5
 8000b86:	e01c      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b88:	2304      	movs	r3, #4
 8000b8a:	e01a      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	e018      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e016      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e014      	b.n	8000bc2 <GPIO_Init+0x1be>
 8000b98:	40013c00 	.word	0x40013c00
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40021400 	.word	0x40021400
 8000bb4:	40021800 	.word	0x40021800
 8000bb8:	40021c00 	.word	0x40021c00
 8000bbc:	40022000 	.word	0x40022000
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	; (8000d3c <GPIO_Init+0x338>)
 8000bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc8:	4a5c      	ldr	r2, [pc, #368]	; (8000d3c <GPIO_Init+0x338>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 8000bd0:	7c7a      	ldrb	r2, [r7, #17]
 8000bd2:	7cbb      	ldrb	r3, [r7, #18]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	fa02 f103 	lsl.w	r1, r2, r3
 8000bda:	4a59      	ldr	r2, [pc, #356]	; (8000d40 <GPIO_Init+0x33c>)
 8000bdc:	7cfb      	ldrb	r3, [r7, #19]
 8000bde:	3302      	adds	r3, #2
 8000be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. ENable the Exti intrrupt delivery using IMR
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000be4:	4b57      	ldr	r3, [pc, #348]	; (8000d44 <GPIO_Init+0x340>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	7912      	ldrb	r2, [r2, #4]
 8000bec:	4611      	mov	r1, r2
 8000bee:	2201      	movs	r2, #1
 8000bf0:	408a      	lsls	r2, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4a53      	ldr	r2, [pc, #332]	; (8000d44 <GPIO_Init+0x340>)
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	799b      	ldrb	r3, [r3, #6]
 8000c02:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	791b      	ldrb	r3, [r3, #4]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000c0e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 8000c20:	43db      	mvns	r3, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	400a      	ands	r2, r1
 8000c2a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6899      	ldr	r1, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

	// Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	79db      	ldrb	r3, [r3, #7]
 8000c44:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	791b      	ldrb	r3, [r3, #4]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000c50:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	791b      	ldrb	r3, [r3, #4]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2303      	movs	r3, #3
 8000c60:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4619      	mov	r1, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68d9      	ldr	r1, [r3, #12]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

	//configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7a1b      	ldrb	r3, [r3, #8]
 8000c86:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	791b      	ldrb	r3, [r3, #4]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000c92:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	400a      	ands	r2, r1
 8000cae:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6859      	ldr	r1, [r3, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	795b      	ldrb	r3, [r3, #5]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d132      	bne.n	8000d32 <GPIO_Init+0x32e>
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	791b      	ldrb	r3, [r3, #4]
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	791b      	ldrb	r3, [r3, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4011      	ands	r1, r2
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	3208      	adds	r2, #8
 8000d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7a5b      	ldrb	r3, [r3, #9]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4311      	orrs	r1, r2
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40013c00 	.word	0x40013c00

08000d48 <GPIO_ReadFromInputPin>:
 * Data read and write
 *
 * return value will be either 0 or 1
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x0000001);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
	return value;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
	...

08000d74 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d11f      	bne.n	8000dc6 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <SPI_PeriClockControl+0x5c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d106      	bne.n	8000d9c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <SPI_PeriClockControl+0x60>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <SPI_PeriClockControl+0x60>)
 8000d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8000d9a:	e014      	b.n	8000dc6 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <SPI_PeriClockControl+0x64>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d106      	bne.n	8000db2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <SPI_PeriClockControl+0x60>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SPI_PeriClockControl+0x60>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000db0:	e009      	b.n	8000dc6 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <SPI_PeriClockControl+0x68>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d105      	bne.n	8000dc6 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SPI_PeriClockControl+0x60>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SPI_PeriClockControl+0x60>)
 8000dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40013000 	.word	0x40013000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40003800 	.word	0x40003800
 8000ddc:	40003c00 	.word	0x40003c00

08000de0 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ffc0 	bl	8000d74 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d104      	bne.n	8000e18 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	e014      	b.n	8000e42 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	795b      	ldrb	r3, [r3, #5]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d104      	bne.n	8000e2a <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	e00b      	b.n	8000e42 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	795b      	ldrb	r3, [r3, #5]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d107      	bne.n	8000e42 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e38:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e40:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	799b      	ldrb	r3, [r3, #6]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	79db      	ldrb	r3, [r3, #7]
 8000e54:	02db      	lsls	r3, r3, #11
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7a1b      	ldrb	r3, [r3, #8]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	461a      	mov	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7a5b      	ldrb	r3, [r3, #9]
 8000e70:	461a      	mov	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7a9b      	ldrb	r3, [r3, #10]
 8000e7c:	025b      	lsls	r3, r3, #9
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	601a      	str	r2, [r3, #0]

}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <SPI_SendData>:
 * @return            -
 *
 * @Note              - This is blocking call
 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000ec8:	e027      	b.n	8000f1a <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 8000eca:	bf00      	nop
 8000ecc:	2102      	movs	r1, #2
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f7ff ffe1 	bl	8000e96 <SPI_GetFlagStatus>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00e      	beq.n	8000f04 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	60da      	str	r2, [r3, #12]
			Len--;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
			Len--;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	e00a      	b.n	8000f1a <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	60da      	str	r2, [r3, #12]
			Len--;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3301      	adds	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1d4      	bne.n	8000eca <SPI_SendData+0xe>
		}
	}

}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <SPI_ReceiveData>:
 * @return            -
 *
 * @Note              -
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000f36:	e027      	b.n	8000f88 <SPI_ReceiveData+0x5e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8000f38:	bf00      	nop
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff ffaa 	bl	8000e96 <SPI_GetFlagStatus>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f8      	beq.n	8000f3a <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00e      	beq.n	8000f72 <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	801a      	strh	r2, [r3, #0]
				Len--;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
				Len--;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	e00a      	b.n	8000f88 <SPI_ReceiveData+0x5e>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	701a      	strb	r2, [r3, #0]
				Len--;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1d4      	bne.n	8000f38 <SPI_ReceiveData+0xe>
			}
		}

}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d106      	bne.n	8000fb8 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000fb6:	e005      	b.n	8000fc4 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d106      	bne.n	8000fee <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f043 0204 	orr.w	r2, r3, #4
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000fec:	e005      	b.n	8000ffa <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f023 0204 	bic.w	r2, r3, #4
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	605a      	str	r2, [r3, #4]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <__libc_init_array>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	4d0d      	ldr	r5, [pc, #52]	; (800103c <__libc_init_array+0x38>)
 8001008:	4c0d      	ldr	r4, [pc, #52]	; (8001040 <__libc_init_array+0x3c>)
 800100a:	1b64      	subs	r4, r4, r5
 800100c:	10a4      	asrs	r4, r4, #2
 800100e:	2600      	movs	r6, #0
 8001010:	42a6      	cmp	r6, r4
 8001012:	d109      	bne.n	8001028 <__libc_init_array+0x24>
 8001014:	4d0b      	ldr	r5, [pc, #44]	; (8001044 <__libc_init_array+0x40>)
 8001016:	4c0c      	ldr	r4, [pc, #48]	; (8001048 <__libc_init_array+0x44>)
 8001018:	f001 f85a 	bl	80020d0 <_init>
 800101c:	1b64      	subs	r4, r4, r5
 800101e:	10a4      	asrs	r4, r4, #2
 8001020:	2600      	movs	r6, #0
 8001022:	42a6      	cmp	r6, r4
 8001024:	d105      	bne.n	8001032 <__libc_init_array+0x2e>
 8001026:	bd70      	pop	{r4, r5, r6, pc}
 8001028:	f855 3b04 	ldr.w	r3, [r5], #4
 800102c:	4798      	blx	r3
 800102e:	3601      	adds	r6, #1
 8001030:	e7ee      	b.n	8001010 <__libc_init_array+0xc>
 8001032:	f855 3b04 	ldr.w	r3, [r5], #4
 8001036:	4798      	blx	r3
 8001038:	3601      	adds	r6, #1
 800103a:	e7f2      	b.n	8001022 <__libc_init_array+0x1e>
 800103c:	08002254 	.word	0x08002254
 8001040:	08002254 	.word	0x08002254
 8001044:	08002254 	.word	0x08002254
 8001048:	08002258 	.word	0x08002258

0800104c <memset>:
 800104c:	4402      	add	r2, r0
 800104e:	4603      	mov	r3, r0
 8001050:	4293      	cmp	r3, r2
 8001052:	d100      	bne.n	8001056 <memset+0xa>
 8001054:	4770      	bx	lr
 8001056:	f803 1b01 	strb.w	r1, [r3], #1
 800105a:	e7f9      	b.n	8001050 <memset+0x4>

0800105c <iprintf>:
 800105c:	b40f      	push	{r0, r1, r2, r3}
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <iprintf+0x2c>)
 8001060:	b513      	push	{r0, r1, r4, lr}
 8001062:	681c      	ldr	r4, [r3, #0]
 8001064:	b124      	cbz	r4, 8001070 <iprintf+0x14>
 8001066:	69a3      	ldr	r3, [r4, #24]
 8001068:	b913      	cbnz	r3, 8001070 <iprintf+0x14>
 800106a:	4620      	mov	r0, r4
 800106c:	f000 fa5a 	bl	8001524 <__sinit>
 8001070:	ab05      	add	r3, sp, #20
 8001072:	9a04      	ldr	r2, [sp, #16]
 8001074:	68a1      	ldr	r1, [r4, #8]
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	4620      	mov	r0, r4
 800107a:	f000 fc5f 	bl	800193c <_vfiprintf_r>
 800107e:	b002      	add	sp, #8
 8001080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001084:	b004      	add	sp, #16
 8001086:	4770      	bx	lr
 8001088:	20000000 	.word	0x20000000

0800108c <_puts_r>:
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	460e      	mov	r6, r1
 8001090:	4605      	mov	r5, r0
 8001092:	b118      	cbz	r0, 800109c <_puts_r+0x10>
 8001094:	6983      	ldr	r3, [r0, #24]
 8001096:	b90b      	cbnz	r3, 800109c <_puts_r+0x10>
 8001098:	f000 fa44 	bl	8001524 <__sinit>
 800109c:	69ab      	ldr	r3, [r5, #24]
 800109e:	68ac      	ldr	r4, [r5, #8]
 80010a0:	b913      	cbnz	r3, 80010a8 <_puts_r+0x1c>
 80010a2:	4628      	mov	r0, r5
 80010a4:	f000 fa3e 	bl	8001524 <__sinit>
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <_puts_r+0xd0>)
 80010aa:	429c      	cmp	r4, r3
 80010ac:	d120      	bne.n	80010f0 <_puts_r+0x64>
 80010ae:	686c      	ldr	r4, [r5, #4]
 80010b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010b2:	07db      	lsls	r3, r3, #31
 80010b4:	d405      	bmi.n	80010c2 <_puts_r+0x36>
 80010b6:	89a3      	ldrh	r3, [r4, #12]
 80010b8:	0598      	lsls	r0, r3, #22
 80010ba:	d402      	bmi.n	80010c2 <_puts_r+0x36>
 80010bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010be:	f000 facf 	bl	8001660 <__retarget_lock_acquire_recursive>
 80010c2:	89a3      	ldrh	r3, [r4, #12]
 80010c4:	0719      	lsls	r1, r3, #28
 80010c6:	d51d      	bpl.n	8001104 <_puts_r+0x78>
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	b1db      	cbz	r3, 8001104 <_puts_r+0x78>
 80010cc:	3e01      	subs	r6, #1
 80010ce:	68a3      	ldr	r3, [r4, #8]
 80010d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60a3      	str	r3, [r4, #8]
 80010d8:	bb39      	cbnz	r1, 800112a <_puts_r+0x9e>
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da38      	bge.n	8001150 <_puts_r+0xc4>
 80010de:	4622      	mov	r2, r4
 80010e0:	210a      	movs	r1, #10
 80010e2:	4628      	mov	r0, r5
 80010e4:	f000 f848 	bl	8001178 <__swbuf_r>
 80010e8:	3001      	adds	r0, #1
 80010ea:	d011      	beq.n	8001110 <_puts_r+0x84>
 80010ec:	250a      	movs	r5, #10
 80010ee:	e011      	b.n	8001114 <_puts_r+0x88>
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <_puts_r+0xd4>)
 80010f2:	429c      	cmp	r4, r3
 80010f4:	d101      	bne.n	80010fa <_puts_r+0x6e>
 80010f6:	68ac      	ldr	r4, [r5, #8]
 80010f8:	e7da      	b.n	80010b0 <_puts_r+0x24>
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <_puts_r+0xd8>)
 80010fc:	429c      	cmp	r4, r3
 80010fe:	bf08      	it	eq
 8001100:	68ec      	ldreq	r4, [r5, #12]
 8001102:	e7d5      	b.n	80010b0 <_puts_r+0x24>
 8001104:	4621      	mov	r1, r4
 8001106:	4628      	mov	r0, r5
 8001108:	f000 f888 	bl	800121c <__swsetup_r>
 800110c:	2800      	cmp	r0, #0
 800110e:	d0dd      	beq.n	80010cc <_puts_r+0x40>
 8001110:	f04f 35ff 	mov.w	r5, #4294967295
 8001114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001116:	07da      	lsls	r2, r3, #31
 8001118:	d405      	bmi.n	8001126 <_puts_r+0x9a>
 800111a:	89a3      	ldrh	r3, [r4, #12]
 800111c:	059b      	lsls	r3, r3, #22
 800111e:	d402      	bmi.n	8001126 <_puts_r+0x9a>
 8001120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001122:	f000 fa9e 	bl	8001662 <__retarget_lock_release_recursive>
 8001126:	4628      	mov	r0, r5
 8001128:	bd70      	pop	{r4, r5, r6, pc}
 800112a:	2b00      	cmp	r3, #0
 800112c:	da04      	bge.n	8001138 <_puts_r+0xac>
 800112e:	69a2      	ldr	r2, [r4, #24]
 8001130:	429a      	cmp	r2, r3
 8001132:	dc06      	bgt.n	8001142 <_puts_r+0xb6>
 8001134:	290a      	cmp	r1, #10
 8001136:	d004      	beq.n	8001142 <_puts_r+0xb6>
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	6022      	str	r2, [r4, #0]
 800113e:	7019      	strb	r1, [r3, #0]
 8001140:	e7c5      	b.n	80010ce <_puts_r+0x42>
 8001142:	4622      	mov	r2, r4
 8001144:	4628      	mov	r0, r5
 8001146:	f000 f817 	bl	8001178 <__swbuf_r>
 800114a:	3001      	adds	r0, #1
 800114c:	d1bf      	bne.n	80010ce <_puts_r+0x42>
 800114e:	e7df      	b.n	8001110 <_puts_r+0x84>
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	250a      	movs	r5, #10
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	6022      	str	r2, [r4, #0]
 8001158:	701d      	strb	r5, [r3, #0]
 800115a:	e7db      	b.n	8001114 <_puts_r+0x88>
 800115c:	080021e0 	.word	0x080021e0
 8001160:	08002200 	.word	0x08002200
 8001164:	080021c0 	.word	0x080021c0

08001168 <puts>:
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <puts+0xc>)
 800116a:	4601      	mov	r1, r0
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f7ff bf8d 	b.w	800108c <_puts_r>
 8001172:	bf00      	nop
 8001174:	20000000 	.word	0x20000000

08001178 <__swbuf_r>:
 8001178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117a:	460e      	mov	r6, r1
 800117c:	4614      	mov	r4, r2
 800117e:	4605      	mov	r5, r0
 8001180:	b118      	cbz	r0, 800118a <__swbuf_r+0x12>
 8001182:	6983      	ldr	r3, [r0, #24]
 8001184:	b90b      	cbnz	r3, 800118a <__swbuf_r+0x12>
 8001186:	f000 f9cd 	bl	8001524 <__sinit>
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <__swbuf_r+0x98>)
 800118c:	429c      	cmp	r4, r3
 800118e:	d12b      	bne.n	80011e8 <__swbuf_r+0x70>
 8001190:	686c      	ldr	r4, [r5, #4]
 8001192:	69a3      	ldr	r3, [r4, #24]
 8001194:	60a3      	str	r3, [r4, #8]
 8001196:	89a3      	ldrh	r3, [r4, #12]
 8001198:	071a      	lsls	r2, r3, #28
 800119a:	d52f      	bpl.n	80011fc <__swbuf_r+0x84>
 800119c:	6923      	ldr	r3, [r4, #16]
 800119e:	b36b      	cbz	r3, 80011fc <__swbuf_r+0x84>
 80011a0:	6923      	ldr	r3, [r4, #16]
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	1ac0      	subs	r0, r0, r3
 80011a6:	6963      	ldr	r3, [r4, #20]
 80011a8:	b2f6      	uxtb	r6, r6
 80011aa:	4283      	cmp	r3, r0
 80011ac:	4637      	mov	r7, r6
 80011ae:	dc04      	bgt.n	80011ba <__swbuf_r+0x42>
 80011b0:	4621      	mov	r1, r4
 80011b2:	4628      	mov	r0, r5
 80011b4:	f000 f922 	bl	80013fc <_fflush_r>
 80011b8:	bb30      	cbnz	r0, 8001208 <__swbuf_r+0x90>
 80011ba:	68a3      	ldr	r3, [r4, #8]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60a3      	str	r3, [r4, #8]
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	6022      	str	r2, [r4, #0]
 80011c6:	701e      	strb	r6, [r3, #0]
 80011c8:	6963      	ldr	r3, [r4, #20]
 80011ca:	3001      	adds	r0, #1
 80011cc:	4283      	cmp	r3, r0
 80011ce:	d004      	beq.n	80011da <__swbuf_r+0x62>
 80011d0:	89a3      	ldrh	r3, [r4, #12]
 80011d2:	07db      	lsls	r3, r3, #31
 80011d4:	d506      	bpl.n	80011e4 <__swbuf_r+0x6c>
 80011d6:	2e0a      	cmp	r6, #10
 80011d8:	d104      	bne.n	80011e4 <__swbuf_r+0x6c>
 80011da:	4621      	mov	r1, r4
 80011dc:	4628      	mov	r0, r5
 80011de:	f000 f90d 	bl	80013fc <_fflush_r>
 80011e2:	b988      	cbnz	r0, 8001208 <__swbuf_r+0x90>
 80011e4:	4638      	mov	r0, r7
 80011e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <__swbuf_r+0x9c>)
 80011ea:	429c      	cmp	r4, r3
 80011ec:	d101      	bne.n	80011f2 <__swbuf_r+0x7a>
 80011ee:	68ac      	ldr	r4, [r5, #8]
 80011f0:	e7cf      	b.n	8001192 <__swbuf_r+0x1a>
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <__swbuf_r+0xa0>)
 80011f4:	429c      	cmp	r4, r3
 80011f6:	bf08      	it	eq
 80011f8:	68ec      	ldreq	r4, [r5, #12]
 80011fa:	e7ca      	b.n	8001192 <__swbuf_r+0x1a>
 80011fc:	4621      	mov	r1, r4
 80011fe:	4628      	mov	r0, r5
 8001200:	f000 f80c 	bl	800121c <__swsetup_r>
 8001204:	2800      	cmp	r0, #0
 8001206:	d0cb      	beq.n	80011a0 <__swbuf_r+0x28>
 8001208:	f04f 37ff 	mov.w	r7, #4294967295
 800120c:	e7ea      	b.n	80011e4 <__swbuf_r+0x6c>
 800120e:	bf00      	nop
 8001210:	080021e0 	.word	0x080021e0
 8001214:	08002200 	.word	0x08002200
 8001218:	080021c0 	.word	0x080021c0

0800121c <__swsetup_r>:
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <__swsetup_r+0xcc>)
 800121e:	b570      	push	{r4, r5, r6, lr}
 8001220:	681d      	ldr	r5, [r3, #0]
 8001222:	4606      	mov	r6, r0
 8001224:	460c      	mov	r4, r1
 8001226:	b125      	cbz	r5, 8001232 <__swsetup_r+0x16>
 8001228:	69ab      	ldr	r3, [r5, #24]
 800122a:	b913      	cbnz	r3, 8001232 <__swsetup_r+0x16>
 800122c:	4628      	mov	r0, r5
 800122e:	f000 f979 	bl	8001524 <__sinit>
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <__swsetup_r+0xd0>)
 8001234:	429c      	cmp	r4, r3
 8001236:	d10f      	bne.n	8001258 <__swsetup_r+0x3c>
 8001238:	686c      	ldr	r4, [r5, #4]
 800123a:	89a3      	ldrh	r3, [r4, #12]
 800123c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001240:	0719      	lsls	r1, r3, #28
 8001242:	d42c      	bmi.n	800129e <__swsetup_r+0x82>
 8001244:	06dd      	lsls	r5, r3, #27
 8001246:	d411      	bmi.n	800126c <__swsetup_r+0x50>
 8001248:	2309      	movs	r3, #9
 800124a:	6033      	str	r3, [r6, #0]
 800124c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001250:	81a3      	strh	r3, [r4, #12]
 8001252:	f04f 30ff 	mov.w	r0, #4294967295
 8001256:	e03e      	b.n	80012d6 <__swsetup_r+0xba>
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <__swsetup_r+0xd4>)
 800125a:	429c      	cmp	r4, r3
 800125c:	d101      	bne.n	8001262 <__swsetup_r+0x46>
 800125e:	68ac      	ldr	r4, [r5, #8]
 8001260:	e7eb      	b.n	800123a <__swsetup_r+0x1e>
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <__swsetup_r+0xd8>)
 8001264:	429c      	cmp	r4, r3
 8001266:	bf08      	it	eq
 8001268:	68ec      	ldreq	r4, [r5, #12]
 800126a:	e7e6      	b.n	800123a <__swsetup_r+0x1e>
 800126c:	0758      	lsls	r0, r3, #29
 800126e:	d512      	bpl.n	8001296 <__swsetup_r+0x7a>
 8001270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001272:	b141      	cbz	r1, 8001286 <__swsetup_r+0x6a>
 8001274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001278:	4299      	cmp	r1, r3
 800127a:	d002      	beq.n	8001282 <__swsetup_r+0x66>
 800127c:	4630      	mov	r0, r6
 800127e:	f000 fa57 	bl	8001730 <_free_r>
 8001282:	2300      	movs	r3, #0
 8001284:	6363      	str	r3, [r4, #52]	; 0x34
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800128c:	81a3      	strh	r3, [r4, #12]
 800128e:	2300      	movs	r3, #0
 8001290:	6063      	str	r3, [r4, #4]
 8001292:	6923      	ldr	r3, [r4, #16]
 8001294:	6023      	str	r3, [r4, #0]
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	81a3      	strh	r3, [r4, #12]
 800129e:	6923      	ldr	r3, [r4, #16]
 80012a0:	b94b      	cbnz	r3, 80012b6 <__swsetup_r+0x9a>
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ac:	d003      	beq.n	80012b6 <__swsetup_r+0x9a>
 80012ae:	4621      	mov	r1, r4
 80012b0:	4630      	mov	r0, r6
 80012b2:	f000 f9fd 	bl	80016b0 <__smakebuf_r>
 80012b6:	89a0      	ldrh	r0, [r4, #12]
 80012b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012bc:	f010 0301 	ands.w	r3, r0, #1
 80012c0:	d00a      	beq.n	80012d8 <__swsetup_r+0xbc>
 80012c2:	2300      	movs	r3, #0
 80012c4:	60a3      	str	r3, [r4, #8]
 80012c6:	6963      	ldr	r3, [r4, #20]
 80012c8:	425b      	negs	r3, r3
 80012ca:	61a3      	str	r3, [r4, #24]
 80012cc:	6923      	ldr	r3, [r4, #16]
 80012ce:	b943      	cbnz	r3, 80012e2 <__swsetup_r+0xc6>
 80012d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012d4:	d1ba      	bne.n	800124c <__swsetup_r+0x30>
 80012d6:	bd70      	pop	{r4, r5, r6, pc}
 80012d8:	0781      	lsls	r1, r0, #30
 80012da:	bf58      	it	pl
 80012dc:	6963      	ldrpl	r3, [r4, #20]
 80012de:	60a3      	str	r3, [r4, #8]
 80012e0:	e7f4      	b.n	80012cc <__swsetup_r+0xb0>
 80012e2:	2000      	movs	r0, #0
 80012e4:	e7f7      	b.n	80012d6 <__swsetup_r+0xba>
 80012e6:	bf00      	nop
 80012e8:	20000000 	.word	0x20000000
 80012ec:	080021e0 	.word	0x080021e0
 80012f0:	08002200 	.word	0x08002200
 80012f4:	080021c0 	.word	0x080021c0

080012f8 <__sflush_r>:
 80012f8:	898a      	ldrh	r2, [r1, #12]
 80012fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fc:	4605      	mov	r5, r0
 80012fe:	0710      	lsls	r0, r2, #28
 8001300:	460c      	mov	r4, r1
 8001302:	d457      	bmi.n	80013b4 <__sflush_r+0xbc>
 8001304:	684b      	ldr	r3, [r1, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	dc04      	bgt.n	8001314 <__sflush_r+0x1c>
 800130a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800130c:	2b00      	cmp	r3, #0
 800130e:	dc01      	bgt.n	8001314 <__sflush_r+0x1c>
 8001310:	2000      	movs	r0, #0
 8001312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001316:	2e00      	cmp	r6, #0
 8001318:	d0fa      	beq.n	8001310 <__sflush_r+0x18>
 800131a:	2300      	movs	r3, #0
 800131c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001320:	682f      	ldr	r7, [r5, #0]
 8001322:	602b      	str	r3, [r5, #0]
 8001324:	d032      	beq.n	800138c <__sflush_r+0x94>
 8001326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001328:	89a3      	ldrh	r3, [r4, #12]
 800132a:	075a      	lsls	r2, r3, #29
 800132c:	d505      	bpl.n	800133a <__sflush_r+0x42>
 800132e:	6863      	ldr	r3, [r4, #4]
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001334:	b10b      	cbz	r3, 800133a <__sflush_r+0x42>
 8001336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001338:	1ac0      	subs	r0, r0, r3
 800133a:	2300      	movs	r3, #0
 800133c:	4602      	mov	r2, r0
 800133e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001340:	6a21      	ldr	r1, [r4, #32]
 8001342:	4628      	mov	r0, r5
 8001344:	47b0      	blx	r6
 8001346:	1c43      	adds	r3, r0, #1
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	d106      	bne.n	800135a <__sflush_r+0x62>
 800134c:	6829      	ldr	r1, [r5, #0]
 800134e:	291d      	cmp	r1, #29
 8001350:	d82c      	bhi.n	80013ac <__sflush_r+0xb4>
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <__sflush_r+0x100>)
 8001354:	40ca      	lsrs	r2, r1
 8001356:	07d6      	lsls	r6, r2, #31
 8001358:	d528      	bpl.n	80013ac <__sflush_r+0xb4>
 800135a:	2200      	movs	r2, #0
 800135c:	6062      	str	r2, [r4, #4]
 800135e:	04d9      	lsls	r1, r3, #19
 8001360:	6922      	ldr	r2, [r4, #16]
 8001362:	6022      	str	r2, [r4, #0]
 8001364:	d504      	bpl.n	8001370 <__sflush_r+0x78>
 8001366:	1c42      	adds	r2, r0, #1
 8001368:	d101      	bne.n	800136e <__sflush_r+0x76>
 800136a:	682b      	ldr	r3, [r5, #0]
 800136c:	b903      	cbnz	r3, 8001370 <__sflush_r+0x78>
 800136e:	6560      	str	r0, [r4, #84]	; 0x54
 8001370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001372:	602f      	str	r7, [r5, #0]
 8001374:	2900      	cmp	r1, #0
 8001376:	d0cb      	beq.n	8001310 <__sflush_r+0x18>
 8001378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800137c:	4299      	cmp	r1, r3
 800137e:	d002      	beq.n	8001386 <__sflush_r+0x8e>
 8001380:	4628      	mov	r0, r5
 8001382:	f000 f9d5 	bl	8001730 <_free_r>
 8001386:	2000      	movs	r0, #0
 8001388:	6360      	str	r0, [r4, #52]	; 0x34
 800138a:	e7c2      	b.n	8001312 <__sflush_r+0x1a>
 800138c:	6a21      	ldr	r1, [r4, #32]
 800138e:	2301      	movs	r3, #1
 8001390:	4628      	mov	r0, r5
 8001392:	47b0      	blx	r6
 8001394:	1c41      	adds	r1, r0, #1
 8001396:	d1c7      	bne.n	8001328 <__sflush_r+0x30>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0c4      	beq.n	8001328 <__sflush_r+0x30>
 800139e:	2b1d      	cmp	r3, #29
 80013a0:	d001      	beq.n	80013a6 <__sflush_r+0xae>
 80013a2:	2b16      	cmp	r3, #22
 80013a4:	d101      	bne.n	80013aa <__sflush_r+0xb2>
 80013a6:	602f      	str	r7, [r5, #0]
 80013a8:	e7b2      	b.n	8001310 <__sflush_r+0x18>
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	e7ae      	b.n	8001312 <__sflush_r+0x1a>
 80013b4:	690f      	ldr	r7, [r1, #16]
 80013b6:	2f00      	cmp	r7, #0
 80013b8:	d0aa      	beq.n	8001310 <__sflush_r+0x18>
 80013ba:	0793      	lsls	r3, r2, #30
 80013bc:	680e      	ldr	r6, [r1, #0]
 80013be:	bf08      	it	eq
 80013c0:	694b      	ldreq	r3, [r1, #20]
 80013c2:	600f      	str	r7, [r1, #0]
 80013c4:	bf18      	it	ne
 80013c6:	2300      	movne	r3, #0
 80013c8:	1bf6      	subs	r6, r6, r7
 80013ca:	608b      	str	r3, [r1, #8]
 80013cc:	2e00      	cmp	r6, #0
 80013ce:	dd9f      	ble.n	8001310 <__sflush_r+0x18>
 80013d0:	6a21      	ldr	r1, [r4, #32]
 80013d2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80013d6:	4633      	mov	r3, r6
 80013d8:	463a      	mov	r2, r7
 80013da:	4628      	mov	r0, r5
 80013dc:	47e0      	blx	ip
 80013de:	2800      	cmp	r0, #0
 80013e0:	dc06      	bgt.n	80013f0 <__sflush_r+0xf8>
 80013e2:	89a3      	ldrh	r3, [r4, #12]
 80013e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e8:	81a3      	strh	r3, [r4, #12]
 80013ea:	f04f 30ff 	mov.w	r0, #4294967295
 80013ee:	e790      	b.n	8001312 <__sflush_r+0x1a>
 80013f0:	4407      	add	r7, r0
 80013f2:	1a36      	subs	r6, r6, r0
 80013f4:	e7ea      	b.n	80013cc <__sflush_r+0xd4>
 80013f6:	bf00      	nop
 80013f8:	20400001 	.word	0x20400001

080013fc <_fflush_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	690b      	ldr	r3, [r1, #16]
 8001400:	4605      	mov	r5, r0
 8001402:	460c      	mov	r4, r1
 8001404:	b913      	cbnz	r3, 800140c <_fflush_r+0x10>
 8001406:	2500      	movs	r5, #0
 8001408:	4628      	mov	r0, r5
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	b118      	cbz	r0, 8001416 <_fflush_r+0x1a>
 800140e:	6983      	ldr	r3, [r0, #24]
 8001410:	b90b      	cbnz	r3, 8001416 <_fflush_r+0x1a>
 8001412:	f000 f887 	bl	8001524 <__sinit>
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <_fflush_r+0x6c>)
 8001418:	429c      	cmp	r4, r3
 800141a:	d11b      	bne.n	8001454 <_fflush_r+0x58>
 800141c:	686c      	ldr	r4, [r5, #4]
 800141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0ef      	beq.n	8001406 <_fflush_r+0xa>
 8001426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001428:	07d0      	lsls	r0, r2, #31
 800142a:	d404      	bmi.n	8001436 <_fflush_r+0x3a>
 800142c:	0599      	lsls	r1, r3, #22
 800142e:	d402      	bmi.n	8001436 <_fflush_r+0x3a>
 8001430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001432:	f000 f915 	bl	8001660 <__retarget_lock_acquire_recursive>
 8001436:	4628      	mov	r0, r5
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff ff5d 	bl	80012f8 <__sflush_r>
 800143e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001440:	07da      	lsls	r2, r3, #31
 8001442:	4605      	mov	r5, r0
 8001444:	d4e0      	bmi.n	8001408 <_fflush_r+0xc>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	059b      	lsls	r3, r3, #22
 800144a:	d4dd      	bmi.n	8001408 <_fflush_r+0xc>
 800144c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144e:	f000 f908 	bl	8001662 <__retarget_lock_release_recursive>
 8001452:	e7d9      	b.n	8001408 <_fflush_r+0xc>
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <_fflush_r+0x70>)
 8001456:	429c      	cmp	r4, r3
 8001458:	d101      	bne.n	800145e <_fflush_r+0x62>
 800145a:	68ac      	ldr	r4, [r5, #8]
 800145c:	e7df      	b.n	800141e <_fflush_r+0x22>
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <_fflush_r+0x74>)
 8001460:	429c      	cmp	r4, r3
 8001462:	bf08      	it	eq
 8001464:	68ec      	ldreq	r4, [r5, #12]
 8001466:	e7da      	b.n	800141e <_fflush_r+0x22>
 8001468:	080021e0 	.word	0x080021e0
 800146c:	08002200 	.word	0x08002200
 8001470:	080021c0 	.word	0x080021c0

08001474 <std>:
 8001474:	2300      	movs	r3, #0
 8001476:	b510      	push	{r4, lr}
 8001478:	4604      	mov	r4, r0
 800147a:	e9c0 3300 	strd	r3, r3, [r0]
 800147e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001482:	6083      	str	r3, [r0, #8]
 8001484:	8181      	strh	r1, [r0, #12]
 8001486:	6643      	str	r3, [r0, #100]	; 0x64
 8001488:	81c2      	strh	r2, [r0, #14]
 800148a:	6183      	str	r3, [r0, #24]
 800148c:	4619      	mov	r1, r3
 800148e:	2208      	movs	r2, #8
 8001490:	305c      	adds	r0, #92	; 0x5c
 8001492:	f7ff fddb 	bl	800104c <memset>
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <std+0x38>)
 8001498:	6263      	str	r3, [r4, #36]	; 0x24
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <std+0x3c>)
 800149c:	62a3      	str	r3, [r4, #40]	; 0x28
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <std+0x40>)
 80014a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <std+0x44>)
 80014a4:	6224      	str	r4, [r4, #32]
 80014a6:	6323      	str	r3, [r4, #48]	; 0x30
 80014a8:	bd10      	pop	{r4, pc}
 80014aa:	bf00      	nop
 80014ac:	08001ee5 	.word	0x08001ee5
 80014b0:	08001f07 	.word	0x08001f07
 80014b4:	08001f3f 	.word	0x08001f3f
 80014b8:	08001f63 	.word	0x08001f63

080014bc <_cleanup_r>:
 80014bc:	4901      	ldr	r1, [pc, #4]	; (80014c4 <_cleanup_r+0x8>)
 80014be:	f000 b8af 	b.w	8001620 <_fwalk_reent>
 80014c2:	bf00      	nop
 80014c4:	080013fd 	.word	0x080013fd

080014c8 <__sfmoreglue>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	2268      	movs	r2, #104	; 0x68
 80014cc:	1e4d      	subs	r5, r1, #1
 80014ce:	4355      	muls	r5, r2
 80014d0:	460e      	mov	r6, r1
 80014d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014d6:	f000 f995 	bl	8001804 <_malloc_r>
 80014da:	4604      	mov	r4, r0
 80014dc:	b140      	cbz	r0, 80014f0 <__sfmoreglue+0x28>
 80014de:	2100      	movs	r1, #0
 80014e0:	e9c0 1600 	strd	r1, r6, [r0]
 80014e4:	300c      	adds	r0, #12
 80014e6:	60a0      	str	r0, [r4, #8]
 80014e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014ec:	f7ff fdae 	bl	800104c <memset>
 80014f0:	4620      	mov	r0, r4
 80014f2:	bd70      	pop	{r4, r5, r6, pc}

080014f4 <__sfp_lock_acquire>:
 80014f4:	4801      	ldr	r0, [pc, #4]	; (80014fc <__sfp_lock_acquire+0x8>)
 80014f6:	f000 b8b3 	b.w	8001660 <__retarget_lock_acquire_recursive>
 80014fa:	bf00      	nop
 80014fc:	20000081 	.word	0x20000081

08001500 <__sfp_lock_release>:
 8001500:	4801      	ldr	r0, [pc, #4]	; (8001508 <__sfp_lock_release+0x8>)
 8001502:	f000 b8ae 	b.w	8001662 <__retarget_lock_release_recursive>
 8001506:	bf00      	nop
 8001508:	20000081 	.word	0x20000081

0800150c <__sinit_lock_acquire>:
 800150c:	4801      	ldr	r0, [pc, #4]	; (8001514 <__sinit_lock_acquire+0x8>)
 800150e:	f000 b8a7 	b.w	8001660 <__retarget_lock_acquire_recursive>
 8001512:	bf00      	nop
 8001514:	20000082 	.word	0x20000082

08001518 <__sinit_lock_release>:
 8001518:	4801      	ldr	r0, [pc, #4]	; (8001520 <__sinit_lock_release+0x8>)
 800151a:	f000 b8a2 	b.w	8001662 <__retarget_lock_release_recursive>
 800151e:	bf00      	nop
 8001520:	20000082 	.word	0x20000082

08001524 <__sinit>:
 8001524:	b510      	push	{r4, lr}
 8001526:	4604      	mov	r4, r0
 8001528:	f7ff fff0 	bl	800150c <__sinit_lock_acquire>
 800152c:	69a3      	ldr	r3, [r4, #24]
 800152e:	b11b      	cbz	r3, 8001538 <__sinit+0x14>
 8001530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001534:	f7ff bff0 	b.w	8001518 <__sinit_lock_release>
 8001538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800153c:	6523      	str	r3, [r4, #80]	; 0x50
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <__sinit+0x68>)
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <__sinit+0x6c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	62a2      	str	r2, [r4, #40]	; 0x28
 8001546:	42a3      	cmp	r3, r4
 8001548:	bf04      	itt	eq
 800154a:	2301      	moveq	r3, #1
 800154c:	61a3      	streq	r3, [r4, #24]
 800154e:	4620      	mov	r0, r4
 8001550:	f000 f820 	bl	8001594 <__sfp>
 8001554:	6060      	str	r0, [r4, #4]
 8001556:	4620      	mov	r0, r4
 8001558:	f000 f81c 	bl	8001594 <__sfp>
 800155c:	60a0      	str	r0, [r4, #8]
 800155e:	4620      	mov	r0, r4
 8001560:	f000 f818 	bl	8001594 <__sfp>
 8001564:	2200      	movs	r2, #0
 8001566:	60e0      	str	r0, [r4, #12]
 8001568:	2104      	movs	r1, #4
 800156a:	6860      	ldr	r0, [r4, #4]
 800156c:	f7ff ff82 	bl	8001474 <std>
 8001570:	68a0      	ldr	r0, [r4, #8]
 8001572:	2201      	movs	r2, #1
 8001574:	2109      	movs	r1, #9
 8001576:	f7ff ff7d 	bl	8001474 <std>
 800157a:	68e0      	ldr	r0, [r4, #12]
 800157c:	2202      	movs	r2, #2
 800157e:	2112      	movs	r1, #18
 8001580:	f7ff ff78 	bl	8001474 <std>
 8001584:	2301      	movs	r3, #1
 8001586:	61a3      	str	r3, [r4, #24]
 8001588:	e7d2      	b.n	8001530 <__sinit+0xc>
 800158a:	bf00      	nop
 800158c:	080021bc 	.word	0x080021bc
 8001590:	080014bd 	.word	0x080014bd

08001594 <__sfp>:
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	4607      	mov	r7, r0
 8001598:	f7ff ffac 	bl	80014f4 <__sfp_lock_acquire>
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <__sfp+0x84>)
 800159e:	681e      	ldr	r6, [r3, #0]
 80015a0:	69b3      	ldr	r3, [r6, #24]
 80015a2:	b913      	cbnz	r3, 80015aa <__sfp+0x16>
 80015a4:	4630      	mov	r0, r6
 80015a6:	f7ff ffbd 	bl	8001524 <__sinit>
 80015aa:	3648      	adds	r6, #72	; 0x48
 80015ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	d503      	bpl.n	80015bc <__sfp+0x28>
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	b30b      	cbz	r3, 80015fc <__sfp+0x68>
 80015b8:	6836      	ldr	r6, [r6, #0]
 80015ba:	e7f7      	b.n	80015ac <__sfp+0x18>
 80015bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015c0:	b9d5      	cbnz	r5, 80015f8 <__sfp+0x64>
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <__sfp+0x88>)
 80015c4:	60e3      	str	r3, [r4, #12]
 80015c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015ca:	6665      	str	r5, [r4, #100]	; 0x64
 80015cc:	f000 f847 	bl	800165e <__retarget_lock_init_recursive>
 80015d0:	f7ff ff96 	bl	8001500 <__sfp_lock_release>
 80015d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015dc:	6025      	str	r5, [r4, #0]
 80015de:	61a5      	str	r5, [r4, #24]
 80015e0:	2208      	movs	r2, #8
 80015e2:	4629      	mov	r1, r5
 80015e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015e8:	f7ff fd30 	bl	800104c <memset>
 80015ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015f4:	4620      	mov	r0, r4
 80015f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f8:	3468      	adds	r4, #104	; 0x68
 80015fa:	e7d9      	b.n	80015b0 <__sfp+0x1c>
 80015fc:	2104      	movs	r1, #4
 80015fe:	4638      	mov	r0, r7
 8001600:	f7ff ff62 	bl	80014c8 <__sfmoreglue>
 8001604:	4604      	mov	r4, r0
 8001606:	6030      	str	r0, [r6, #0]
 8001608:	2800      	cmp	r0, #0
 800160a:	d1d5      	bne.n	80015b8 <__sfp+0x24>
 800160c:	f7ff ff78 	bl	8001500 <__sfp_lock_release>
 8001610:	230c      	movs	r3, #12
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	e7ee      	b.n	80015f4 <__sfp+0x60>
 8001616:	bf00      	nop
 8001618:	080021bc 	.word	0x080021bc
 800161c:	ffff0001 	.word	0xffff0001

08001620 <_fwalk_reent>:
 8001620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001624:	4606      	mov	r6, r0
 8001626:	4688      	mov	r8, r1
 8001628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800162c:	2700      	movs	r7, #0
 800162e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001632:	f1b9 0901 	subs.w	r9, r9, #1
 8001636:	d505      	bpl.n	8001644 <_fwalk_reent+0x24>
 8001638:	6824      	ldr	r4, [r4, #0]
 800163a:	2c00      	cmp	r4, #0
 800163c:	d1f7      	bne.n	800162e <_fwalk_reent+0xe>
 800163e:	4638      	mov	r0, r7
 8001640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001644:	89ab      	ldrh	r3, [r5, #12]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d907      	bls.n	800165a <_fwalk_reent+0x3a>
 800164a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800164e:	3301      	adds	r3, #1
 8001650:	d003      	beq.n	800165a <_fwalk_reent+0x3a>
 8001652:	4629      	mov	r1, r5
 8001654:	4630      	mov	r0, r6
 8001656:	47c0      	blx	r8
 8001658:	4307      	orrs	r7, r0
 800165a:	3568      	adds	r5, #104	; 0x68
 800165c:	e7e9      	b.n	8001632 <_fwalk_reent+0x12>

0800165e <__retarget_lock_init_recursive>:
 800165e:	4770      	bx	lr

08001660 <__retarget_lock_acquire_recursive>:
 8001660:	4770      	bx	lr

08001662 <__retarget_lock_release_recursive>:
 8001662:	4770      	bx	lr

08001664 <__swhatbuf_r>:
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	460e      	mov	r6, r1
 8001668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800166c:	2900      	cmp	r1, #0
 800166e:	b096      	sub	sp, #88	; 0x58
 8001670:	4614      	mov	r4, r2
 8001672:	461d      	mov	r5, r3
 8001674:	da08      	bge.n	8001688 <__swhatbuf_r+0x24>
 8001676:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	602a      	str	r2, [r5, #0]
 800167e:	061a      	lsls	r2, r3, #24
 8001680:	d410      	bmi.n	80016a4 <__swhatbuf_r+0x40>
 8001682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001686:	e00e      	b.n	80016a6 <__swhatbuf_r+0x42>
 8001688:	466a      	mov	r2, sp
 800168a:	f000 fc91 	bl	8001fb0 <_fstat_r>
 800168e:	2800      	cmp	r0, #0
 8001690:	dbf1      	blt.n	8001676 <__swhatbuf_r+0x12>
 8001692:	9a01      	ldr	r2, [sp, #4]
 8001694:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001698:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800169c:	425a      	negs	r2, r3
 800169e:	415a      	adcs	r2, r3
 80016a0:	602a      	str	r2, [r5, #0]
 80016a2:	e7ee      	b.n	8001682 <__swhatbuf_r+0x1e>
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	2000      	movs	r0, #0
 80016a8:	6023      	str	r3, [r4, #0]
 80016aa:	b016      	add	sp, #88	; 0x58
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080016b0 <__smakebuf_r>:
 80016b0:	898b      	ldrh	r3, [r1, #12]
 80016b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016b4:	079d      	lsls	r5, r3, #30
 80016b6:	4606      	mov	r6, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	d507      	bpl.n	80016cc <__smakebuf_r+0x1c>
 80016bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	6123      	str	r3, [r4, #16]
 80016c4:	2301      	movs	r3, #1
 80016c6:	6163      	str	r3, [r4, #20]
 80016c8:	b002      	add	sp, #8
 80016ca:	bd70      	pop	{r4, r5, r6, pc}
 80016cc:	ab01      	add	r3, sp, #4
 80016ce:	466a      	mov	r2, sp
 80016d0:	f7ff ffc8 	bl	8001664 <__swhatbuf_r>
 80016d4:	9900      	ldr	r1, [sp, #0]
 80016d6:	4605      	mov	r5, r0
 80016d8:	4630      	mov	r0, r6
 80016da:	f000 f893 	bl	8001804 <_malloc_r>
 80016de:	b948      	cbnz	r0, 80016f4 <__smakebuf_r+0x44>
 80016e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016e4:	059a      	lsls	r2, r3, #22
 80016e6:	d4ef      	bmi.n	80016c8 <__smakebuf_r+0x18>
 80016e8:	f023 0303 	bic.w	r3, r3, #3
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	81a3      	strh	r3, [r4, #12]
 80016f2:	e7e3      	b.n	80016bc <__smakebuf_r+0xc>
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <__smakebuf_r+0x7c>)
 80016f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80016f8:	89a3      	ldrh	r3, [r4, #12]
 80016fa:	6020      	str	r0, [r4, #0]
 80016fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001700:	81a3      	strh	r3, [r4, #12]
 8001702:	9b00      	ldr	r3, [sp, #0]
 8001704:	6163      	str	r3, [r4, #20]
 8001706:	9b01      	ldr	r3, [sp, #4]
 8001708:	6120      	str	r0, [r4, #16]
 800170a:	b15b      	cbz	r3, 8001724 <__smakebuf_r+0x74>
 800170c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001710:	4630      	mov	r0, r6
 8001712:	f000 fc5f 	bl	8001fd4 <_isatty_r>
 8001716:	b128      	cbz	r0, 8001724 <__smakebuf_r+0x74>
 8001718:	89a3      	ldrh	r3, [r4, #12]
 800171a:	f023 0303 	bic.w	r3, r3, #3
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	81a3      	strh	r3, [r4, #12]
 8001724:	89a0      	ldrh	r0, [r4, #12]
 8001726:	4305      	orrs	r5, r0
 8001728:	81a5      	strh	r5, [r4, #12]
 800172a:	e7cd      	b.n	80016c8 <__smakebuf_r+0x18>
 800172c:	080014bd 	.word	0x080014bd

08001730 <_free_r>:
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	4605      	mov	r5, r0
 8001734:	2900      	cmp	r1, #0
 8001736:	d041      	beq.n	80017bc <_free_r+0x8c>
 8001738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800173c:	1f0c      	subs	r4, r1, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	bfb8      	it	lt
 8001742:	18e4      	addlt	r4, r4, r3
 8001744:	f000 fc68 	bl	8002018 <__malloc_lock>
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <_free_r+0x90>)
 800174a:	6813      	ldr	r3, [r2, #0]
 800174c:	b933      	cbnz	r3, 800175c <_free_r+0x2c>
 800174e:	6063      	str	r3, [r4, #4]
 8001750:	6014      	str	r4, [r2, #0]
 8001752:	4628      	mov	r0, r5
 8001754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001758:	f000 bc64 	b.w	8002024 <__malloc_unlock>
 800175c:	42a3      	cmp	r3, r4
 800175e:	d908      	bls.n	8001772 <_free_r+0x42>
 8001760:	6820      	ldr	r0, [r4, #0]
 8001762:	1821      	adds	r1, r4, r0
 8001764:	428b      	cmp	r3, r1
 8001766:	bf01      	itttt	eq
 8001768:	6819      	ldreq	r1, [r3, #0]
 800176a:	685b      	ldreq	r3, [r3, #4]
 800176c:	1809      	addeq	r1, r1, r0
 800176e:	6021      	streq	r1, [r4, #0]
 8001770:	e7ed      	b.n	800174e <_free_r+0x1e>
 8001772:	461a      	mov	r2, r3
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	b10b      	cbz	r3, 800177c <_free_r+0x4c>
 8001778:	42a3      	cmp	r3, r4
 800177a:	d9fa      	bls.n	8001772 <_free_r+0x42>
 800177c:	6811      	ldr	r1, [r2, #0]
 800177e:	1850      	adds	r0, r2, r1
 8001780:	42a0      	cmp	r0, r4
 8001782:	d10b      	bne.n	800179c <_free_r+0x6c>
 8001784:	6820      	ldr	r0, [r4, #0]
 8001786:	4401      	add	r1, r0
 8001788:	1850      	adds	r0, r2, r1
 800178a:	4283      	cmp	r3, r0
 800178c:	6011      	str	r1, [r2, #0]
 800178e:	d1e0      	bne.n	8001752 <_free_r+0x22>
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	6053      	str	r3, [r2, #4]
 8001796:	4401      	add	r1, r0
 8001798:	6011      	str	r1, [r2, #0]
 800179a:	e7da      	b.n	8001752 <_free_r+0x22>
 800179c:	d902      	bls.n	80017a4 <_free_r+0x74>
 800179e:	230c      	movs	r3, #12
 80017a0:	602b      	str	r3, [r5, #0]
 80017a2:	e7d6      	b.n	8001752 <_free_r+0x22>
 80017a4:	6820      	ldr	r0, [r4, #0]
 80017a6:	1821      	adds	r1, r4, r0
 80017a8:	428b      	cmp	r3, r1
 80017aa:	bf04      	itt	eq
 80017ac:	6819      	ldreq	r1, [r3, #0]
 80017ae:	685b      	ldreq	r3, [r3, #4]
 80017b0:	6063      	str	r3, [r4, #4]
 80017b2:	bf04      	itt	eq
 80017b4:	1809      	addeq	r1, r1, r0
 80017b6:	6021      	streq	r1, [r4, #0]
 80017b8:	6054      	str	r4, [r2, #4]
 80017ba:	e7ca      	b.n	8001752 <_free_r+0x22>
 80017bc:	bd38      	pop	{r3, r4, r5, pc}
 80017be:	bf00      	nop
 80017c0:	20000084 	.word	0x20000084

080017c4 <sbrk_aligned>:
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	4e0e      	ldr	r6, [pc, #56]	; (8001800 <sbrk_aligned+0x3c>)
 80017c8:	460c      	mov	r4, r1
 80017ca:	6831      	ldr	r1, [r6, #0]
 80017cc:	4605      	mov	r5, r0
 80017ce:	b911      	cbnz	r1, 80017d6 <sbrk_aligned+0x12>
 80017d0:	f000 fb78 	bl	8001ec4 <_sbrk_r>
 80017d4:	6030      	str	r0, [r6, #0]
 80017d6:	4621      	mov	r1, r4
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 fb73 	bl	8001ec4 <_sbrk_r>
 80017de:	1c43      	adds	r3, r0, #1
 80017e0:	d00a      	beq.n	80017f8 <sbrk_aligned+0x34>
 80017e2:	1cc4      	adds	r4, r0, #3
 80017e4:	f024 0403 	bic.w	r4, r4, #3
 80017e8:	42a0      	cmp	r0, r4
 80017ea:	d007      	beq.n	80017fc <sbrk_aligned+0x38>
 80017ec:	1a21      	subs	r1, r4, r0
 80017ee:	4628      	mov	r0, r5
 80017f0:	f000 fb68 	bl	8001ec4 <_sbrk_r>
 80017f4:	3001      	adds	r0, #1
 80017f6:	d101      	bne.n	80017fc <sbrk_aligned+0x38>
 80017f8:	f04f 34ff 	mov.w	r4, #4294967295
 80017fc:	4620      	mov	r0, r4
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
 8001800:	20000088 	.word	0x20000088

08001804 <_malloc_r>:
 8001804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001808:	1ccd      	adds	r5, r1, #3
 800180a:	f025 0503 	bic.w	r5, r5, #3
 800180e:	3508      	adds	r5, #8
 8001810:	2d0c      	cmp	r5, #12
 8001812:	bf38      	it	cc
 8001814:	250c      	movcc	r5, #12
 8001816:	2d00      	cmp	r5, #0
 8001818:	4607      	mov	r7, r0
 800181a:	db01      	blt.n	8001820 <_malloc_r+0x1c>
 800181c:	42a9      	cmp	r1, r5
 800181e:	d905      	bls.n	800182c <_malloc_r+0x28>
 8001820:	230c      	movs	r3, #12
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	2600      	movs	r6, #0
 8001826:	4630      	mov	r0, r6
 8001828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800182c:	4e2e      	ldr	r6, [pc, #184]	; (80018e8 <_malloc_r+0xe4>)
 800182e:	f000 fbf3 	bl	8002018 <__malloc_lock>
 8001832:	6833      	ldr	r3, [r6, #0]
 8001834:	461c      	mov	r4, r3
 8001836:	bb34      	cbnz	r4, 8001886 <_malloc_r+0x82>
 8001838:	4629      	mov	r1, r5
 800183a:	4638      	mov	r0, r7
 800183c:	f7ff ffc2 	bl	80017c4 <sbrk_aligned>
 8001840:	1c43      	adds	r3, r0, #1
 8001842:	4604      	mov	r4, r0
 8001844:	d14d      	bne.n	80018e2 <_malloc_r+0xde>
 8001846:	6834      	ldr	r4, [r6, #0]
 8001848:	4626      	mov	r6, r4
 800184a:	2e00      	cmp	r6, #0
 800184c:	d140      	bne.n	80018d0 <_malloc_r+0xcc>
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	4631      	mov	r1, r6
 8001852:	4638      	mov	r0, r7
 8001854:	eb04 0803 	add.w	r8, r4, r3
 8001858:	f000 fb34 	bl	8001ec4 <_sbrk_r>
 800185c:	4580      	cmp	r8, r0
 800185e:	d13a      	bne.n	80018d6 <_malloc_r+0xd2>
 8001860:	6821      	ldr	r1, [r4, #0]
 8001862:	3503      	adds	r5, #3
 8001864:	1a6d      	subs	r5, r5, r1
 8001866:	f025 0503 	bic.w	r5, r5, #3
 800186a:	3508      	adds	r5, #8
 800186c:	2d0c      	cmp	r5, #12
 800186e:	bf38      	it	cc
 8001870:	250c      	movcc	r5, #12
 8001872:	4629      	mov	r1, r5
 8001874:	4638      	mov	r0, r7
 8001876:	f7ff ffa5 	bl	80017c4 <sbrk_aligned>
 800187a:	3001      	adds	r0, #1
 800187c:	d02b      	beq.n	80018d6 <_malloc_r+0xd2>
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	442b      	add	r3, r5
 8001882:	6023      	str	r3, [r4, #0]
 8001884:	e00e      	b.n	80018a4 <_malloc_r+0xa0>
 8001886:	6822      	ldr	r2, [r4, #0]
 8001888:	1b52      	subs	r2, r2, r5
 800188a:	d41e      	bmi.n	80018ca <_malloc_r+0xc6>
 800188c:	2a0b      	cmp	r2, #11
 800188e:	d916      	bls.n	80018be <_malloc_r+0xba>
 8001890:	1961      	adds	r1, r4, r5
 8001892:	42a3      	cmp	r3, r4
 8001894:	6025      	str	r5, [r4, #0]
 8001896:	bf18      	it	ne
 8001898:	6059      	strne	r1, [r3, #4]
 800189a:	6863      	ldr	r3, [r4, #4]
 800189c:	bf08      	it	eq
 800189e:	6031      	streq	r1, [r6, #0]
 80018a0:	5162      	str	r2, [r4, r5]
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	4638      	mov	r0, r7
 80018a6:	f104 060b 	add.w	r6, r4, #11
 80018aa:	f000 fbbb 	bl	8002024 <__malloc_unlock>
 80018ae:	f026 0607 	bic.w	r6, r6, #7
 80018b2:	1d23      	adds	r3, r4, #4
 80018b4:	1af2      	subs	r2, r6, r3
 80018b6:	d0b6      	beq.n	8001826 <_malloc_r+0x22>
 80018b8:	1b9b      	subs	r3, r3, r6
 80018ba:	50a3      	str	r3, [r4, r2]
 80018bc:	e7b3      	b.n	8001826 <_malloc_r+0x22>
 80018be:	6862      	ldr	r2, [r4, #4]
 80018c0:	42a3      	cmp	r3, r4
 80018c2:	bf0c      	ite	eq
 80018c4:	6032      	streq	r2, [r6, #0]
 80018c6:	605a      	strne	r2, [r3, #4]
 80018c8:	e7ec      	b.n	80018a4 <_malloc_r+0xa0>
 80018ca:	4623      	mov	r3, r4
 80018cc:	6864      	ldr	r4, [r4, #4]
 80018ce:	e7b2      	b.n	8001836 <_malloc_r+0x32>
 80018d0:	4634      	mov	r4, r6
 80018d2:	6876      	ldr	r6, [r6, #4]
 80018d4:	e7b9      	b.n	800184a <_malloc_r+0x46>
 80018d6:	230c      	movs	r3, #12
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4638      	mov	r0, r7
 80018dc:	f000 fba2 	bl	8002024 <__malloc_unlock>
 80018e0:	e7a1      	b.n	8001826 <_malloc_r+0x22>
 80018e2:	6025      	str	r5, [r4, #0]
 80018e4:	e7de      	b.n	80018a4 <_malloc_r+0xa0>
 80018e6:	bf00      	nop
 80018e8:	20000084 	.word	0x20000084

080018ec <__sfputc_r>:
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	b410      	push	{r4}
 80018f4:	6093      	str	r3, [r2, #8]
 80018f6:	da07      	bge.n	8001908 <__sfputc_r+0x1c>
 80018f8:	6994      	ldr	r4, [r2, #24]
 80018fa:	42a3      	cmp	r3, r4
 80018fc:	db01      	blt.n	8001902 <__sfputc_r+0x16>
 80018fe:	290a      	cmp	r1, #10
 8001900:	d102      	bne.n	8001908 <__sfputc_r+0x1c>
 8001902:	bc10      	pop	{r4}
 8001904:	f7ff bc38 	b.w	8001178 <__swbuf_r>
 8001908:	6813      	ldr	r3, [r2, #0]
 800190a:	1c58      	adds	r0, r3, #1
 800190c:	6010      	str	r0, [r2, #0]
 800190e:	7019      	strb	r1, [r3, #0]
 8001910:	4608      	mov	r0, r1
 8001912:	bc10      	pop	{r4}
 8001914:	4770      	bx	lr

08001916 <__sfputs_r>:
 8001916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001918:	4606      	mov	r6, r0
 800191a:	460f      	mov	r7, r1
 800191c:	4614      	mov	r4, r2
 800191e:	18d5      	adds	r5, r2, r3
 8001920:	42ac      	cmp	r4, r5
 8001922:	d101      	bne.n	8001928 <__sfputs_r+0x12>
 8001924:	2000      	movs	r0, #0
 8001926:	e007      	b.n	8001938 <__sfputs_r+0x22>
 8001928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800192c:	463a      	mov	r2, r7
 800192e:	4630      	mov	r0, r6
 8001930:	f7ff ffdc 	bl	80018ec <__sfputc_r>
 8001934:	1c43      	adds	r3, r0, #1
 8001936:	d1f3      	bne.n	8001920 <__sfputs_r+0xa>
 8001938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800193c <_vfiprintf_r>:
 800193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001940:	460d      	mov	r5, r1
 8001942:	b09d      	sub	sp, #116	; 0x74
 8001944:	4614      	mov	r4, r2
 8001946:	4698      	mov	r8, r3
 8001948:	4606      	mov	r6, r0
 800194a:	b118      	cbz	r0, 8001954 <_vfiprintf_r+0x18>
 800194c:	6983      	ldr	r3, [r0, #24]
 800194e:	b90b      	cbnz	r3, 8001954 <_vfiprintf_r+0x18>
 8001950:	f7ff fde8 	bl	8001524 <__sinit>
 8001954:	4b89      	ldr	r3, [pc, #548]	; (8001b7c <_vfiprintf_r+0x240>)
 8001956:	429d      	cmp	r5, r3
 8001958:	d11b      	bne.n	8001992 <_vfiprintf_r+0x56>
 800195a:	6875      	ldr	r5, [r6, #4]
 800195c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800195e:	07d9      	lsls	r1, r3, #31
 8001960:	d405      	bmi.n	800196e <_vfiprintf_r+0x32>
 8001962:	89ab      	ldrh	r3, [r5, #12]
 8001964:	059a      	lsls	r2, r3, #22
 8001966:	d402      	bmi.n	800196e <_vfiprintf_r+0x32>
 8001968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800196a:	f7ff fe79 	bl	8001660 <__retarget_lock_acquire_recursive>
 800196e:	89ab      	ldrh	r3, [r5, #12]
 8001970:	071b      	lsls	r3, r3, #28
 8001972:	d501      	bpl.n	8001978 <_vfiprintf_r+0x3c>
 8001974:	692b      	ldr	r3, [r5, #16]
 8001976:	b9eb      	cbnz	r3, 80019b4 <_vfiprintf_r+0x78>
 8001978:	4629      	mov	r1, r5
 800197a:	4630      	mov	r0, r6
 800197c:	f7ff fc4e 	bl	800121c <__swsetup_r>
 8001980:	b1c0      	cbz	r0, 80019b4 <_vfiprintf_r+0x78>
 8001982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001984:	07dc      	lsls	r4, r3, #31
 8001986:	d50e      	bpl.n	80019a6 <_vfiprintf_r+0x6a>
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	b01d      	add	sp, #116	; 0x74
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <_vfiprintf_r+0x244>)
 8001994:	429d      	cmp	r5, r3
 8001996:	d101      	bne.n	800199c <_vfiprintf_r+0x60>
 8001998:	68b5      	ldr	r5, [r6, #8]
 800199a:	e7df      	b.n	800195c <_vfiprintf_r+0x20>
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <_vfiprintf_r+0x248>)
 800199e:	429d      	cmp	r5, r3
 80019a0:	bf08      	it	eq
 80019a2:	68f5      	ldreq	r5, [r6, #12]
 80019a4:	e7da      	b.n	800195c <_vfiprintf_r+0x20>
 80019a6:	89ab      	ldrh	r3, [r5, #12]
 80019a8:	0598      	lsls	r0, r3, #22
 80019aa:	d4ed      	bmi.n	8001988 <_vfiprintf_r+0x4c>
 80019ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019ae:	f7ff fe58 	bl	8001662 <__retarget_lock_release_recursive>
 80019b2:	e7e9      	b.n	8001988 <_vfiprintf_r+0x4c>
 80019b4:	2300      	movs	r3, #0
 80019b6:	9309      	str	r3, [sp, #36]	; 0x24
 80019b8:	2320      	movs	r3, #32
 80019ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019be:	f8cd 800c 	str.w	r8, [sp, #12]
 80019c2:	2330      	movs	r3, #48	; 0x30
 80019c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001b88 <_vfiprintf_r+0x24c>
 80019c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019cc:	f04f 0901 	mov.w	r9, #1
 80019d0:	4623      	mov	r3, r4
 80019d2:	469a      	mov	sl, r3
 80019d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019d8:	b10a      	cbz	r2, 80019de <_vfiprintf_r+0xa2>
 80019da:	2a25      	cmp	r2, #37	; 0x25
 80019dc:	d1f9      	bne.n	80019d2 <_vfiprintf_r+0x96>
 80019de:	ebba 0b04 	subs.w	fp, sl, r4
 80019e2:	d00b      	beq.n	80019fc <_vfiprintf_r+0xc0>
 80019e4:	465b      	mov	r3, fp
 80019e6:	4622      	mov	r2, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	4630      	mov	r0, r6
 80019ec:	f7ff ff93 	bl	8001916 <__sfputs_r>
 80019f0:	3001      	adds	r0, #1
 80019f2:	f000 80aa 	beq.w	8001b4a <_vfiprintf_r+0x20e>
 80019f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019f8:	445a      	add	r2, fp
 80019fa:	9209      	str	r2, [sp, #36]	; 0x24
 80019fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a2 	beq.w	8001b4a <_vfiprintf_r+0x20e>
 8001a06:	2300      	movs	r3, #0
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a10:	f10a 0a01 	add.w	sl, sl, #1
 8001a14:	9304      	str	r3, [sp, #16]
 8001a16:	9307      	str	r3, [sp, #28]
 8001a18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a1c:	931a      	str	r3, [sp, #104]	; 0x68
 8001a1e:	4654      	mov	r4, sl
 8001a20:	2205      	movs	r2, #5
 8001a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a26:	4858      	ldr	r0, [pc, #352]	; (8001b88 <_vfiprintf_r+0x24c>)
 8001a28:	f7fe fbea 	bl	8000200 <memchr>
 8001a2c:	9a04      	ldr	r2, [sp, #16]
 8001a2e:	b9d8      	cbnz	r0, 8001a68 <_vfiprintf_r+0x12c>
 8001a30:	06d1      	lsls	r1, r2, #27
 8001a32:	bf44      	itt	mi
 8001a34:	2320      	movmi	r3, #32
 8001a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a3a:	0713      	lsls	r3, r2, #28
 8001a3c:	bf44      	itt	mi
 8001a3e:	232b      	movmi	r3, #43	; 0x2b
 8001a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a44:	f89a 3000 	ldrb.w	r3, [sl]
 8001a48:	2b2a      	cmp	r3, #42	; 0x2a
 8001a4a:	d015      	beq.n	8001a78 <_vfiprintf_r+0x13c>
 8001a4c:	9a07      	ldr	r2, [sp, #28]
 8001a4e:	4654      	mov	r4, sl
 8001a50:	2000      	movs	r0, #0
 8001a52:	f04f 0c0a 	mov.w	ip, #10
 8001a56:	4621      	mov	r1, r4
 8001a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a5c:	3b30      	subs	r3, #48	; 0x30
 8001a5e:	2b09      	cmp	r3, #9
 8001a60:	d94e      	bls.n	8001b00 <_vfiprintf_r+0x1c4>
 8001a62:	b1b0      	cbz	r0, 8001a92 <_vfiprintf_r+0x156>
 8001a64:	9207      	str	r2, [sp, #28]
 8001a66:	e014      	b.n	8001a92 <_vfiprintf_r+0x156>
 8001a68:	eba0 0308 	sub.w	r3, r0, r8
 8001a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	9304      	str	r3, [sp, #16]
 8001a74:	46a2      	mov	sl, r4
 8001a76:	e7d2      	b.n	8001a1e <_vfiprintf_r+0xe2>
 8001a78:	9b03      	ldr	r3, [sp, #12]
 8001a7a:	1d19      	adds	r1, r3, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	9103      	str	r1, [sp, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bfbb      	ittet	lt
 8001a84:	425b      	neglt	r3, r3
 8001a86:	f042 0202 	orrlt.w	r2, r2, #2
 8001a8a:	9307      	strge	r3, [sp, #28]
 8001a8c:	9307      	strlt	r3, [sp, #28]
 8001a8e:	bfb8      	it	lt
 8001a90:	9204      	strlt	r2, [sp, #16]
 8001a92:	7823      	ldrb	r3, [r4, #0]
 8001a94:	2b2e      	cmp	r3, #46	; 0x2e
 8001a96:	d10c      	bne.n	8001ab2 <_vfiprintf_r+0x176>
 8001a98:	7863      	ldrb	r3, [r4, #1]
 8001a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a9c:	d135      	bne.n	8001b0a <_vfiprintf_r+0x1ce>
 8001a9e:	9b03      	ldr	r3, [sp, #12]
 8001aa0:	1d1a      	adds	r2, r3, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	9203      	str	r2, [sp, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bfb8      	it	lt
 8001aaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8001aae:	3402      	adds	r4, #2
 8001ab0:	9305      	str	r3, [sp, #20]
 8001ab2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001b8c <_vfiprintf_r+0x250>
 8001ab6:	7821      	ldrb	r1, [r4, #0]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4650      	mov	r0, sl
 8001abc:	f7fe fba0 	bl	8000200 <memchr>
 8001ac0:	b140      	cbz	r0, 8001ad4 <_vfiprintf_r+0x198>
 8001ac2:	2340      	movs	r3, #64	; 0x40
 8001ac4:	eba0 000a 	sub.w	r0, r0, sl
 8001ac8:	fa03 f000 	lsl.w	r0, r3, r0
 8001acc:	9b04      	ldr	r3, [sp, #16]
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	3401      	adds	r4, #1
 8001ad2:	9304      	str	r3, [sp, #16]
 8001ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ad8:	482d      	ldr	r0, [pc, #180]	; (8001b90 <_vfiprintf_r+0x254>)
 8001ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ade:	2206      	movs	r2, #6
 8001ae0:	f7fe fb8e 	bl	8000200 <memchr>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d03f      	beq.n	8001b68 <_vfiprintf_r+0x22c>
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <_vfiprintf_r+0x258>)
 8001aea:	bb1b      	cbnz	r3, 8001b34 <_vfiprintf_r+0x1f8>
 8001aec:	9b03      	ldr	r3, [sp, #12]
 8001aee:	3307      	adds	r3, #7
 8001af0:	f023 0307 	bic.w	r3, r3, #7
 8001af4:	3308      	adds	r3, #8
 8001af6:	9303      	str	r3, [sp, #12]
 8001af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001afa:	443b      	add	r3, r7
 8001afc:	9309      	str	r3, [sp, #36]	; 0x24
 8001afe:	e767      	b.n	80019d0 <_vfiprintf_r+0x94>
 8001b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b04:	460c      	mov	r4, r1
 8001b06:	2001      	movs	r0, #1
 8001b08:	e7a5      	b.n	8001a56 <_vfiprintf_r+0x11a>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	3401      	adds	r4, #1
 8001b0e:	9305      	str	r3, [sp, #20]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 0c0a 	mov.w	ip, #10
 8001b16:	4620      	mov	r0, r4
 8001b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b1c:	3a30      	subs	r2, #48	; 0x30
 8001b1e:	2a09      	cmp	r2, #9
 8001b20:	d903      	bls.n	8001b2a <_vfiprintf_r+0x1ee>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0c5      	beq.n	8001ab2 <_vfiprintf_r+0x176>
 8001b26:	9105      	str	r1, [sp, #20]
 8001b28:	e7c3      	b.n	8001ab2 <_vfiprintf_r+0x176>
 8001b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b2e:	4604      	mov	r4, r0
 8001b30:	2301      	movs	r3, #1
 8001b32:	e7f0      	b.n	8001b16 <_vfiprintf_r+0x1da>
 8001b34:	ab03      	add	r3, sp, #12
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	462a      	mov	r2, r5
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <_vfiprintf_r+0x25c>)
 8001b3c:	a904      	add	r1, sp, #16
 8001b3e:	4630      	mov	r0, r6
 8001b40:	f3af 8000 	nop.w
 8001b44:	4607      	mov	r7, r0
 8001b46:	1c78      	adds	r0, r7, #1
 8001b48:	d1d6      	bne.n	8001af8 <_vfiprintf_r+0x1bc>
 8001b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b4c:	07d9      	lsls	r1, r3, #31
 8001b4e:	d405      	bmi.n	8001b5c <_vfiprintf_r+0x220>
 8001b50:	89ab      	ldrh	r3, [r5, #12]
 8001b52:	059a      	lsls	r2, r3, #22
 8001b54:	d402      	bmi.n	8001b5c <_vfiprintf_r+0x220>
 8001b56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b58:	f7ff fd83 	bl	8001662 <__retarget_lock_release_recursive>
 8001b5c:	89ab      	ldrh	r3, [r5, #12]
 8001b5e:	065b      	lsls	r3, r3, #25
 8001b60:	f53f af12 	bmi.w	8001988 <_vfiprintf_r+0x4c>
 8001b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b66:	e711      	b.n	800198c <_vfiprintf_r+0x50>
 8001b68:	ab03      	add	r3, sp, #12
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	462a      	mov	r2, r5
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <_vfiprintf_r+0x25c>)
 8001b70:	a904      	add	r1, sp, #16
 8001b72:	4630      	mov	r0, r6
 8001b74:	f000 f880 	bl	8001c78 <_printf_i>
 8001b78:	e7e4      	b.n	8001b44 <_vfiprintf_r+0x208>
 8001b7a:	bf00      	nop
 8001b7c:	080021e0 	.word	0x080021e0
 8001b80:	08002200 	.word	0x08002200
 8001b84:	080021c0 	.word	0x080021c0
 8001b88:	08002220 	.word	0x08002220
 8001b8c:	08002226 	.word	0x08002226
 8001b90:	0800222a 	.word	0x0800222a
 8001b94:	00000000 	.word	0x00000000
 8001b98:	08001917 	.word	0x08001917

08001b9c <_printf_common>:
 8001b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ba0:	4616      	mov	r6, r2
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	688a      	ldr	r2, [r1, #8]
 8001ba6:	690b      	ldr	r3, [r1, #16]
 8001ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bac:	4293      	cmp	r3, r2
 8001bae:	bfb8      	it	lt
 8001bb0:	4613      	movlt	r3, r2
 8001bb2:	6033      	str	r3, [r6, #0]
 8001bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bb8:	4607      	mov	r7, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	b10a      	cbz	r2, 8001bc2 <_printf_common+0x26>
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	6033      	str	r3, [r6, #0]
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	0699      	lsls	r1, r3, #26
 8001bc6:	bf42      	ittt	mi
 8001bc8:	6833      	ldrmi	r3, [r6, #0]
 8001bca:	3302      	addmi	r3, #2
 8001bcc:	6033      	strmi	r3, [r6, #0]
 8001bce:	6825      	ldr	r5, [r4, #0]
 8001bd0:	f015 0506 	ands.w	r5, r5, #6
 8001bd4:	d106      	bne.n	8001be4 <_printf_common+0x48>
 8001bd6:	f104 0a19 	add.w	sl, r4, #25
 8001bda:	68e3      	ldr	r3, [r4, #12]
 8001bdc:	6832      	ldr	r2, [r6, #0]
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	42ab      	cmp	r3, r5
 8001be2:	dc26      	bgt.n	8001c32 <_printf_common+0x96>
 8001be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001be8:	1e13      	subs	r3, r2, #0
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	bf18      	it	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	0692      	lsls	r2, r2, #26
 8001bf2:	d42b      	bmi.n	8001c4c <_printf_common+0xb0>
 8001bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	4638      	mov	r0, r7
 8001bfc:	47c0      	blx	r8
 8001bfe:	3001      	adds	r0, #1
 8001c00:	d01e      	beq.n	8001c40 <_printf_common+0xa4>
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	68e5      	ldr	r5, [r4, #12]
 8001c06:	6832      	ldr	r2, [r6, #0]
 8001c08:	f003 0306 	and.w	r3, r3, #6
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	bf08      	it	eq
 8001c10:	1aad      	subeq	r5, r5, r2
 8001c12:	68a3      	ldr	r3, [r4, #8]
 8001c14:	6922      	ldr	r2, [r4, #16]
 8001c16:	bf0c      	ite	eq
 8001c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c1c:	2500      	movne	r5, #0
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	bfc4      	itt	gt
 8001c22:	1a9b      	subgt	r3, r3, r2
 8001c24:	18ed      	addgt	r5, r5, r3
 8001c26:	2600      	movs	r6, #0
 8001c28:	341a      	adds	r4, #26
 8001c2a:	42b5      	cmp	r5, r6
 8001c2c:	d11a      	bne.n	8001c64 <_printf_common+0xc8>
 8001c2e:	2000      	movs	r0, #0
 8001c30:	e008      	b.n	8001c44 <_printf_common+0xa8>
 8001c32:	2301      	movs	r3, #1
 8001c34:	4652      	mov	r2, sl
 8001c36:	4649      	mov	r1, r9
 8001c38:	4638      	mov	r0, r7
 8001c3a:	47c0      	blx	r8
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	d103      	bne.n	8001c48 <_printf_common+0xac>
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c48:	3501      	adds	r5, #1
 8001c4a:	e7c6      	b.n	8001bda <_printf_common+0x3e>
 8001c4c:	18e1      	adds	r1, r4, r3
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	2030      	movs	r0, #48	; 0x30
 8001c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c56:	4422      	add	r2, r4
 8001c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c60:	3302      	adds	r3, #2
 8001c62:	e7c7      	b.n	8001bf4 <_printf_common+0x58>
 8001c64:	2301      	movs	r3, #1
 8001c66:	4622      	mov	r2, r4
 8001c68:	4649      	mov	r1, r9
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	47c0      	blx	r8
 8001c6e:	3001      	adds	r0, #1
 8001c70:	d0e6      	beq.n	8001c40 <_printf_common+0xa4>
 8001c72:	3601      	adds	r6, #1
 8001c74:	e7d9      	b.n	8001c2a <_printf_common+0x8e>
	...

08001c78 <_printf_i>:
 8001c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c7c:	7e0f      	ldrb	r7, [r1, #24]
 8001c7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c80:	2f78      	cmp	r7, #120	; 0x78
 8001c82:	4691      	mov	r9, r2
 8001c84:	4680      	mov	r8, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	469a      	mov	sl, r3
 8001c8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c8e:	d807      	bhi.n	8001ca0 <_printf_i+0x28>
 8001c90:	2f62      	cmp	r7, #98	; 0x62
 8001c92:	d80a      	bhi.n	8001caa <_printf_i+0x32>
 8001c94:	2f00      	cmp	r7, #0
 8001c96:	f000 80d8 	beq.w	8001e4a <_printf_i+0x1d2>
 8001c9a:	2f58      	cmp	r7, #88	; 0x58
 8001c9c:	f000 80a3 	beq.w	8001de6 <_printf_i+0x16e>
 8001ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ca8:	e03a      	b.n	8001d20 <_printf_i+0xa8>
 8001caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001cae:	2b15      	cmp	r3, #21
 8001cb0:	d8f6      	bhi.n	8001ca0 <_printf_i+0x28>
 8001cb2:	a101      	add	r1, pc, #4	; (adr r1, 8001cb8 <_printf_i+0x40>)
 8001cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cb8:	08001d11 	.word	0x08001d11
 8001cbc:	08001d25 	.word	0x08001d25
 8001cc0:	08001ca1 	.word	0x08001ca1
 8001cc4:	08001ca1 	.word	0x08001ca1
 8001cc8:	08001ca1 	.word	0x08001ca1
 8001ccc:	08001ca1 	.word	0x08001ca1
 8001cd0:	08001d25 	.word	0x08001d25
 8001cd4:	08001ca1 	.word	0x08001ca1
 8001cd8:	08001ca1 	.word	0x08001ca1
 8001cdc:	08001ca1 	.word	0x08001ca1
 8001ce0:	08001ca1 	.word	0x08001ca1
 8001ce4:	08001e31 	.word	0x08001e31
 8001ce8:	08001d55 	.word	0x08001d55
 8001cec:	08001e13 	.word	0x08001e13
 8001cf0:	08001ca1 	.word	0x08001ca1
 8001cf4:	08001ca1 	.word	0x08001ca1
 8001cf8:	08001e53 	.word	0x08001e53
 8001cfc:	08001ca1 	.word	0x08001ca1
 8001d00:	08001d55 	.word	0x08001d55
 8001d04:	08001ca1 	.word	0x08001ca1
 8001d08:	08001ca1 	.word	0x08001ca1
 8001d0c:	08001e1b 	.word	0x08001e1b
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	1d1a      	adds	r2, r3, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	602a      	str	r2, [r5, #0]
 8001d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0a3      	b.n	8001e6c <_printf_i+0x1f4>
 8001d24:	6820      	ldr	r0, [r4, #0]
 8001d26:	6829      	ldr	r1, [r5, #0]
 8001d28:	0606      	lsls	r6, r0, #24
 8001d2a:	f101 0304 	add.w	r3, r1, #4
 8001d2e:	d50a      	bpl.n	8001d46 <_printf_i+0xce>
 8001d30:	680e      	ldr	r6, [r1, #0]
 8001d32:	602b      	str	r3, [r5, #0]
 8001d34:	2e00      	cmp	r6, #0
 8001d36:	da03      	bge.n	8001d40 <_printf_i+0xc8>
 8001d38:	232d      	movs	r3, #45	; 0x2d
 8001d3a:	4276      	negs	r6, r6
 8001d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d40:	485e      	ldr	r0, [pc, #376]	; (8001ebc <_printf_i+0x244>)
 8001d42:	230a      	movs	r3, #10
 8001d44:	e019      	b.n	8001d7a <_printf_i+0x102>
 8001d46:	680e      	ldr	r6, [r1, #0]
 8001d48:	602b      	str	r3, [r5, #0]
 8001d4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d4e:	bf18      	it	ne
 8001d50:	b236      	sxthne	r6, r6
 8001d52:	e7ef      	b.n	8001d34 <_printf_i+0xbc>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	6820      	ldr	r0, [r4, #0]
 8001d58:	1d19      	adds	r1, r3, #4
 8001d5a:	6029      	str	r1, [r5, #0]
 8001d5c:	0601      	lsls	r1, r0, #24
 8001d5e:	d501      	bpl.n	8001d64 <_printf_i+0xec>
 8001d60:	681e      	ldr	r6, [r3, #0]
 8001d62:	e002      	b.n	8001d6a <_printf_i+0xf2>
 8001d64:	0646      	lsls	r6, r0, #25
 8001d66:	d5fb      	bpl.n	8001d60 <_printf_i+0xe8>
 8001d68:	881e      	ldrh	r6, [r3, #0]
 8001d6a:	4854      	ldr	r0, [pc, #336]	; (8001ebc <_printf_i+0x244>)
 8001d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8001d6e:	bf0c      	ite	eq
 8001d70:	2308      	moveq	r3, #8
 8001d72:	230a      	movne	r3, #10
 8001d74:	2100      	movs	r1, #0
 8001d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d7a:	6865      	ldr	r5, [r4, #4]
 8001d7c:	60a5      	str	r5, [r4, #8]
 8001d7e:	2d00      	cmp	r5, #0
 8001d80:	bfa2      	ittt	ge
 8001d82:	6821      	ldrge	r1, [r4, #0]
 8001d84:	f021 0104 	bicge.w	r1, r1, #4
 8001d88:	6021      	strge	r1, [r4, #0]
 8001d8a:	b90e      	cbnz	r6, 8001d90 <_printf_i+0x118>
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	d04d      	beq.n	8001e2c <_printf_i+0x1b4>
 8001d90:	4615      	mov	r5, r2
 8001d92:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d96:	fb03 6711 	mls	r7, r3, r1, r6
 8001d9a:	5dc7      	ldrb	r7, [r0, r7]
 8001d9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001da0:	4637      	mov	r7, r6
 8001da2:	42bb      	cmp	r3, r7
 8001da4:	460e      	mov	r6, r1
 8001da6:	d9f4      	bls.n	8001d92 <_printf_i+0x11a>
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d10b      	bne.n	8001dc4 <_printf_i+0x14c>
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	07de      	lsls	r6, r3, #31
 8001db0:	d508      	bpl.n	8001dc4 <_printf_i+0x14c>
 8001db2:	6923      	ldr	r3, [r4, #16]
 8001db4:	6861      	ldr	r1, [r4, #4]
 8001db6:	4299      	cmp	r1, r3
 8001db8:	bfde      	ittt	le
 8001dba:	2330      	movle	r3, #48	; 0x30
 8001dbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001dc4:	1b52      	subs	r2, r2, r5
 8001dc6:	6122      	str	r2, [r4, #16]
 8001dc8:	f8cd a000 	str.w	sl, [sp]
 8001dcc:	464b      	mov	r3, r9
 8001dce:	aa03      	add	r2, sp, #12
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	4640      	mov	r0, r8
 8001dd4:	f7ff fee2 	bl	8001b9c <_printf_common>
 8001dd8:	3001      	adds	r0, #1
 8001dda:	d14c      	bne.n	8001e76 <_printf_i+0x1fe>
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	b004      	add	sp, #16
 8001de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001de6:	4835      	ldr	r0, [pc, #212]	; (8001ebc <_printf_i+0x244>)
 8001de8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001dec:	6829      	ldr	r1, [r5, #0]
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	f851 6b04 	ldr.w	r6, [r1], #4
 8001df4:	6029      	str	r1, [r5, #0]
 8001df6:	061d      	lsls	r5, r3, #24
 8001df8:	d514      	bpl.n	8001e24 <_printf_i+0x1ac>
 8001dfa:	07df      	lsls	r7, r3, #31
 8001dfc:	bf44      	itt	mi
 8001dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8001e02:	6023      	strmi	r3, [r4, #0]
 8001e04:	b91e      	cbnz	r6, 8001e0e <_printf_i+0x196>
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	f023 0320 	bic.w	r3, r3, #32
 8001e0c:	6023      	str	r3, [r4, #0]
 8001e0e:	2310      	movs	r3, #16
 8001e10:	e7b0      	b.n	8001d74 <_printf_i+0xfc>
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	f043 0320 	orr.w	r3, r3, #32
 8001e18:	6023      	str	r3, [r4, #0]
 8001e1a:	2378      	movs	r3, #120	; 0x78
 8001e1c:	4828      	ldr	r0, [pc, #160]	; (8001ec0 <_printf_i+0x248>)
 8001e1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e22:	e7e3      	b.n	8001dec <_printf_i+0x174>
 8001e24:	0659      	lsls	r1, r3, #25
 8001e26:	bf48      	it	mi
 8001e28:	b2b6      	uxthmi	r6, r6
 8001e2a:	e7e6      	b.n	8001dfa <_printf_i+0x182>
 8001e2c:	4615      	mov	r5, r2
 8001e2e:	e7bb      	b.n	8001da8 <_printf_i+0x130>
 8001e30:	682b      	ldr	r3, [r5, #0]
 8001e32:	6826      	ldr	r6, [r4, #0]
 8001e34:	6961      	ldr	r1, [r4, #20]
 8001e36:	1d18      	adds	r0, r3, #4
 8001e38:	6028      	str	r0, [r5, #0]
 8001e3a:	0635      	lsls	r5, r6, #24
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	d501      	bpl.n	8001e44 <_printf_i+0x1cc>
 8001e40:	6019      	str	r1, [r3, #0]
 8001e42:	e002      	b.n	8001e4a <_printf_i+0x1d2>
 8001e44:	0670      	lsls	r0, r6, #25
 8001e46:	d5fb      	bpl.n	8001e40 <_printf_i+0x1c8>
 8001e48:	8019      	strh	r1, [r3, #0]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	6123      	str	r3, [r4, #16]
 8001e4e:	4615      	mov	r5, r2
 8001e50:	e7ba      	b.n	8001dc8 <_printf_i+0x150>
 8001e52:	682b      	ldr	r3, [r5, #0]
 8001e54:	1d1a      	adds	r2, r3, #4
 8001e56:	602a      	str	r2, [r5, #0]
 8001e58:	681d      	ldr	r5, [r3, #0]
 8001e5a:	6862      	ldr	r2, [r4, #4]
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f7fe f9ce 	bl	8000200 <memchr>
 8001e64:	b108      	cbz	r0, 8001e6a <_printf_i+0x1f2>
 8001e66:	1b40      	subs	r0, r0, r5
 8001e68:	6060      	str	r0, [r4, #4]
 8001e6a:	6863      	ldr	r3, [r4, #4]
 8001e6c:	6123      	str	r3, [r4, #16]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e74:	e7a8      	b.n	8001dc8 <_printf_i+0x150>
 8001e76:	6923      	ldr	r3, [r4, #16]
 8001e78:	462a      	mov	r2, r5
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	47d0      	blx	sl
 8001e80:	3001      	adds	r0, #1
 8001e82:	d0ab      	beq.n	8001ddc <_printf_i+0x164>
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	079b      	lsls	r3, r3, #30
 8001e88:	d413      	bmi.n	8001eb2 <_printf_i+0x23a>
 8001e8a:	68e0      	ldr	r0, [r4, #12]
 8001e8c:	9b03      	ldr	r3, [sp, #12]
 8001e8e:	4298      	cmp	r0, r3
 8001e90:	bfb8      	it	lt
 8001e92:	4618      	movlt	r0, r3
 8001e94:	e7a4      	b.n	8001de0 <_printf_i+0x168>
 8001e96:	2301      	movs	r3, #1
 8001e98:	4632      	mov	r2, r6
 8001e9a:	4649      	mov	r1, r9
 8001e9c:	4640      	mov	r0, r8
 8001e9e:	47d0      	blx	sl
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	d09b      	beq.n	8001ddc <_printf_i+0x164>
 8001ea4:	3501      	adds	r5, #1
 8001ea6:	68e3      	ldr	r3, [r4, #12]
 8001ea8:	9903      	ldr	r1, [sp, #12]
 8001eaa:	1a5b      	subs	r3, r3, r1
 8001eac:	42ab      	cmp	r3, r5
 8001eae:	dcf2      	bgt.n	8001e96 <_printf_i+0x21e>
 8001eb0:	e7eb      	b.n	8001e8a <_printf_i+0x212>
 8001eb2:	2500      	movs	r5, #0
 8001eb4:	f104 0619 	add.w	r6, r4, #25
 8001eb8:	e7f5      	b.n	8001ea6 <_printf_i+0x22e>
 8001eba:	bf00      	nop
 8001ebc:	08002231 	.word	0x08002231
 8001ec0:	08002242 	.word	0x08002242

08001ec4 <_sbrk_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4d06      	ldr	r5, [pc, #24]	; (8001ee0 <_sbrk_r+0x1c>)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	4604      	mov	r4, r0
 8001ecc:	4608      	mov	r0, r1
 8001ece:	602b      	str	r3, [r5, #0]
 8001ed0:	f000 f8e8 	bl	80020a4 <_sbrk>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	d102      	bne.n	8001ede <_sbrk_r+0x1a>
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	b103      	cbz	r3, 8001ede <_sbrk_r+0x1a>
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
 8001ee0:	2000008c 	.word	0x2000008c

08001ee4 <__sread>:
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	460c      	mov	r4, r1
 8001ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eec:	f000 f8a0 	bl	8002030 <_read_r>
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	bfab      	itete	ge
 8001ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8001ef8:	181b      	addge	r3, r3, r0
 8001efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001efe:	bfac      	ite	ge
 8001f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f02:	81a3      	strhlt	r3, [r4, #12]
 8001f04:	bd10      	pop	{r4, pc}

08001f06 <__swrite>:
 8001f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f0a:	461f      	mov	r7, r3
 8001f0c:	898b      	ldrh	r3, [r1, #12]
 8001f0e:	05db      	lsls	r3, r3, #23
 8001f10:	4605      	mov	r5, r0
 8001f12:	460c      	mov	r4, r1
 8001f14:	4616      	mov	r6, r2
 8001f16:	d505      	bpl.n	8001f24 <__swrite+0x1e>
 8001f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f000 f868 	bl	8001ff4 <_lseek_r>
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f2e:	81a3      	strh	r3, [r4, #12]
 8001f30:	4632      	mov	r2, r6
 8001f32:	463b      	mov	r3, r7
 8001f34:	4628      	mov	r0, r5
 8001f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f3a:	f000 b817 	b.w	8001f6c <_write_r>

08001f3e <__sseek>:
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	460c      	mov	r4, r1
 8001f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f46:	f000 f855 	bl	8001ff4 <_lseek_r>
 8001f4a:	1c43      	adds	r3, r0, #1
 8001f4c:	89a3      	ldrh	r3, [r4, #12]
 8001f4e:	bf15      	itete	ne
 8001f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f5a:	81a3      	strheq	r3, [r4, #12]
 8001f5c:	bf18      	it	ne
 8001f5e:	81a3      	strhne	r3, [r4, #12]
 8001f60:	bd10      	pop	{r4, pc}

08001f62 <__sclose>:
 8001f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f66:	f000 b813 	b.w	8001f90 <_close_r>
	...

08001f6c <_write_r>:
 8001f6c:	b538      	push	{r3, r4, r5, lr}
 8001f6e:	4d07      	ldr	r5, [pc, #28]	; (8001f8c <_write_r+0x20>)
 8001f70:	4604      	mov	r4, r0
 8001f72:	4608      	mov	r0, r1
 8001f74:	4611      	mov	r1, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	602a      	str	r2, [r5, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f000 f8a0 	bl	80020c0 <_write>
 8001f80:	1c43      	adds	r3, r0, #1
 8001f82:	d102      	bne.n	8001f8a <_write_r+0x1e>
 8001f84:	682b      	ldr	r3, [r5, #0]
 8001f86:	b103      	cbz	r3, 8001f8a <_write_r+0x1e>
 8001f88:	6023      	str	r3, [r4, #0]
 8001f8a:	bd38      	pop	{r3, r4, r5, pc}
 8001f8c:	2000008c 	.word	0x2000008c

08001f90 <_close_r>:
 8001f90:	b538      	push	{r3, r4, r5, lr}
 8001f92:	4d06      	ldr	r5, [pc, #24]	; (8001fac <_close_r+0x1c>)
 8001f94:	2300      	movs	r3, #0
 8001f96:	4604      	mov	r4, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	602b      	str	r3, [r5, #0]
 8001f9c:	f000 f85a 	bl	8002054 <_close>
 8001fa0:	1c43      	adds	r3, r0, #1
 8001fa2:	d102      	bne.n	8001faa <_close_r+0x1a>
 8001fa4:	682b      	ldr	r3, [r5, #0]
 8001fa6:	b103      	cbz	r3, 8001faa <_close_r+0x1a>
 8001fa8:	6023      	str	r3, [r4, #0]
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
 8001fac:	2000008c 	.word	0x2000008c

08001fb0 <_fstat_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	4d07      	ldr	r5, [pc, #28]	; (8001fd0 <_fstat_r+0x20>)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	602b      	str	r3, [r5, #0]
 8001fbe:	f000 f851 	bl	8002064 <_fstat>
 8001fc2:	1c43      	adds	r3, r0, #1
 8001fc4:	d102      	bne.n	8001fcc <_fstat_r+0x1c>
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	b103      	cbz	r3, 8001fcc <_fstat_r+0x1c>
 8001fca:	6023      	str	r3, [r4, #0]
 8001fcc:	bd38      	pop	{r3, r4, r5, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000008c 	.word	0x2000008c

08001fd4 <_isatty_r>:
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4d06      	ldr	r5, [pc, #24]	; (8001ff0 <_isatty_r+0x1c>)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4604      	mov	r4, r0
 8001fdc:	4608      	mov	r0, r1
 8001fde:	602b      	str	r3, [r5, #0]
 8001fe0:	f000 f848 	bl	8002074 <_isatty>
 8001fe4:	1c43      	adds	r3, r0, #1
 8001fe6:	d102      	bne.n	8001fee <_isatty_r+0x1a>
 8001fe8:	682b      	ldr	r3, [r5, #0]
 8001fea:	b103      	cbz	r3, 8001fee <_isatty_r+0x1a>
 8001fec:	6023      	str	r3, [r4, #0]
 8001fee:	bd38      	pop	{r3, r4, r5, pc}
 8001ff0:	2000008c 	.word	0x2000008c

08001ff4 <_lseek_r>:
 8001ff4:	b538      	push	{r3, r4, r5, lr}
 8001ff6:	4d07      	ldr	r5, [pc, #28]	; (8002014 <_lseek_r+0x20>)
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	4608      	mov	r0, r1
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	2200      	movs	r2, #0
 8002000:	602a      	str	r2, [r5, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	f000 f83e 	bl	8002084 <_lseek>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d102      	bne.n	8002012 <_lseek_r+0x1e>
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	b103      	cbz	r3, 8002012 <_lseek_r+0x1e>
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	2000008c 	.word	0x2000008c

08002018 <__malloc_lock>:
 8002018:	4801      	ldr	r0, [pc, #4]	; (8002020 <__malloc_lock+0x8>)
 800201a:	f7ff bb21 	b.w	8001660 <__retarget_lock_acquire_recursive>
 800201e:	bf00      	nop
 8002020:	20000080 	.word	0x20000080

08002024 <__malloc_unlock>:
 8002024:	4801      	ldr	r0, [pc, #4]	; (800202c <__malloc_unlock+0x8>)
 8002026:	f7ff bb1c 	b.w	8001662 <__retarget_lock_release_recursive>
 800202a:	bf00      	nop
 800202c:	20000080 	.word	0x20000080

08002030 <_read_r>:
 8002030:	b538      	push	{r3, r4, r5, lr}
 8002032:	4d07      	ldr	r5, [pc, #28]	; (8002050 <_read_r+0x20>)
 8002034:	4604      	mov	r4, r0
 8002036:	4608      	mov	r0, r1
 8002038:	4611      	mov	r1, r2
 800203a:	2200      	movs	r2, #0
 800203c:	602a      	str	r2, [r5, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	f000 f828 	bl	8002094 <_read>
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	d102      	bne.n	800204e <_read_r+0x1e>
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	b103      	cbz	r3, 800204e <_read_r+0x1e>
 800204c:	6023      	str	r3, [r4, #0]
 800204e:	bd38      	pop	{r3, r4, r5, pc}
 8002050:	2000008c 	.word	0x2000008c

08002054 <_close>:
 8002054:	4b02      	ldr	r3, [pc, #8]	; (8002060 <_close+0xc>)
 8002056:	2258      	movs	r2, #88	; 0x58
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f04f 30ff 	mov.w	r0, #4294967295
 800205e:	4770      	bx	lr
 8002060:	2000008c 	.word	0x2000008c

08002064 <_fstat>:
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <_fstat+0xc>)
 8002066:	2258      	movs	r2, #88	; 0x58
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f04f 30ff 	mov.w	r0, #4294967295
 800206e:	4770      	bx	lr
 8002070:	2000008c 	.word	0x2000008c

08002074 <_isatty>:
 8002074:	4b02      	ldr	r3, [pc, #8]	; (8002080 <_isatty+0xc>)
 8002076:	2258      	movs	r2, #88	; 0x58
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	2000      	movs	r0, #0
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	2000008c 	.word	0x2000008c

08002084 <_lseek>:
 8002084:	4b02      	ldr	r3, [pc, #8]	; (8002090 <_lseek+0xc>)
 8002086:	2258      	movs	r2, #88	; 0x58
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f04f 30ff 	mov.w	r0, #4294967295
 800208e:	4770      	bx	lr
 8002090:	2000008c 	.word	0x2000008c

08002094 <_read>:
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <_read+0xc>)
 8002096:	2258      	movs	r2, #88	; 0x58
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	f04f 30ff 	mov.w	r0, #4294967295
 800209e:	4770      	bx	lr
 80020a0:	2000008c 	.word	0x2000008c

080020a4 <_sbrk>:
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <_sbrk+0x14>)
 80020a6:	6811      	ldr	r1, [r2, #0]
 80020a8:	4603      	mov	r3, r0
 80020aa:	b909      	cbnz	r1, 80020b0 <_sbrk+0xc>
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <_sbrk+0x18>)
 80020ae:	6011      	str	r1, [r2, #0]
 80020b0:	6810      	ldr	r0, [r2, #0]
 80020b2:	4403      	add	r3, r0
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4770      	bx	lr
 80020b8:	20000090 	.word	0x20000090
 80020bc:	20000098 	.word	0x20000098

080020c0 <_write>:
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <_write+0xc>)
 80020c2:	2258      	movs	r2, #88	; 0x58
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ca:	4770      	bx	lr
 80020cc:	2000008c 	.word	0x2000008c

080020d0 <_init>:
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	bf00      	nop
 80020d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d6:	bc08      	pop	{r3}
 80020d8:	469e      	mov	lr, r3
 80020da:	4770      	bx	lr

080020dc <_fini>:
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020de:	bf00      	nop
 80020e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e2:	bc08      	pop	{r3}
 80020e4:	469e      	mov	lr, r3
 80020e6:	4770      	bx	lr
