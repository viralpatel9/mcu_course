
stm32f4xx_drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a18  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000bc0  08000bc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bcc  08000bcc  00010bd4  2**0
                  CONTENTS
  4 .ARM          00000000  08000bcc  08000bcc  00010bd4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bcc  08000bd4  00010bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bcc  08000bcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010bd4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010bd4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000125f  00000000  00000000  00010c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042c  00000000  00000000  00011e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00012290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  000123c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002124  00000000  00000000  000124b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000165f  00000000  00000000  000145dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008c6f  00000000  00000000  00015c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e8aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000404  00000000  00000000  0001e8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ba8 	.word	0x08000ba8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ba8 	.word	0x08000ba8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#include<string.h>

#include "stm32f407xx.h"

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i =0;i<500000/2;i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <SPI2_GPIOInits+0x4c>)
 800022c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode= 5;
 8000232:	2305      	movs	r3, #5
 8000234:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000236:	2300      	movs	r3, #0
 8000238:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023a:	2300      	movs	r3, #0
 800023c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]

	//sclk
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000242:	230d      	movs	r3, #13
 8000244:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f9a5 	bl	8000598 <GPIO_Init>

	//Mosi
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800024e:	230f      	movs	r3, #15
 8000250:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f99f 	bl	8000598 <GPIO_Init>
	//MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800025a:	230c      	movs	r3, #12
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f999 	bl	8000598 <GPIO_Init>
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40020400 	.word	0x40020400

08000274 <SPI2_Inits>:


void SPI2_Inits(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <SPI2_Inits+0x38>)
 800027c:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800027e:	2301      	movs	r3, #1
 8000280:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000282:	2301      	movs	r3, #1
 8000284:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // this generates the sclk of 2MHz
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800028a:	2300      	movs	r3, #0
 800028c:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800028e:	2300      	movs	r3, #0
 8000290:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000292:	2300      	movs	r3, #0
 8000294:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 			//Hardware sllave management enabled for NSS pin
 8000296:	2300      	movs	r3, #0
 8000298:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fb8b 	bl	80009b8 <SPI_Init>

}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40003800 	.word	0x40003800

080002b0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	GPIOBtn.pGPIOx = GPIOA;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <GPIO_ButtonInit+0x2c>)
 80002b8:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002be:	2300      	movs	r3, #0
 80002c0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST;
 80002c2:	2302      	movs	r3, #2
 80002c4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002c6:	2300      	movs	r3, #0
 80002c8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f963 	bl	8000598 <GPIO_Init>
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40020000 	.word	0x40020000

080002e0 <main>:

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 80002e6:	4a20      	ldr	r2, [pc, #128]	; (8000368 <main+0x88>)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//this function is used to initialize the GPIO pins to behave as SPI2 pins

	GPIO_ButtonInit();
 80002f0:	f7ff ffde 	bl	80002b0 <GPIO_ButtonInit>

	SPI2_GPIOInits();
 80002f4:	f7ff ff96 	bl	8000224 <SPI2_GPIOInits>

	SPI2_Inits();
 80002f8:	f7ff ffbc 	bl	8000274 <SPI2_Inits>
	 * making ssoe 1 does NSS output enable
	 * The NSS pin is automatically managed by the hardware.
	 * i.e., when the SPE=1, NSS will be pulled to low
	 * and NSS pin will be high when SPE=0
	 */
	SPI_SSOEConfig(SPI2,ENABLE);
 80002fc:	2101      	movs	r1, #1
 80002fe:	481b      	ldr	r0, [pc, #108]	; (800036c <main+0x8c>)
 8000300:	f000 fc11 	bl	8000b26 <SPI_SSOEConfig>

	while(1)
	{
		//wait until the button is pressed
		while(!(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)));
 8000304:	bf00      	nop
 8000306:	2100      	movs	r1, #0
 8000308:	4819      	ldr	r0, [pc, #100]	; (8000370 <main+0x90>)
 800030a:	f000 fae7 	bl	80008dc <GPIO_ReadFromInputPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f8      	beq.n	8000306 <main+0x26>

		//to avoid the debouncing related issues 200ms of delay
		delay();
 8000314:	f7ff ff70 	bl	80001f8 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000318:	2101      	movs	r1, #1
 800031a:	4814      	ldr	r0, [pc, #80]	; (800036c <main+0x8c>)
 800031c:	f000 fbe7 	bl	8000aee <SPI_PeripheralControl>

		//first send the length information
		uint8_t dataLen= strlen(user_data);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff60 	bl	80001e8 <strlen>
 8000328:	4603      	mov	r3, r0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 800032e:	1cfb      	adds	r3, r7, #3
 8000330:	2201      	movs	r2, #1
 8000332:	4619      	mov	r1, r3
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <main+0x8c>)
 8000336:	f000 fba3 	bl	8000a80 <SPI_SendData>

		//to send data
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff53 	bl	80001e8 <strlen>
 8000342:	4602      	mov	r2, r0
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4808      	ldr	r0, [pc, #32]	; (800036c <main+0x8c>)
 800034a:	f000 fb99 	bl	8000a80 <SPI_SendData>

		//lets onfirm the SPI is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 800034e:	bf00      	nop
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <main+0x8c>)
 8000354:	f000 fb80 	bl	8000a58 <SPI_GetFlagStatus>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f8      	bne.n	8000350 <main+0x70>

		//disable the SPI2 peripheral
		SPI_PeriClockControl(SPI2, DISABLE);
 800035e:	2100      	movs	r1, #0
 8000360:	4802      	ldr	r0, [pc, #8]	; (800036c <main+0x8c>)
 8000362:	f000 fad1 	bl	8000908 <SPI_PeriClockControl>
	{
 8000366:	e7cd      	b.n	8000304 <main+0x24>
 8000368:	08000bc0 	.word	0x08000bc0
 800036c:	40003800 	.word	0x40003800
 8000370:	40020000 	.word	0x40020000

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000378:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 fbdd 	bl	8000b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff9b 	bl	80002e0 <main>

080003aa <LoopForever>:

LoopForever:
    b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b8:	08000bd4 	.word	0x08000bd4
  ldr r2, =_sbss
 80003bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c0:	2000001c 	.word	0x2000001c

080003c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>
	...

080003c8 <GPIO_PeriClockControl>:
 * @Note			-  None
 *
 *
 *************************************** */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d162      	bne.n	80004a0 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a64      	ldr	r2, [pc, #400]	; (8000570 <GPIO_PeriClockControl+0x1a8>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003e2:	4b64      	ldr	r3, [pc, #400]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a63      	ldr	r2, [pc, #396]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}
}
 80003ee:	e0b9      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a61      	ldr	r2, [pc, #388]	; (8000578 <GPIO_PeriClockControl+0x1b0>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003f8:	4b5e      	ldr	r3, [pc, #376]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a5d      	ldr	r2, [pc, #372]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80003fe:	f043 0302 	orr.w	r3, r3, #2
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e0ae      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a5c      	ldr	r2, [pc, #368]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800040e:	4b59      	ldr	r3, [pc, #356]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a58      	ldr	r2, [pc, #352]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e0a3      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a58      	ldr	r2, [pc, #352]	; (8000580 <GPIO_PeriClockControl+0x1b8>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000424:	4b53      	ldr	r3, [pc, #332]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a52      	ldr	r2, [pc, #328]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e098      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a53      	ldr	r2, [pc, #332]	; (8000584 <GPIO_PeriClockControl+0x1bc>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800043a:	4b4e      	ldr	r3, [pc, #312]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a4d      	ldr	r2, [pc, #308]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000440:	f043 0310 	orr.w	r3, r3, #16
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e08d      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a4f      	ldr	r2, [pc, #316]	; (8000588 <GPIO_PeriClockControl+0x1c0>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000450:	4b48      	ldr	r3, [pc, #288]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a47      	ldr	r2, [pc, #284]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e082      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a4a      	ldr	r2, [pc, #296]	; (800058c <GPIO_PeriClockControl+0x1c4>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000466:	4b43      	ldr	r3, [pc, #268]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a42      	ldr	r2, [pc, #264]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 800046c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	e077      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a46      	ldr	r2, [pc, #280]	; (8000590 <GPIO_PeriClockControl+0x1c8>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a3c      	ldr	r2, [pc, #240]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e06c      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a41      	ldr	r2, [pc, #260]	; (8000594 <GPIO_PeriClockControl+0x1cc>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d168      	bne.n	8000564 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000492:	4b38      	ldr	r3, [pc, #224]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a37      	ldr	r2, [pc, #220]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	e061      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a33      	ldr	r2, [pc, #204]	; (8000570 <GPIO_PeriClockControl+0x1a8>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80004a8:	4b32      	ldr	r3, [pc, #200]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a31      	ldr	r2, [pc, #196]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80004ae:	f023 0301 	bic.w	r3, r3, #1
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b4:	e056      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a2f      	ldr	r2, [pc, #188]	; (8000578 <GPIO_PeriClockControl+0x1b0>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80004be:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	4a2c      	ldr	r2, [pc, #176]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80004c4:	f023 0302 	bic.w	r3, r3, #2
 80004c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ca:	e04b      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a2b      	ldr	r2, [pc, #172]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d106      	bne.n	80004e2 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004d4:	4b27      	ldr	r3, [pc, #156]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d8:	4a26      	ldr	r2, [pc, #152]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80004da:	f023 0304 	bic.w	r3, r3, #4
 80004de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e0:	e040      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a26      	ldr	r2, [pc, #152]	; (8000580 <GPIO_PeriClockControl+0x1b8>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a21      	ldr	r2, [pc, #132]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 80004f0:	f023 0308 	bic.w	r3, r3, #8
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f6:	e035      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a22      	ldr	r2, [pc, #136]	; (8000584 <GPIO_PeriClockControl+0x1bc>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d106      	bne.n	800050e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000506:	f023 0310 	bic.w	r3, r3, #16
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050c:	e02a      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a1d      	ldr	r2, [pc, #116]	; (8000588 <GPIO_PeriClockControl+0x1c0>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 800051c:	f023 0320 	bic.w	r3, r3, #32
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000522:	e01f      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a19      	ldr	r2, [pc, #100]	; (800058c <GPIO_PeriClockControl+0x1c4>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a10      	ldr	r2, [pc, #64]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000538:	e014      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <GPIO_PeriClockControl+0x1c8>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 8000548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054e:	e009      	b.n	8000564 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a10      	ldr	r2, [pc, #64]	; (8000594 <GPIO_PeriClockControl+0x1cc>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d105      	bne.n	8000564 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	4a05      	ldr	r2, [pc, #20]	; (8000574 <GPIO_PeriClockControl+0x1ac>)
 800055e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000562:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	40020000 	.word	0x40020000
 8000574:	40023800 	.word	0x40023800
 8000578:	40020400 	.word	0x40020400
 800057c:	40020800 	.word	0x40020800
 8000580:	40020c00 	.word	0x40020c00
 8000584:	40021000 	.word	0x40021000
 8000588:	40021400 	.word	0x40021400
 800058c:	40021800 	.word	0x40021800
 8000590:	40021c00 	.word	0x40021c00
 8000594:	40022000 	.word	0x40022000

08000598 <GPIO_Init>:

/*
 * 	Init and Deint of the peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff0c 	bl	80003c8 <GPIO_PeriClockControl>

	// Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d81f      	bhi.n	80005f8 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80005c8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // cleraing off the pin number before using it
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2303      	movs	r3, #3
 80005d8:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x03
 80005da:	43db      	mvns	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	400a      	ands	r2, r1
 80005e4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	e0ca      	b.n	800078e <GPIO_Init+0x1f6>

	}
	else
	{
		// this is the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d117      	bne.n	8000630 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000600:	4b4a      	ldr	r3, [pc, #296]	; (800072c <GPIO_Init+0x194>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	4611      	mov	r1, r2
 8000610:	4a46      	ldr	r2, [pc, #280]	; (800072c <GPIO_Init+0x194>)
 8000612:	430b      	orrs	r3, r1
 8000614:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000616:	4b45      	ldr	r3, [pc, #276]	; (800072c <GPIO_Init+0x194>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7912      	ldrb	r2, [r2, #4]
 800061e:	4611      	mov	r1, r2
 8000620:	2201      	movs	r2, #1
 8000622:	408a      	lsls	r2, r1
 8000624:	43d2      	mvns	r2, r2
 8000626:	4611      	mov	r1, r2
 8000628:	4a40      	ldr	r2, [pc, #256]	; (800072c <GPIO_Init+0x194>)
 800062a:	400b      	ands	r3, r1
 800062c:	6093      	str	r3, [r2, #8]
 800062e:	e035      	b.n	800069c <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	795b      	ldrb	r3, [r3, #5]
 8000634:	2b05      	cmp	r3, #5
 8000636:	d117      	bne.n	8000668 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000638:	4b3c      	ldr	r3, [pc, #240]	; (800072c <GPIO_Init+0x194>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	7912      	ldrb	r2, [r2, #4]
 8000640:	4611      	mov	r1, r2
 8000642:	2201      	movs	r2, #1
 8000644:	408a      	lsls	r2, r1
 8000646:	4611      	mov	r1, r2
 8000648:	4a38      	ldr	r2, [pc, #224]	; (800072c <GPIO_Init+0x194>)
 800064a:	430b      	orrs	r3, r1
 800064c:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <GPIO_Init+0x194>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	7912      	ldrb	r2, [r2, #4]
 8000656:	4611      	mov	r1, r2
 8000658:	2201      	movs	r2, #1
 800065a:	408a      	lsls	r2, r1
 800065c:	43d2      	mvns	r2, r2
 800065e:	4611      	mov	r1, r2
 8000660:	4a32      	ldr	r2, [pc, #200]	; (800072c <GPIO_Init+0x194>)
 8000662:	400b      	ands	r3, r1
 8000664:	60d3      	str	r3, [r2, #12]
 8000666:	e019      	b.n	800069c <GPIO_Init+0x104>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	795b      	ldrb	r3, [r3, #5]
 800066c:	2b06      	cmp	r3, #6
 800066e:	d115      	bne.n	800069c <GPIO_Init+0x104>
		{
			//1. Configure bothh RTSR and FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <GPIO_Init+0x194>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	7912      	ldrb	r2, [r2, #4]
 8000678:	4611      	mov	r1, r2
 800067a:	2201      	movs	r2, #1
 800067c:	408a      	lsls	r2, r1
 800067e:	4611      	mov	r1, r2
 8000680:	4a2a      	ldr	r2, [pc, #168]	; (800072c <GPIO_Init+0x194>)
 8000682:	430b      	orrs	r3, r1
 8000684:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <GPIO_Init+0x194>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7912      	ldrb	r2, [r2, #4]
 800068e:	4611      	mov	r1, r2
 8000690:	2201      	movs	r2, #1
 8000692:	408a      	lsls	r2, r1
 8000694:	4611      	mov	r1, r2
 8000696:	4a25      	ldr	r2, [pc, #148]	; (800072c <GPIO_Init+0x194>)
 8000698:	430b      	orrs	r3, r1
 800069a:	6093      	str	r3, [r2, #8]

		}
		//2. COnfigure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	f003 0303 	and.w	r3, r3, #3
 80006ac:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIOA_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <GPIO_Init+0x198>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d04d      	beq.n	8000754 <GPIO_Init+0x1bc>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <GPIO_Init+0x19c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d032      	beq.n	8000728 <GPIO_Init+0x190>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <GPIO_Init+0x1a0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d02b      	beq.n	8000724 <GPIO_Init+0x18c>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <GPIO_Init+0x1a4>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d024      	beq.n	8000720 <GPIO_Init+0x188>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a19      	ldr	r2, [pc, #100]	; (8000740 <GPIO_Init+0x1a8>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d01d      	beq.n	800071c <GPIO_Init+0x184>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a17      	ldr	r2, [pc, #92]	; (8000744 <GPIO_Init+0x1ac>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d016      	beq.n	8000718 <GPIO_Init+0x180>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a16      	ldr	r2, [pc, #88]	; (8000748 <GPIO_Init+0x1b0>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d00f      	beq.n	8000714 <GPIO_Init+0x17c>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <GPIO_Init+0x1b4>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d008      	beq.n	8000710 <GPIO_Init+0x178>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <GPIO_Init+0x1b8>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d101      	bne.n	800070c <GPIO_Init+0x174>
 8000708:	2308      	movs	r3, #8
 800070a:	e024      	b.n	8000756 <GPIO_Init+0x1be>
 800070c:	2300      	movs	r3, #0
 800070e:	e022      	b.n	8000756 <GPIO_Init+0x1be>
 8000710:	2307      	movs	r3, #7
 8000712:	e020      	b.n	8000756 <GPIO_Init+0x1be>
 8000714:	2306      	movs	r3, #6
 8000716:	e01e      	b.n	8000756 <GPIO_Init+0x1be>
 8000718:	2305      	movs	r3, #5
 800071a:	e01c      	b.n	8000756 <GPIO_Init+0x1be>
 800071c:	2304      	movs	r3, #4
 800071e:	e01a      	b.n	8000756 <GPIO_Init+0x1be>
 8000720:	2303      	movs	r3, #3
 8000722:	e018      	b.n	8000756 <GPIO_Init+0x1be>
 8000724:	2302      	movs	r3, #2
 8000726:	e016      	b.n	8000756 <GPIO_Init+0x1be>
 8000728:	2301      	movs	r3, #1
 800072a:	e014      	b.n	8000756 <GPIO_Init+0x1be>
 800072c:	40013c00 	.word	0x40013c00
 8000730:	40020000 	.word	0x40020000
 8000734:	40020400 	.word	0x40020400
 8000738:	40020800 	.word	0x40020800
 800073c:	40020c00 	.word	0x40020c00
 8000740:	40021000 	.word	0x40021000
 8000744:	40021400 	.word	0x40021400
 8000748:	40021800 	.word	0x40021800
 800074c:	40021c00 	.word	0x40021c00
 8000750:	40022000 	.word	0x40022000
 8000754:	2300      	movs	r3, #0
 8000756:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000758:	4b5d      	ldr	r3, [pc, #372]	; (80008d0 <GPIO_Init+0x338>)
 800075a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075c:	4a5c      	ldr	r2, [pc, #368]	; (80008d0 <GPIO_Init+0x338>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000762:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 8000764:	7c7a      	ldrb	r2, [r7, #17]
 8000766:	7cbb      	ldrb	r3, [r7, #18]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	fa02 f103 	lsl.w	r1, r2, r3
 800076e:	4a59      	ldr	r2, [pc, #356]	; (80008d4 <GPIO_Init+0x33c>)
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	3302      	adds	r3, #2
 8000774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. ENable the Exti intrrupt delivery using IMR
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000778:	4b57      	ldr	r3, [pc, #348]	; (80008d8 <GPIO_Init+0x340>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	7912      	ldrb	r2, [r2, #4]
 8000780:	4611      	mov	r1, r2
 8000782:	2201      	movs	r2, #1
 8000784:	408a      	lsls	r2, r1
 8000786:	4611      	mov	r1, r2
 8000788:	4a53      	ldr	r2, [pc, #332]	; (80008d8 <GPIO_Init+0x340>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	799b      	ldrb	r3, [r3, #6]
 8000796:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80007a2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	4619      	mov	r1, r3
 80007b0:	2303      	movs	r3, #3
 80007b2:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	400a      	ands	r2, r1
 80007be:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6899      	ldr	r1, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	609a      	str	r2, [r3, #8]

	temp = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

	// Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	79db      	ldrb	r3, [r3, #7]
 80007d8:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80007e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	4619      	mov	r1, r3
 80007f2:	2303      	movs	r3, #3
 80007f4:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4619      	mov	r1, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	400a      	ands	r2, r1
 8000800:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68d9      	ldr	r1, [r3, #12]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	430a      	orrs	r2, r1
 8000810:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]

	//configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7a1b      	ldrb	r3, [r3, #8]
 800081a:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000826:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	4619      	mov	r1, r3
 8000834:	2301      	movs	r3, #1
 8000836:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000838:	43db      	mvns	r3, r3
 800083a:	4619      	mov	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	400a      	ands	r2, r1
 8000842:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6859      	ldr	r1, [r3, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	430a      	orrs	r2, r1
 8000852:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	795b      	ldrb	r3, [r3, #5]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d132      	bne.n	80008c6 <GPIO_Init+0x32e>
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	3208      	adds	r2, #8
 800087c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	210f      	movs	r1, #15
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	4619      	mov	r1, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4011      	ands	r1, r2
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	3208      	adds	r2, #8
 8000898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	3208      	adds	r2, #8
 80008a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7a5b      	ldrb	r3, [r3, #9]
 80008ac:	4619      	mov	r1, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4311      	orrs	r1, r2
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	3208      	adds	r2, #8
 80008c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40013800 	.word	0x40013800
 80008d8:	40013c00 	.word	0x40013c00

080008dc <GPIO_ReadFromInputPin>:
 * Data read and write
 *
 * return value will be either 0 or 1
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x0000001);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	691a      	ldr	r2, [r3, #16]
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	fa22 f303 	lsr.w	r3, r2, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
	return value;
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SPI_PeriClockControl>:

#include "stm32f407xx_spi_driver.h"


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d120      	bne.n	800095c <SPI_PeriClockControl+0x54>
	{
			if (pSPIx == SPI1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <SPI_PeriClockControl+0xa0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <SPI_PeriClockControl+0xa4>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <SPI_PeriClockControl+0xa4>)
 8000928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
			else if (pSPIx == SPI3)
			{
				SPI3_PCLK_DI();
			}
	}
}
 800092e:	e035      	b.n	800099c <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <SPI_PeriClockControl+0xa8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d106      	bne.n	8000946 <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <SPI_PeriClockControl+0xa4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <SPI_PeriClockControl+0xa4>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000944:	e02a      	b.n	800099c <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <SPI_PeriClockControl+0xac>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d126      	bne.n	800099c <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <SPI_PeriClockControl+0xa4>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <SPI_PeriClockControl+0xa4>)
 8000954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
}
 800095a:	e01f      	b.n	800099c <SPI_PeriClockControl+0x94>
			if (pSPIx == SPI1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <SPI_PeriClockControl+0xa0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <SPI_PeriClockControl+0x6a>
				SPI1_PCLK_DI();
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <SPI_PeriClockControl+0xa4>)
 8000966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000968:	4a10      	ldr	r2, [pc, #64]	; (80009ac <SPI_PeriClockControl+0xa4>)
 800096a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800096e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000970:	e014      	b.n	800099c <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI2)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <SPI_PeriClockControl+0xa8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d106      	bne.n	8000988 <SPI_PeriClockControl+0x80>
				SPI2_PCLK_DI();
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <SPI_PeriClockControl+0xa4>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <SPI_PeriClockControl+0xa4>)
 8000980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000986:	e009      	b.n	800099c <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SPI_PeriClockControl+0xac>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d105      	bne.n	800099c <SPI_PeriClockControl+0x94>
				SPI3_PCLK_DI();
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <SPI_PeriClockControl+0xa4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <SPI_PeriClockControl+0xa4>)
 8000996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40013000 	.word	0x40013000
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40003800 	.word	0x40003800
 80009b4:	40003c00 	.word	0x40003c00

080009b8 <SPI_Init>:

/*
 * 	Init and Deint of the peripheral
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	//first lets configgure the spi_cr1 register
	uint32_t tempreg = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle -> SPIConfig.SPI_DeviceMode <<SPI_CR1_MSTR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	795b      	ldrb	r3, [r3, #5]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d104      	bne.n	80009e4 <SPI_Init+0x2c>
	{
		//bidi mode should be cleared
		tempreg &=~(1<<SPI_CR1_BIDIMODE);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e014      	b.n	8000a0e <SPI_Init+0x56>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d104      	bne.n	80009f6 <SPI_Init+0x3e>
	{
		// bidi mode should be set
		tempreg|=(1<<SPI_CR1_BIDIMODE);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e00b      	b.n	8000a0e <SPI_Init+0x56>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	795b      	ldrb	r3, [r3, #5]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d107      	bne.n	8000a0e <SPI_Init+0x56>
	{
		// bisi mode should be cleared
		tempreg &=~(1<<SPI_CR1_BIDIMODE);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a04:	60fb      	str	r3, [r7, #12]
		//rxonly bit must be selected
		tempreg |=(1<<SPI_CR1_RXONLY);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0c:	60fb      	str	r3, [r7, #12]
	}

	//3. configure the spi serial clock speed(baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed<<SPI_CR1_BR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	799b      	ldrb	r3, [r3, #6]
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	461a      	mov	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

	//4. configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF<<SPI_CR1_DFF;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	79db      	ldrb	r3, [r3, #7]
 8000a20:	02db      	lsls	r3, r3, #11
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle-> SPIConfig.SPI_CPOL<<SPI_CR1_CPOL;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7a1b      	ldrb	r3, [r3, #8]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	461a      	mov	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

	//6. configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA<<SPI_CR1_CPHA;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7a5b      	ldrb	r3, [r3, #9]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1=tempreg;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	601a      	str	r2, [r3, #0]

}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SPI_GetFlagStatus>:
			SPI3_REG_RESET();
		}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SPI_GetFlagStatus+0x1a>
	{
		 return FLAG_SET;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SPI_SendData>:
// data send and receive using the spi pin

// blocking(non interrupts) and non blocking the api

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	while(Len>0)
 8000a8c:	e027      	b.n	8000ade <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a8e:	bf00      	nop
 8000a90:	2102      	movs	r1, #2
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff ffe0 	bl	8000a58 <SPI_GetFlagStatus>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f8      	beq.n	8000a90 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if((pSPIx->CR1 & (1<<SPI_CR1_DFF)))
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00e      	beq.n	8000ac8 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	60da      	str	r2, [r3, #12]
			Len--;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]
			Len--;			//the len is decreae by 2 because of the 16 bit
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	e00a      	b.n	8000ade <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit DFF
			//1. Load the data in to the DR
			pSPIx->DR = *pTxBuffer;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	60da      	str	r2, [r3, #12]
			Len--;					// the len is decrease by 1 bcoz of 8 bbit
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
	while(Len>0)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1d4      	bne.n	8000a8e <SPI_SendData+0xe>
		}

	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <SPI_PeripheralControl>:
void SPI_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle);

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi ==ENABLE)
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d106      	bne.n	8000b0e <SPI_PeripheralControl+0x20>
	{
		 pSPIx->CR1 |= (1<<SPI_CR1_SPE); 			//this enables the SPI
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);			//this disables the SPI
	}
}
 8000b0c:	e005      	b.n	8000b1a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);			//this disables the SPI
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);			//this disables the SPI
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi ==ENABLE)
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d106      	bne.n	8000b46 <SPI_SSOEConfig+0x20>
	{
		 pSPIx->CR1 |= (1<<SPI_CR2_SSOE); 			//this enables the SPI
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f043 0204 	orr.w	r2, r3, #4
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR2_SSOE);			//this disables the SPI
	}
}
 8000b44:	e005      	b.n	8000b52 <SPI_SSOEConfig+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR2_SSOE);			//this disables the SPI
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f023 0204 	bic.w	r2, r3, #4
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <__libc_init_array>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	4d0d      	ldr	r5, [pc, #52]	; (8000b98 <__libc_init_array+0x38>)
 8000b64:	4c0d      	ldr	r4, [pc, #52]	; (8000b9c <__libc_init_array+0x3c>)
 8000b66:	1b64      	subs	r4, r4, r5
 8000b68:	10a4      	asrs	r4, r4, #2
 8000b6a:	2600      	movs	r6, #0
 8000b6c:	42a6      	cmp	r6, r4
 8000b6e:	d109      	bne.n	8000b84 <__libc_init_array+0x24>
 8000b70:	4d0b      	ldr	r5, [pc, #44]	; (8000ba0 <__libc_init_array+0x40>)
 8000b72:	4c0c      	ldr	r4, [pc, #48]	; (8000ba4 <__libc_init_array+0x44>)
 8000b74:	f000 f818 	bl	8000ba8 <_init>
 8000b78:	1b64      	subs	r4, r4, r5
 8000b7a:	10a4      	asrs	r4, r4, #2
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	42a6      	cmp	r6, r4
 8000b80:	d105      	bne.n	8000b8e <__libc_init_array+0x2e>
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b88:	4798      	blx	r3
 8000b8a:	3601      	adds	r6, #1
 8000b8c:	e7ee      	b.n	8000b6c <__libc_init_array+0xc>
 8000b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b92:	4798      	blx	r3
 8000b94:	3601      	adds	r6, #1
 8000b96:	e7f2      	b.n	8000b7e <__libc_init_array+0x1e>
 8000b98:	08000bcc 	.word	0x08000bcc
 8000b9c:	08000bcc 	.word	0x08000bcc
 8000ba0:	08000bcc 	.word	0x08000bcc
 8000ba4:	08000bd0 	.word	0x08000bd0

08000ba8 <_init>:
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	bf00      	nop
 8000bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bae:	bc08      	pop	{r3}
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	4770      	bx	lr

08000bb4 <_fini>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	bf00      	nop
 8000bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bba:	bc08      	pop	{r3}
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	4770      	bx	lr
