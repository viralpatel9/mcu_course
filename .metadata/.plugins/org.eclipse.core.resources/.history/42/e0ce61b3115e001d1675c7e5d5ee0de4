/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Nov 6, 2022
 *      Author: ViralPatel
 */


#include "stm32f407xx_gpio_driver.h"



/***************************************
 *
 * @fn 				- GPIO_PeriClockControl
 *
 * @brief			- This function enable oo disable the the peripheral clock fo rthe given GPIO
 *
 * @param[in]		- base address of the GPIO Peripheral
 * @param[in]		- ENABLE or DISABLE macros
 * @param[in]		-
 *
 * @return 			-  None
 *
 * @Note			-  None
 *
 *
*************************************** */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pGPIOx == GPIOA)
				{
					GPIOA_PCLK_EN();
				}
		else if (pGPIOx == GPIOB)
				{
					GPIOB_PCLK_EN();
				}
		else if (pGPIOx == GPIOC)
				{
					GPIOC_PCLK_EN();
				}
		else if (pGPIOx == GPIOD)
				{
					GPIOD_PCLK_EN();
				}
		else if (pGPIOx == GPIOE)
				{
					GPIOE_PCLK_EN();
				}
		else if (pGPIOx == GPIOF)
				{
					GPIOF_PCLK_EN();
				}
		else if (pGPIOx == GPIOG)
				{
					GPIOG_PCLK_EN();
				}
		else if (pGPIOx == GPIOH)
				{
					GPIOH_PCLK_EN();
				}
		else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_EN();
				}
	}
	else
	{
		if(pGPIOx == GPIOA)
				{
					GPIOA_PCLK_DI();
				}
		else if (pGPIOx == GPIOB)
				{
					GPIOB_PCLK_DI();
				}
		else if (pGPIOx == GPIOC)
				{
					GPIOC_PCLK_DI();
				}
		else if (pGPIOx == GPIOD)
				{
					GPIOD_PCLK_DI();
				}
		else if (pGPIOx == GPIOE)
				{
					GPIOE_PCLK_DI();
				}
		else if (pGPIOx == GPIOF)
				{
					GPIOF_PCLK_DI();
				}
		else if (pGPIOx == GPIOG)
				{
					GPIOG_PCLK_DI();
				}
		else if (pGPIOx == GPIOH)
				{
					GPIOH_PCLK_DI();
				}
		else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
/*
 * 	Init and Deint of the peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{

}

void GPIO_DeInt(GPIO_RegDef_t *pGPIOx)
{


}


/*
 * Data read and write
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{

}

uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{

}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{

}

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{

}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)

/*
 * IRQ Configuration and ISR Handling
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi)
void GPIO_IRQHandling(uint8_t PinNumber)
